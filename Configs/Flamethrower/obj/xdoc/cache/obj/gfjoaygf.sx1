id: cs.temp.dll
language: CSharp
name:
  Default: cs.temp.dll
qualifiedName:
  Default: cs.temp.dll
type: Assembly
modifiers: {}
items:
- id: Febucci.Attributes
  commentId: N:Febucci.Attributes
  language: CSharp
  name:
    CSharp: Febucci.Attributes
    VB: Febucci.Attributes
  nameWithType:
    CSharp: Febucci.Attributes
    VB: Febucci.Attributes
  qualifiedName:
    CSharp: Febucci.Attributes
    VB: Febucci.Attributes
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: Febucci.Attributes.CharsDisplayTimeAttributeDrawer
    commentId: T:Febucci.Attributes.CharsDisplayTimeAttributeDrawer
    language: CSharp
    name:
      CSharp: CharsDisplayTimeAttributeDrawer
      VB: CharsDisplayTimeAttributeDrawer
    nameWithType:
      CSharp: CharsDisplayTimeAttributeDrawer
      VB: CharsDisplayTimeAttributeDrawer
    qualifiedName:
      CSharp: Febucci.Attributes.CharsDisplayTimeAttributeDrawer
      VB: Febucci.Attributes.CharsDisplayTimeAttributeDrawer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.Attributes
    source:
      id: CharsDisplayTimeAttributeDrawer
      path: ''
      startLine: 66
    syntax:
      content:
        CSharp: 'public class CharsDisplayTimeAttributeDrawer : PropertyDrawer'
        VB: >-
          Public Class CharsDisplayTimeAttributeDrawer

              Inherits PropertyDrawer
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Febucci.Attributes.CharsDisplayTimeAttributeDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
      commentId: M:Febucci.Attributes.CharsDisplayTimeAttributeDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: OnGUI(Rect, SerializedProperty, GUIContent)
        VB: OnGUI(Rect, SerializedProperty, GUIContent)
      nameWithType:
        CSharp: CharsDisplayTimeAttributeDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
        VB: CharsDisplayTimeAttributeDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: Febucci.Attributes.CharsDisplayTimeAttributeDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
        VB: Febucci.Attributes.CharsDisplayTimeAttributeDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.Attributes
      source:
        id: OnGUI
        path: ''
        startLine: 71
      syntax:
        content:
          CSharp: public override void OnGUI(Rect position, SerializedProperty property, GUIContent label)
          VB: Public Overrides Sub OnGUI(position As Rect, property As SerializedProperty, label As GUIContent)
        parameters:
        - id: position
          type: Rect
        - id: property
          type: SerializedProperty
        - id: label
          type: GUIContent
      overload: Febucci.Attributes.CharsDisplayTimeAttributeDrawer.OnGUI*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.Attributes.MinValueAttributeDrawer
    commentId: T:Febucci.Attributes.MinValueAttributeDrawer
    language: CSharp
    name:
      CSharp: MinValueAttributeDrawer
      VB: MinValueAttributeDrawer
    nameWithType:
      CSharp: MinValueAttributeDrawer
      VB: MinValueAttributeDrawer
    qualifiedName:
      CSharp: Febucci.Attributes.MinValueAttributeDrawer
      VB: Febucci.Attributes.MinValueAttributeDrawer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.Attributes
    source:
      id: MinValueAttributeDrawer
      path: ''
      startLine: 132
    syntax:
      content:
        CSharp: 'public class MinValueAttributeDrawer : PropertyDrawer'
        VB: >-
          Public Class MinValueAttributeDrawer

              Inherits PropertyDrawer
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Febucci.Attributes.MinValueAttributeDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
      commentId: M:Febucci.Attributes.MinValueAttributeDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: OnGUI(Rect, SerializedProperty, GUIContent)
        VB: OnGUI(Rect, SerializedProperty, GUIContent)
      nameWithType:
        CSharp: MinValueAttributeDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
        VB: MinValueAttributeDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: Febucci.Attributes.MinValueAttributeDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
        VB: Febucci.Attributes.MinValueAttributeDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.Attributes
      source:
        id: OnGUI
        path: ''
        startLine: 135
      syntax:
        content:
          CSharp: public override void OnGUI(Rect position, SerializedProperty property, GUIContent label)
          VB: Public Overrides Sub OnGUI(position As Rect, property As SerializedProperty, label As GUIContent)
        parameters:
        - id: position
          type: Rect
        - id: property
          type: SerializedProperty
        - id: label
          type: GUIContent
      overload: Febucci.Attributes.MinValueAttributeDrawer.OnGUI*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.Attributes.NotZeroAttributeDrawer
    commentId: T:Febucci.Attributes.NotZeroAttributeDrawer
    language: CSharp
    name:
      CSharp: NotZeroAttributeDrawer
      VB: NotZeroAttributeDrawer
    nameWithType:
      CSharp: NotZeroAttributeDrawer
      VB: NotZeroAttributeDrawer
    qualifiedName:
      CSharp: Febucci.Attributes.NotZeroAttributeDrawer
      VB: Febucci.Attributes.NotZeroAttributeDrawer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.Attributes
    source:
      id: NotZeroAttributeDrawer
      path: ''
      startLine: 162
    syntax:
      content:
        CSharp: 'public class NotZeroAttributeDrawer : PropertyDrawer'
        VB: >-
          Public Class NotZeroAttributeDrawer

              Inherits PropertyDrawer
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Febucci.Attributes.NotZeroAttributeDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
      commentId: M:Febucci.Attributes.NotZeroAttributeDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: OnGUI(Rect, SerializedProperty, GUIContent)
        VB: OnGUI(Rect, SerializedProperty, GUIContent)
      nameWithType:
        CSharp: NotZeroAttributeDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
        VB: NotZeroAttributeDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: Febucci.Attributes.NotZeroAttributeDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
        VB: Febucci.Attributes.NotZeroAttributeDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.Attributes
      source:
        id: OnGUI
        path: ''
        startLine: 165
      syntax:
        content:
          CSharp: public override void OnGUI(Rect position, SerializedProperty property, GUIContent label)
          VB: Public Overrides Sub OnGUI(position As Rect, property As SerializedProperty, label As GUIContent)
        parameters:
        - id: position
          type: Rect
        - id: property
          type: SerializedProperty
        - id: label
          type: GUIContent
      overload: Febucci.Attributes.NotZeroAttributeDrawer.OnGUI*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.Attributes.PositiveValueAttributeDrawer
    commentId: T:Febucci.Attributes.PositiveValueAttributeDrawer
    language: CSharp
    name:
      CSharp: PositiveValueAttributeDrawer
      VB: PositiveValueAttributeDrawer
    nameWithType:
      CSharp: PositiveValueAttributeDrawer
      VB: PositiveValueAttributeDrawer
    qualifiedName:
      CSharp: Febucci.Attributes.PositiveValueAttributeDrawer
      VB: Febucci.Attributes.PositiveValueAttributeDrawer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.Attributes
    source:
      id: PositiveValueAttributeDrawer
      path: ''
      startLine: 211
    syntax:
      content:
        CSharp: 'public class PositiveValueAttributeDrawer : PropertyDrawer'
        VB: >-
          Public Class PositiveValueAttributeDrawer

              Inherits PropertyDrawer
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Febucci.Attributes.PositiveValueAttributeDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
      commentId: M:Febucci.Attributes.PositiveValueAttributeDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: OnGUI(Rect, SerializedProperty, GUIContent)
        VB: OnGUI(Rect, SerializedProperty, GUIContent)
      nameWithType:
        CSharp: PositiveValueAttributeDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
        VB: PositiveValueAttributeDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: Febucci.Attributes.PositiveValueAttributeDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
        VB: Febucci.Attributes.PositiveValueAttributeDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.Attributes
      source:
        id: OnGUI
        path: ''
        startLine: 215
      syntax:
        content:
          CSharp: public override void OnGUI(Rect position, SerializedProperty property, GUIContent label)
          VB: Public Overrides Sub OnGUI(position As Rect, property As SerializedProperty, label As GUIContent)
        parameters:
        - id: position
          type: Rect
        - id: property
          type: SerializedProperty
        - id: label
          type: GUIContent
      overload: Febucci.Attributes.PositiveValueAttributeDrawer.OnGUI*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.Attributes.CharsDisplayTimeAttribute
    commentId: T:Febucci.Attributes.CharsDisplayTimeAttribute
    language: CSharp
    name:
      CSharp: CharsDisplayTimeAttribute
      VB: CharsDisplayTimeAttribute
    nameWithType:
      CSharp: CharsDisplayTimeAttribute
      VB: CharsDisplayTimeAttribute
    qualifiedName:
      CSharp: Febucci.Attributes.CharsDisplayTimeAttribute
      VB: Febucci.Attributes.CharsDisplayTimeAttribute
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.Attributes
    source:
      id: CharsDisplayTimeAttribute
      path: ''
      startLine: 257
    syntax:
      content:
        CSharp: 'public class CharsDisplayTimeAttribute : PropertyAttribute'
        VB: >-
          Public Class CharsDisplayTimeAttribute

              Inherits PropertyAttribute
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Febucci.Attributes.MinValueAttribute
    commentId: T:Febucci.Attributes.MinValueAttribute
    language: CSharp
    name:
      CSharp: MinValueAttribute
      VB: MinValueAttribute
    nameWithType:
      CSharp: MinValueAttribute
      VB: MinValueAttribute
    qualifiedName:
      CSharp: Febucci.Attributes.MinValueAttribute
      VB: Febucci.Attributes.MinValueAttribute
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.Attributes
    source:
      id: MinValueAttribute
      path: ''
      startLine: 266
    syntax:
      content:
        CSharp: 'public class MinValueAttribute : PropertyAttribute'
        VB: >-
          Public Class MinValueAttribute

              Inherits PropertyAttribute
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Febucci.Attributes.MinValueAttribute.min
      commentId: F:Febucci.Attributes.MinValueAttribute.min
      language: CSharp
      name:
        CSharp: min
        VB: min
      nameWithType:
        CSharp: MinValueAttribute.min
        VB: MinValueAttribute.min
      qualifiedName:
        CSharp: Febucci.Attributes.MinValueAttribute.min
        VB: Febucci.Attributes.MinValueAttribute.min
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.Attributes
      source:
        id: min
        path: ''
        startLine: 268
      syntax:
        content:
          CSharp: public float min
          VB: Public min As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.Attributes.MinValueAttribute.#ctor(System.Single)
      commentId: M:Febucci.Attributes.MinValueAttribute.#ctor(System.Single)
      language: CSharp
      name:
        CSharp: MinValueAttribute(Single)
        VB: MinValueAttribute(Single)
      nameWithType:
        CSharp: MinValueAttribute.MinValueAttribute(Single)
        VB: MinValueAttribute.MinValueAttribute(Single)
      qualifiedName:
        CSharp: Febucci.Attributes.MinValueAttribute.MinValueAttribute(System.Single)
        VB: Febucci.Attributes.MinValueAttribute.MinValueAttribute(System.Single)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Febucci.Attributes
      source:
        id: .ctor
        path: ''
        startLine: 269
      syntax:
        content:
          CSharp: public MinValueAttribute(float min)
          VB: Public Sub New(min As Single)
        parameters:
        - id: min
          type: System.Single
      overload: Febucci.Attributes.MinValueAttribute.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Febucci.Attributes.NotZeroAttribute
    commentId: T:Febucci.Attributes.NotZeroAttribute
    language: CSharp
    name:
      CSharp: NotZeroAttribute
      VB: NotZeroAttribute
    nameWithType:
      CSharp: NotZeroAttribute
      VB: NotZeroAttribute
    qualifiedName:
      CSharp: Febucci.Attributes.NotZeroAttribute
      VB: Febucci.Attributes.NotZeroAttribute
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.Attributes
    source:
      id: NotZeroAttribute
      path: ''
      startLine: 280
    syntax:
      content:
        CSharp: 'public class NotZeroAttribute : PropertyAttribute'
        VB: >-
          Public Class NotZeroAttribute

              Inherits PropertyAttribute
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Febucci.Attributes.PositiveValueAttribute
    commentId: T:Febucci.Attributes.PositiveValueAttribute
    language: CSharp
    name:
      CSharp: PositiveValueAttribute
      VB: PositiveValueAttribute
    nameWithType:
      CSharp: PositiveValueAttribute
      VB: PositiveValueAttribute
    qualifiedName:
      CSharp: Febucci.Attributes.PositiveValueAttribute
      VB: Febucci.Attributes.PositiveValueAttribute
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.Attributes
    source:
      id: PositiveValueAttribute
      path: ''
      startLine: 290
    syntax:
      content:
        CSharp: 'public class PositiveValueAttribute : PropertyAttribute'
        VB: >-
          Public Class PositiveValueAttribute

              Inherits PropertyAttribute
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
- id: Febucci.UI
  commentId: N:Febucci.UI
  language: CSharp
  name:
    CSharp: Febucci.UI
    VB: Febucci.UI
  nameWithType:
    CSharp: Febucci.UI
    VB: Febucci.UI
  qualifiedName:
    CSharp: Febucci.UI
    VB: Febucci.UI
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: Febucci.UI.TextAnimatorSettingsDrawer
    commentId: T:Febucci.UI.TextAnimatorSettingsDrawer
    language: CSharp
    name:
      CSharp: TextAnimatorSettingsDrawer
      VB: TextAnimatorSettingsDrawer
    nameWithType:
      CSharp: TextAnimatorSettingsDrawer
      VB: TextAnimatorSettingsDrawer
    qualifiedName:
      CSharp: Febucci.UI.TextAnimatorSettingsDrawer
      VB: Febucci.UI.TextAnimatorSettingsDrawer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI
    source:
      id: TextAnimatorSettingsDrawer
      path: ''
      startLine: 2173
    syntax:
      content:
        CSharp: 'public class TextAnimatorSettingsDrawer : Editor'
        VB: >-
          Public Class TextAnimatorSettingsDrawer

              Inherits Editor
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Febucci.UI.TextAnimatorSettingsDrawer.OnInspectorGUI
      commentId: M:Febucci.UI.TextAnimatorSettingsDrawer.OnInspectorGUI
      language: CSharp
      name:
        CSharp: OnInspectorGUI()
        VB: OnInspectorGUI()
      nameWithType:
        CSharp: TextAnimatorSettingsDrawer.OnInspectorGUI()
        VB: TextAnimatorSettingsDrawer.OnInspectorGUI()
      qualifiedName:
        CSharp: Febucci.UI.TextAnimatorSettingsDrawer.OnInspectorGUI()
        VB: Febucci.UI.TextAnimatorSettingsDrawer.OnInspectorGUI()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: OnInspectorGUI
        path: ''
        startLine: 2219
      syntax:
        content:
          CSharp: public override void OnInspectorGUI()
          VB: Public Overrides Sub OnInspectorGUI
      overload: Febucci.UI.TextAnimatorSettingsDrawer.OnInspectorGUI*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.TextAnimatorSetupWindow
    commentId: T:Febucci.UI.TextAnimatorSetupWindow
    language: CSharp
    name:
      CSharp: TextAnimatorSetupWindow
      VB: TextAnimatorSetupWindow
    nameWithType:
      CSharp: TextAnimatorSetupWindow
      VB: TextAnimatorSetupWindow
    qualifiedName:
      CSharp: Febucci.UI.TextAnimatorSetupWindow
      VB: Febucci.UI.TextAnimatorSetupWindow
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI
    source:
      id: TextAnimatorSetupWindow
      path: ''
      startLine: 2265
    syntax:
      content:
        CSharp: 'public class TextAnimatorSetupWindow : EditorWindow'
        VB: >-
          Public Class TextAnimatorSetupWindow

              Inherits EditorWindow
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Febucci.UI.TextAnimatorSetupWindow.url_discord
      commentId: F:Febucci.UI.TextAnimatorSetupWindow.url_discord
      language: CSharp
      name:
        CSharp: url_discord
        VB: url_discord
      nameWithType:
        CSharp: TextAnimatorSetupWindow.url_discord
        VB: TextAnimatorSetupWindow.url_discord
      qualifiedName:
        CSharp: Febucci.UI.TextAnimatorSetupWindow.url_discord
        VB: Febucci.UI.TextAnimatorSetupWindow.url_discord
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: url_discord
        path: ''
        startLine: 2273
      syntax:
        content:
          CSharp: public const string url_discord = "https://discord.gg/j4pySDa5rU"
          VB: Public Const url_discord As String = "https://discord.gg/j4pySDa5rU"
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Febucci.UI.TextAnimatorSetupWindow.ResetToBuiltIn
      commentId: M:Febucci.UI.TextAnimatorSetupWindow.ResetToBuiltIn
      language: CSharp
      name:
        CSharp: ResetToBuiltIn()
        VB: ResetToBuiltIn()
      nameWithType:
        CSharp: TextAnimatorSetupWindow.ResetToBuiltIn()
        VB: TextAnimatorSetupWindow.ResetToBuiltIn()
      qualifiedName:
        CSharp: Febucci.UI.TextAnimatorSetupWindow.ResetToBuiltIn()
        VB: Febucci.UI.TextAnimatorSetupWindow.ResetToBuiltIn()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: ResetToBuiltIn
        path: ''
        startLine: 2518
      summary: "\nCreates built-in effects databases and assigns it to the settings file as default.\n"
      remarks: "\nIn case the settings file doesn&apos;t exist, it&apos;ll be created as well.\nIn case the built-in effects or databases already exist, they&apos;ll be overwritten.\n"
      example: []
      syntax:
        content:
          CSharp: public static void ResetToBuiltIn()
          VB: Public Shared Sub ResetToBuiltIn
      overload: Febucci.UI.TextAnimatorSetupWindow.ResetToBuiltIn*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Febucci.UI.TextAnimatorSetupWindow._CreateDatabase``2(System.String,System.String,System.String,EffectCategory)
      commentId: M:Febucci.UI.TextAnimatorSetupWindow._CreateDatabase``2(System.String,System.String,System.String,EffectCategory)
      language: CSharp
      name:
        CSharp: _CreateDatabase<DatabaseType, ElementType>(String, String, String, EffectCategory)
        VB: _CreateDatabase(Of DatabaseType, ElementType)(String, String, String, EffectCategory)
      nameWithType:
        CSharp: TextAnimatorSetupWindow._CreateDatabase<DatabaseType, ElementType>(String, String, String, EffectCategory)
        VB: TextAnimatorSetupWindow._CreateDatabase(Of DatabaseType, ElementType)(String, String, String, EffectCategory)
      qualifiedName:
        CSharp: Febucci.UI.TextAnimatorSetupWindow._CreateDatabase<DatabaseType, ElementType>(System.String, System.String, System.String, EffectCategory)
        VB: Febucci.UI.TextAnimatorSetupWindow._CreateDatabase(Of DatabaseType, ElementType)(System.String, System.String, System.String, EffectCategory)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: _CreateDatabase
        path: ''
        startLine: 2570
      syntax:
        content:
          CSharp: >-
            public static DatabaseType _CreateDatabase<DatabaseType, ElementType>(string installationFolder, string folderName, string fileName, EffectCategory category)

                where DatabaseType : Database<ElementType> where ElementType : ScriptableObject, ITagProvider
          VB: Public Shared Function _CreateDatabase(Of DatabaseType As Database(Of ElementType), ElementType As {ScriptableObject, ITagProvider})(installationFolder As String, folderName As String, fileName As String, category As EffectCategory) As DatabaseType
        parameters:
        - id: installationFolder
          type: System.String
        - id: folderName
          type: System.String
        - id: fileName
          type: System.String
        - id: category
          type: EffectCategory
        typeParameters:
        - id: DatabaseType
        - id: ElementType
        return:
          type: '{DatabaseType}'
      overload: Febucci.UI.TextAnimatorSetupWindow._CreateDatabase*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Febucci.UI.TextAnimatorSetupWindow.FixSettingsFileNotFound
      commentId: M:Febucci.UI.TextAnimatorSetupWindow.FixSettingsFileNotFound
      language: CSharp
      name:
        CSharp: FixSettingsFileNotFound()
        VB: FixSettingsFileNotFound()
      nameWithType:
        CSharp: TextAnimatorSetupWindow.FixSettingsFileNotFound()
        VB: TextAnimatorSetupWindow.FixSettingsFileNotFound()
      qualifiedName:
        CSharp: Febucci.UI.TextAnimatorSetupWindow.FixSettingsFileNotFound()
        VB: Febucci.UI.TextAnimatorSetupWindow.FixSettingsFileNotFound()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: FixSettingsFileNotFound
        path: ''
        startLine: 2688
      summary: "\nCreates a new settings file (with databases) inside the installation&apos;s Resources folder.\nAlso assigns default effects and actions databases,\neither looking if they already exist or by creating new ones.\n"
      remarks: "\nP.S. A new settings file will be created even if it already exists but in another folder,\nas the user might have moved it for archive/backups purposes.\n"
      example: []
      syntax:
        content:
          CSharp: public static void FixSettingsFileNotFound()
          VB: Public Shared Sub FixSettingsFileNotFound
      overload: Febucci.UI.TextAnimatorSetupWindow.FixSettingsFileNotFound*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Febucci.UI.TextAnimatorSetupWindow._CreateDirectoryIfDoesntExist(System.String)
      commentId: M:Febucci.UI.TextAnimatorSetupWindow._CreateDirectoryIfDoesntExist(System.String)
      language: CSharp
      name:
        CSharp: _CreateDirectoryIfDoesntExist(String)
        VB: _CreateDirectoryIfDoesntExist(String)
      nameWithType:
        CSharp: TextAnimatorSetupWindow._CreateDirectoryIfDoesntExist(String)
        VB: TextAnimatorSetupWindow._CreateDirectoryIfDoesntExist(String)
      qualifiedName:
        CSharp: Febucci.UI.TextAnimatorSetupWindow._CreateDirectoryIfDoesntExist(System.String)
        VB: Febucci.UI.TextAnimatorSetupWindow._CreateDirectoryIfDoesntExist(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: _CreateDirectoryIfDoesntExist
        path: ''
        startLine: 2791
      syntax:
        content:
          CSharp: public static void _CreateDirectoryIfDoesntExist(string path)
          VB: Public Shared Sub _CreateDirectoryIfDoesntExist(path As String)
        parameters:
        - id: path
          type: System.String
      overload: Febucci.UI.TextAnimatorSetupWindow._CreateDirectoryIfDoesntExist*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Febucci.UI.TextAnimatorSetupWindow._CreateScriptableAssetAtPath``1(System.String,System.String)
      commentId: M:Febucci.UI.TextAnimatorSetupWindow._CreateScriptableAssetAtPath``1(System.String,System.String)
      language: CSharp
      name:
        CSharp: _CreateScriptableAssetAtPath<T>(String, String)
        VB: _CreateScriptableAssetAtPath(Of T)(String, String)
      nameWithType:
        CSharp: TextAnimatorSetupWindow._CreateScriptableAssetAtPath<T>(String, String)
        VB: TextAnimatorSetupWindow._CreateScriptableAssetAtPath(Of T)(String, String)
      qualifiedName:
        CSharp: Febucci.UI.TextAnimatorSetupWindow._CreateScriptableAssetAtPath<T>(System.String, System.String)
        VB: Febucci.UI.TextAnimatorSetupWindow._CreateScriptableAssetAtPath(Of T)(System.String, System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: _CreateScriptableAssetAtPath
        path: ''
        startLine: 2812
      syntax:
        content:
          CSharp: >-
            public static T _CreateScriptableAssetAtPath<T>(string path, string objectName)

                where T : ScriptableObject
          VB: Public Shared Function _CreateScriptableAssetAtPath(Of T As ScriptableObject)(path As String, objectName As String) As T
        parameters:
        - id: path
          type: System.String
        - id: objectName
          type: System.String
        typeParameters:
        - id: T
        return:
          type: '{T}'
      overload: Febucci.UI.TextAnimatorSetupWindow._CreateScriptableAssetAtPath*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Febucci.UI.TexturesLoader
    commentId: T:Febucci.UI.TexturesLoader
    language: CSharp
    name:
      CSharp: TexturesLoader
      VB: TexturesLoader
    nameWithType:
      CSharp: TexturesLoader
      VB: TexturesLoader
    qualifiedName:
      CSharp: Febucci.UI.TexturesLoader
      VB: Febucci.UI.TexturesLoader
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI
    source:
      id: TexturesLoader
      path: ''
      startLine: 2959
    syntax:
      content:
        CSharp: public static class TexturesLoader
        VB: Public Module TexturesLoader
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: Febucci.UI.TexturesLoader.AboutLogo
      commentId: P:Febucci.UI.TexturesLoader.AboutLogo
      language: CSharp
      name:
        CSharp: AboutLogo
        VB: AboutLogo
      nameWithType:
        CSharp: TexturesLoader.AboutLogo
        VB: TexturesLoader.AboutLogo
      qualifiedName:
        CSharp: Febucci.UI.TexturesLoader.AboutLogo
        VB: Febucci.UI.TexturesLoader.AboutLogo
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: AboutLogo
        path: ''
        startLine: 2964
      syntax:
        content:
          CSharp: public static Texture AboutLogo { get; }
          VB: Public Shared ReadOnly Property AboutLogo As Texture
        parameters: []
        return:
          type: Texture
      overload: Febucci.UI.TexturesLoader.AboutLogo*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Febucci.UI.TexturesLoader.StopIcon
      commentId: P:Febucci.UI.TexturesLoader.StopIcon
      language: CSharp
      name:
        CSharp: StopIcon
        VB: StopIcon
      nameWithType:
        CSharp: TexturesLoader.StopIcon
        VB: TexturesLoader.StopIcon
      qualifiedName:
        CSharp: Febucci.UI.TexturesLoader.StopIcon
        VB: Febucci.UI.TexturesLoader.StopIcon
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: StopIcon
        path: ''
        startLine: 2975
      syntax:
        content:
          CSharp: public static Texture StopIcon { get; }
          VB: Public Shared ReadOnly Property StopIcon As Texture
        parameters: []
        return:
          type: Texture
      overload: Febucci.UI.TexturesLoader.StopIcon*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Febucci.UI.TexturesLoader.RestartIcon
      commentId: P:Febucci.UI.TexturesLoader.RestartIcon
      language: CSharp
      name:
        CSharp: RestartIcon
        VB: RestartIcon
      nameWithType:
        CSharp: TexturesLoader.RestartIcon
        VB: TexturesLoader.RestartIcon
      qualifiedName:
        CSharp: Febucci.UI.TexturesLoader.RestartIcon
        VB: Febucci.UI.TexturesLoader.RestartIcon
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: RestartIcon
        path: ''
        startLine: 2985
      syntax:
        content:
          CSharp: public static Texture RestartIcon { get; }
          VB: Public Shared ReadOnly Property RestartIcon As Texture
        parameters: []
        return:
          type: Texture
      overload: Febucci.UI.TexturesLoader.RestartIcon*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Febucci.UI.TexturesLoader.SaveIcon
      commentId: P:Febucci.UI.TexturesLoader.SaveIcon
      language: CSharp
      name:
        CSharp: SaveIcon
        VB: SaveIcon
      nameWithType:
        CSharp: TexturesLoader.SaveIcon
        VB: TexturesLoader.SaveIcon
      qualifiedName:
        CSharp: Febucci.UI.TexturesLoader.SaveIcon
        VB: Febucci.UI.TexturesLoader.SaveIcon
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: SaveIcon
        path: ''
        startLine: 2995
      syntax:
        content:
          CSharp: public static Texture SaveIcon { get; }
          VB: Public Shared ReadOnly Property SaveIcon As Texture
        parameters: []
        return:
          type: Texture
      overload: Febucci.UI.TexturesLoader.SaveIcon*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Febucci.UI.TexturesLoader.PlayIcon
      commentId: P:Febucci.UI.TexturesLoader.PlayIcon
      language: CSharp
      name:
        CSharp: PlayIcon
        VB: PlayIcon
      nameWithType:
        CSharp: TexturesLoader.PlayIcon
        VB: TexturesLoader.PlayIcon
      qualifiedName:
        CSharp: Febucci.UI.TexturesLoader.PlayIcon
        VB: Febucci.UI.TexturesLoader.PlayIcon
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: PlayIcon
        path: ''
        startLine: 3005
      syntax:
        content:
          CSharp: public static Texture PlayIcon { get; }
          VB: Public Shared ReadOnly Property PlayIcon As Texture
        parameters: []
        return:
          type: Texture
      overload: Febucci.UI.TexturesLoader.PlayIcon*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Febucci.UI.TexturesLoader.PauseIcon
      commentId: P:Febucci.UI.TexturesLoader.PauseIcon
      language: CSharp
      name:
        CSharp: PauseIcon
        VB: PauseIcon
      nameWithType:
        CSharp: TexturesLoader.PauseIcon
        VB: TexturesLoader.PauseIcon
      qualifiedName:
        CSharp: Febucci.UI.TexturesLoader.PauseIcon
        VB: Febucci.UI.TexturesLoader.PauseIcon
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: PauseIcon
        path: ''
        startLine: 3015
      syntax:
        content:
          CSharp: public static Texture PauseIcon { get; }
          VB: Public Shared ReadOnly Property PauseIcon As Texture
        parameters: []
        return:
          type: Texture
      overload: Febucci.UI.TexturesLoader.PauseIcon*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Febucci.UI.TexturesLoader.WarningIcon
      commentId: P:Febucci.UI.TexturesLoader.WarningIcon
      language: CSharp
      name:
        CSharp: WarningIcon
        VB: WarningIcon
      nameWithType:
        CSharp: TexturesLoader.WarningIcon
        VB: TexturesLoader.WarningIcon
      qualifiedName:
        CSharp: Febucci.UI.TexturesLoader.WarningIcon
        VB: Febucci.UI.TexturesLoader.WarningIcon
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: WarningIcon
        path: ''
        startLine: 3025
      syntax:
        content:
          CSharp: public static Texture WarningIcon { get; }
          VB: Public Shared ReadOnly Property WarningIcon As Texture
        parameters: []
        return:
          type: Texture
      overload: Febucci.UI.TexturesLoader.WarningIcon*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Febucci.UI.TexturesLoader.ErrorIcon
      commentId: P:Febucci.UI.TexturesLoader.ErrorIcon
      language: CSharp
      name:
        CSharp: ErrorIcon
        VB: ErrorIcon
      nameWithType:
        CSharp: TexturesLoader.ErrorIcon
        VB: TexturesLoader.ErrorIcon
      qualifiedName:
        CSharp: Febucci.UI.TexturesLoader.ErrorIcon
        VB: Febucci.UI.TexturesLoader.ErrorIcon
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: ErrorIcon
        path: ''
        startLine: 3026
      syntax:
        content:
          CSharp: public static Texture ErrorIcon { get; }
          VB: Public Shared ReadOnly Property ErrorIcon As Texture
        parameters: []
        return:
          type: Texture
      overload: Febucci.UI.TexturesLoader.ErrorIcon*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
  - id: Febucci.UI.TextAnimator_TMP
    commentId: T:Febucci.UI.TextAnimator_TMP
    language: CSharp
    name:
      CSharp: TextAnimator_TMP
      VB: TextAnimator_TMP
    nameWithType:
      CSharp: TextAnimator_TMP
      VB: TextAnimator_TMP
    qualifiedName:
      CSharp: Febucci.UI.TextAnimator_TMP
      VB: Febucci.UI.TextAnimator_TMP
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI
    source:
      id: TextAnimator_TMP
      path: ''
      startLine: 3041
    summary: "\nAnimates a TMP text component, both UI or World.\nSee <see cref=\"!:TAnimCore\"></see> for the base class information.\n"
    example: []
    syntax:
      content:
        CSharp: 'public sealed class TextAnimator_TMP : TAnimCore'
        VB: >-
          Public NotInheritable Class TextAnimator_TMP

              Inherits TAnimCore
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Febucci.UI.TextAnimator_TMP.TMProComponent
      commentId: P:Febucci.UI.TextAnimator_TMP.TMProComponent
      language: CSharp
      name:
        CSharp: TMProComponent
        VB: TMProComponent
      nameWithType:
        CSharp: TextAnimator_TMP.TMProComponent
        VB: TextAnimator_TMP.TMProComponent
      qualifiedName:
        CSharp: Febucci.UI.TextAnimator_TMP.TMProComponent
        VB: Febucci.UI.TextAnimator_TMP.TMProComponent
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: TMProComponent
        path: ''
        startLine: 3048
      summary: "\nThe TextMeshPro text component linked to this Text Animator\n"
      example: []
      syntax:
        content:
          CSharp: public TMP_Text TMProComponent { get; }
          VB: Public ReadOnly Property TMProComponent As TMP_Text
        parameters: []
        return:
          type: TMP_Text
      overload: Febucci.UI.TextAnimator_TMP.TMProComponent*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Febucci.UI.TextAnimator_TMP.OnInitialized
      commentId: M:Febucci.UI.TextAnimator_TMP.OnInitialized
      language: CSharp
      name:
        CSharp: OnInitialized()
        VB: OnInitialized()
      nameWithType:
        CSharp: TextAnimator_TMP.OnInitialized()
        VB: TextAnimator_TMP.OnInitialized()
      qualifiedName:
        CSharp: Febucci.UI.TextAnimator_TMP.OnInitialized()
        VB: Febucci.UI.TextAnimator_TMP.OnInitialized()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: OnInitialized
        path: ''
        startLine: 3086
      syntax:
        content:
          CSharp: protected override void OnInitialized()
          VB: Protected Overrides Sub OnInitialized
      overload: Febucci.UI.TextAnimator_TMP.OnInitialized*
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: Febucci.UI.TextAnimator_TMP.OnEnable
      commentId: M:Febucci.UI.TextAnimator_TMP.OnEnable
      language: CSharp
      name:
        CSharp: OnEnable()
        VB: OnEnable()
      nameWithType:
        CSharp: TextAnimator_TMP.OnEnable()
        VB: TextAnimator_TMP.OnEnable()
      qualifiedName:
        CSharp: Febucci.UI.TextAnimator_TMP.OnEnable()
        VB: Febucci.UI.TextAnimator_TMP.OnEnable()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: OnEnable
        path: ''
        startLine: 3095
      syntax:
        content:
          CSharp: protected override void OnEnable()
          VB: Protected Overrides Sub OnEnable
      overload: Febucci.UI.TextAnimator_TMP.OnEnable*
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: Febucci.UI.TextAnimator_TMP.GetExtraParsers
      commentId: M:Febucci.UI.TextAnimator_TMP.GetExtraParsers
      language: CSharp
      name:
        CSharp: GetExtraParsers()
        VB: GetExtraParsers()
      nameWithType:
        CSharp: TextAnimator_TMP.GetExtraParsers()
        VB: TextAnimator_TMP.GetExtraParsers()
      qualifiedName:
        CSharp: Febucci.UI.TextAnimator_TMP.GetExtraParsers()
        VB: Febucci.UI.TextAnimator_TMP.GetExtraParsers()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: GetExtraParsers
        path: ''
        startLine: 3103
      syntax:
        content:
          CSharp: protected override TagParserBase[] GetExtraParsers()
          VB: Protected Overrides Function GetExtraParsers As TagParserBase()
        return:
          type: TagParserBase[]
      overload: Febucci.UI.TextAnimator_TMP.GetExtraParsers*
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: Febucci.UI.TextAnimator_TMP.GetOriginalTextFromSource
      commentId: M:Febucci.UI.TextAnimator_TMP.GetOriginalTextFromSource
      language: CSharp
      name:
        CSharp: GetOriginalTextFromSource()
        VB: GetOriginalTextFromSource()
      nameWithType:
        CSharp: TextAnimator_TMP.GetOriginalTextFromSource()
        VB: TextAnimator_TMP.GetOriginalTextFromSource()
      qualifiedName:
        CSharp: Febucci.UI.TextAnimator_TMP.GetOriginalTextFromSource()
        VB: Febucci.UI.TextAnimator_TMP.GetOriginalTextFromSource()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: GetOriginalTextFromSource
        path: ''
        startLine: 3108
      syntax:
        content:
          CSharp: public override string GetOriginalTextFromSource()
          VB: Public Overrides Function GetOriginalTextFromSource As String
        return:
          type: System.String
      overload: Febucci.UI.TextAnimator_TMP.GetOriginalTextFromSource*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.TextAnimator_TMP.GetStrippedTextFromSource
      commentId: M:Febucci.UI.TextAnimator_TMP.GetStrippedTextFromSource
      language: CSharp
      name:
        CSharp: GetStrippedTextFromSource()
        VB: GetStrippedTextFromSource()
      nameWithType:
        CSharp: TextAnimator_TMP.GetStrippedTextFromSource()
        VB: TextAnimator_TMP.GetStrippedTextFromSource()
      qualifiedName:
        CSharp: Febucci.UI.TextAnimator_TMP.GetStrippedTextFromSource()
        VB: Febucci.UI.TextAnimator_TMP.GetStrippedTextFromSource()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: GetStrippedTextFromSource
        path: ''
        startLine: 3109
      syntax:
        content:
          CSharp: public override string GetStrippedTextFromSource()
          VB: Public Overrides Function GetStrippedTextFromSource As String
        return:
          type: System.String
      overload: Febucci.UI.TextAnimator_TMP.GetStrippedTextFromSource*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.TextAnimator_TMP.SetTextToSource(System.String)
      commentId: M:Febucci.UI.TextAnimator_TMP.SetTextToSource(System.String)
      language: CSharp
      name:
        CSharp: SetTextToSource(String)
        VB: SetTextToSource(String)
      nameWithType:
        CSharp: TextAnimator_TMP.SetTextToSource(String)
        VB: TextAnimator_TMP.SetTextToSource(String)
      qualifiedName:
        CSharp: Febucci.UI.TextAnimator_TMP.SetTextToSource(System.String)
        VB: Febucci.UI.TextAnimator_TMP.SetTextToSource(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: SetTextToSource
        path: ''
        startLine: 3116
      summary: "\nEquivalent to setting the text to the TMP component, without parsing it.\nPlease use <see cref=\"!:TAnimCore.SetText(string)\"></see> or <see cref=\"!:TAnimCore.SetText(string, bool)\"></see> instead.\n"
      example: []
      syntax:
        content:
          CSharp: public override void SetTextToSource(string text)
          VB: Public Overrides Sub SetTextToSource(text As String)
        parameters:
        - id: text
          type: System.String
          description: ''
      overload: Febucci.UI.TextAnimator_TMP.SetTextToSource*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.TextAnimator_TMP.IsReady
      commentId: M:Febucci.UI.TextAnimator_TMP.IsReady
      language: CSharp
      name:
        CSharp: IsReady()
        VB: IsReady()
      nameWithType:
        CSharp: TextAnimator_TMP.IsReady()
        VB: TextAnimator_TMP.IsReady()
      qualifiedName:
        CSharp: Febucci.UI.TextAnimator_TMP.IsReady()
        VB: Febucci.UI.TextAnimator_TMP.IsReady()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: IsReady
        path: ''
        startLine: 3157
      syntax:
        content:
          CSharp: protected override bool IsReady()
          VB: Protected Overrides Function IsReady As Boolean
        return:
          type: System.Boolean
      overload: Febucci.UI.TextAnimator_TMP.IsReady*
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: Febucci.UI.TextAnimator_TMP.GetCharactersCount
      commentId: M:Febucci.UI.TextAnimator_TMP.GetCharactersCount
      language: CSharp
      name:
        CSharp: GetCharactersCount()
        VB: GetCharactersCount()
      nameWithType:
        CSharp: TextAnimator_TMP.GetCharactersCount()
        VB: TextAnimator_TMP.GetCharactersCount()
      qualifiedName:
        CSharp: Febucci.UI.TextAnimator_TMP.GetCharactersCount()
        VB: Febucci.UI.TextAnimator_TMP.GetCharactersCount()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: GetCharactersCount
        path: ''
        startLine: 3159
      syntax:
        content:
          CSharp: protected override int GetCharactersCount()
          VB: Protected Overrides Function GetCharactersCount As Integer
        return:
          type: System.Int32
      overload: Febucci.UI.TextAnimator_TMP.GetCharactersCount*
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: Febucci.UI.TextAnimator_TMP.HasChangedRenderingSettings
      commentId: M:Febucci.UI.TextAnimator_TMP.HasChangedRenderingSettings
      language: CSharp
      name:
        CSharp: HasChangedRenderingSettings()
        VB: HasChangedRenderingSettings()
      nameWithType:
        CSharp: TextAnimator_TMP.HasChangedRenderingSettings()
        VB: TextAnimator_TMP.HasChangedRenderingSettings()
      qualifiedName:
        CSharp: Febucci.UI.TextAnimator_TMP.HasChangedRenderingSettings()
        VB: Febucci.UI.TextAnimator_TMP.HasChangedRenderingSettings()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: HasChangedRenderingSettings
        path: ''
        startLine: 3163
      syntax:
        content:
          CSharp: protected override bool HasChangedRenderingSettings()
          VB: Protected Overrides Function HasChangedRenderingSettings As Boolean
        return:
          type: System.Boolean
      overload: Febucci.UI.TextAnimator_TMP.HasChangedRenderingSettings*
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: Febucci.UI.TextAnimator_TMP.HasChangedText(System.String)
      commentId: M:Febucci.UI.TextAnimator_TMP.HasChangedText(System.String)
      language: CSharp
      name:
        CSharp: HasChangedText(String)
        VB: HasChangedText(String)
      nameWithType:
        CSharp: TextAnimator_TMP.HasChangedText(String)
        VB: TextAnimator_TMP.HasChangedText(String)
      qualifiedName:
        CSharp: Febucci.UI.TextAnimator_TMP.HasChangedText(System.String)
        VB: Febucci.UI.TextAnimator_TMP.HasChangedText(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: HasChangedText
        path: ''
        startLine: 3174
      syntax:
        content:
          CSharp: protected override bool HasChangedText(string strippedText)
          VB: Protected Overrides Function HasChangedText(strippedText As String) As Boolean
        parameters:
        - id: strippedText
          type: System.String
        return:
          type: System.Boolean
      overload: Febucci.UI.TextAnimator_TMP.HasChangedText*
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: Febucci.UI.TextAnimator_TMP.CopyMeshFromSource(CharacterData[]@)
      commentId: M:Febucci.UI.TextAnimator_TMP.CopyMeshFromSource(CharacterData[]@)
      language: CSharp
      name:
        CSharp: CopyMeshFromSource(ref CharacterData[])
        VB: CopyMeshFromSource(ByRef CharacterData())
      nameWithType:
        CSharp: TextAnimator_TMP.CopyMeshFromSource(ref CharacterData[])
        VB: TextAnimator_TMP.CopyMeshFromSource(ByRef CharacterData())
      qualifiedName:
        CSharp: Febucci.UI.TextAnimator_TMP.CopyMeshFromSource(ref CharacterData[])
        VB: Febucci.UI.TextAnimator_TMP.CopyMeshFromSource(ByRef CharacterData())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: CopyMeshFromSource
        path: ''
        startLine: 3189
      syntax:
        content:
          CSharp: protected override void CopyMeshFromSource(ref CharacterData[] characters)
          VB: Protected Overrides Sub CopyMeshFromSource(ByRef characters As CharacterData())
        parameters:
        - id: characters
          type: CharacterData[]
      overload: Febucci.UI.TextAnimator_TMP.CopyMeshFromSource*
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: Febucci.UI.TextAnimator_TMP.GetRenderedCharactersCountInsidePage
      commentId: M:Febucci.UI.TextAnimator_TMP.GetRenderedCharactersCountInsidePage
      language: CSharp
      name:
        CSharp: GetRenderedCharactersCountInsidePage()
        VB: GetRenderedCharactersCountInsidePage()
      nameWithType:
        CSharp: TextAnimator_TMP.GetRenderedCharactersCountInsidePage()
        VB: TextAnimator_TMP.GetRenderedCharactersCountInsidePage()
      qualifiedName:
        CSharp: Febucci.UI.TextAnimator_TMP.GetRenderedCharactersCountInsidePage()
        VB: Febucci.UI.TextAnimator_TMP.GetRenderedCharactersCountInsidePage()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: GetRenderedCharactersCountInsidePage
        path: ''
        startLine: 3227
      syntax:
        content:
          CSharp: public override int GetRenderedCharactersCountInsidePage()
          VB: Public Overrides Function GetRenderedCharactersCountInsidePage As Integer
        return:
          type: System.Int32
      overload: Febucci.UI.TextAnimator_TMP.GetRenderedCharactersCountInsidePage*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.TextAnimator_TMP.GetFirstCharacterIndexInsidePage
      commentId: M:Febucci.UI.TextAnimator_TMP.GetFirstCharacterIndexInsidePage
      language: CSharp
      name:
        CSharp: GetFirstCharacterIndexInsidePage()
        VB: GetFirstCharacterIndexInsidePage()
      nameWithType:
        CSharp: TextAnimator_TMP.GetFirstCharacterIndexInsidePage()
        VB: TextAnimator_TMP.GetFirstCharacterIndexInsidePage()
      qualifiedName:
        CSharp: Febucci.UI.TextAnimator_TMP.GetFirstCharacterIndexInsidePage()
        VB: Febucci.UI.TextAnimator_TMP.GetFirstCharacterIndexInsidePage()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: GetFirstCharacterIndexInsidePage
        path: ''
        startLine: 3229
      syntax:
        content:
          CSharp: public override int GetFirstCharacterIndexInsidePage()
          VB: Public Overrides Function GetFirstCharacterIndexInsidePage As Integer
        return:
          type: System.Int32
      overload: Febucci.UI.TextAnimator_TMP.GetFirstCharacterIndexInsidePage*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.TextAnimator_TMP.PasteMeshToSource(CharacterData[])
      commentId: M:Febucci.UI.TextAnimator_TMP.PasteMeshToSource(CharacterData[])
      language: CSharp
      name:
        CSharp: PasteMeshToSource(CharacterData[])
        VB: PasteMeshToSource(CharacterData())
      nameWithType:
        CSharp: TextAnimator_TMP.PasteMeshToSource(CharacterData[])
        VB: TextAnimator_TMP.PasteMeshToSource(CharacterData())
      qualifiedName:
        CSharp: Febucci.UI.TextAnimator_TMP.PasteMeshToSource(CharacterData[])
        VB: Febucci.UI.TextAnimator_TMP.PasteMeshToSource(CharacterData())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: PasteMeshToSource
        path: ''
        startLine: 3237
      syntax:
        content:
          CSharp: protected override void PasteMeshToSource(CharacterData[] characters)
          VB: Protected Overrides Sub PasteMeshToSource(characters As CharacterData())
        parameters:
        - id: characters
          type: CharacterData[]
      overload: Febucci.UI.TextAnimator_TMP.PasteMeshToSource*
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: Febucci.UI.TextAnimator_TMP.OnForceMeshUpdate
      commentId: M:Febucci.UI.TextAnimator_TMP.OnForceMeshUpdate
      language: CSharp
      name:
        CSharp: OnForceMeshUpdate()
        VB: OnForceMeshUpdate()
      nameWithType:
        CSharp: TextAnimator_TMP.OnForceMeshUpdate()
        VB: TextAnimator_TMP.OnForceMeshUpdate()
      qualifiedName:
        CSharp: Febucci.UI.TextAnimator_TMP.OnForceMeshUpdate()
        VB: Febucci.UI.TextAnimator_TMP.OnForceMeshUpdate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: OnForceMeshUpdate
        path: ''
        startLine: 3269
      syntax:
        content:
          CSharp: protected override void OnForceMeshUpdate()
          VB: Protected Overrides Sub OnForceMeshUpdate
      overload: Febucci.UI.TextAnimator_TMP.OnForceMeshUpdate*
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: Febucci.UI.TextAnimator_TMP.TryGetNextCharacter(TMP_CharacterInfo@)
      commentId: M:Febucci.UI.TextAnimator_TMP.TryGetNextCharacter(TMP_CharacterInfo@)
      language: CSharp
      name:
        CSharp: TryGetNextCharacter(out TMP_CharacterInfo)
        VB: TryGetNextCharacter(ByRef TMP_CharacterInfo)
      nameWithType:
        CSharp: TextAnimator_TMP.TryGetNextCharacter(out TMP_CharacterInfo)
        VB: TextAnimator_TMP.TryGetNextCharacter(ByRef TMP_CharacterInfo)
      qualifiedName:
        CSharp: Febucci.UI.TextAnimator_TMP.TryGetNextCharacter(out TMP_CharacterInfo)
        VB: Febucci.UI.TextAnimator_TMP.TryGetNextCharacter(ByRef TMP_CharacterInfo)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: TryGetNextCharacter
        path: ''
        startLine: 3274
      syntax:
        content:
          CSharp: >-
            [Obsolete("This method is Obsolete. Please check through the 'Characters' array instead.")]

            public bool TryGetNextCharacter(out TMP_CharacterInfo result)
          VB: >-
            <Obsolete("This method is Obsolete. Please check through the 'Characters' array instead.")>

            Public Function TryGetNextCharacter(ByRef result As TMP_CharacterInfo) As Boolean
        parameters:
        - id: result
          type: TMP_CharacterInfo
        return:
          type: System.Boolean
      overload: Febucci.UI.TextAnimator_TMP.TryGetNextCharacter*
      attributes:
      - type: System.ObsoleteAttribute
        ctor: System.ObsoleteAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: This method is Obsolete. Please check through the 'Characters' array instead.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.TextAnimator_TMP.tmproText
      commentId: P:Febucci.UI.TextAnimator_TMP.tmproText
      language: CSharp
      name:
        CSharp: tmproText
        VB: tmproText
      nameWithType:
        CSharp: TextAnimator_TMP.tmproText
        VB: TextAnimator_TMP.tmproText
      qualifiedName:
        CSharp: Febucci.UI.TextAnimator_TMP.tmproText
        VB: Febucci.UI.TextAnimator_TMP.tmproText
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: tmproText
        path: ''
        startLine: 3287
      syntax:
        content:
          CSharp: >-
            [Obsolete("Please use TMProComponent instead.")]

            public TMP_Text tmproText { get; }
          VB: >-
            <Obsolete("Please use TMProComponent instead.")>

            Public ReadOnly Property tmproText As TMP_Text
        parameters: []
        return:
          type: TMP_Text
      overload: Febucci.UI.TextAnimator_TMP.tmproText*
      attributes:
      - type: System.ObsoleteAttribute
        ctor: System.ObsoleteAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Please use TMProComponent instead.
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
  - id: Febucci.UI.AnimationLoop
    commentId: T:Febucci.UI.AnimationLoop
    language: CSharp
    name:
      CSharp: AnimationLoop
      VB: AnimationLoop
    nameWithType:
      CSharp: AnimationLoop
      VB: AnimationLoop
    qualifiedName:
      CSharp: Febucci.UI.AnimationLoop
      VB: Febucci.UI.AnimationLoop
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI
    source:
      id: AnimationLoop
      path: ''
      startLine: 3382
    syntax:
      content:
        CSharp: public enum AnimationLoop
        VB: Public Enum AnimationLoop
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Febucci.UI.AnimationLoop.Update
      commentId: F:Febucci.UI.AnimationLoop.Update
      language: CSharp
      name:
        CSharp: Update
        VB: Update
      nameWithType:
        CSharp: AnimationLoop.Update
        VB: AnimationLoop.Update
      qualifiedName:
        CSharp: Febucci.UI.AnimationLoop.Update
        VB: Febucci.UI.AnimationLoop.Update
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: Update
        path: ''
        startLine: 3384
      syntax:
        content:
          CSharp: Update = 0
          VB: Update = 0
        return:
          type: Febucci.UI.AnimationLoop
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Febucci.UI.AnimationLoop.LateUpdate
      commentId: F:Febucci.UI.AnimationLoop.LateUpdate
      language: CSharp
      name:
        CSharp: LateUpdate
        VB: LateUpdate
      nameWithType:
        CSharp: AnimationLoop.LateUpdate
        VB: AnimationLoop.LateUpdate
      qualifiedName:
        CSharp: Febucci.UI.AnimationLoop.LateUpdate
        VB: Febucci.UI.AnimationLoop.LateUpdate
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: LateUpdate
        path: ''
        startLine: 3386
      syntax:
        content:
          CSharp: LateUpdate = 1
          VB: LateUpdate = 1
        return:
          type: Febucci.UI.AnimationLoop
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Febucci.UI.AnimationLoop.Script
      commentId: F:Febucci.UI.AnimationLoop.Script
      language: CSharp
      name:
        CSharp: Script
        VB: Script
      nameWithType:
        CSharp: AnimationLoop.Script
        VB: AnimationLoop.Script
      qualifiedName:
        CSharp: Febucci.UI.AnimationLoop.Script
        VB: Febucci.UI.AnimationLoop.Script
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: Script
        path: ''
        startLine: 3391
      summary: "\nVia Script\n"
      example: []
      syntax:
        content:
          CSharp: Script = 2
          VB: Script = 2
        return:
          type: Febucci.UI.AnimationLoop
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Febucci.UI.TimeData
    commentId: T:Febucci.UI.TimeData
    language: CSharp
    name:
      CSharp: TimeData
      VB: TimeData
    nameWithType:
      CSharp: TimeData
      VB: TimeData
    qualifiedName:
      CSharp: Febucci.UI.TimeData
      VB: Febucci.UI.TimeData
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI
    source:
      id: TimeData
      path: ''
      startLine: 4839
    summary: "\nContains TextAnimator&apos;s current time values.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public struct TimeData
        VB: >-
          <Serializable>

          Public Structure TimeData
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Febucci.UI.TimeData.timeSinceStart
      commentId: P:Febucci.UI.TimeData.timeSinceStart
      language: CSharp
      name:
        CSharp: timeSinceStart
        VB: timeSinceStart
      nameWithType:
        CSharp: TimeData.timeSinceStart
        VB: TimeData.timeSinceStart
      qualifiedName:
        CSharp: Febucci.UI.TimeData.timeSinceStart
        VB: Febucci.UI.TimeData.timeSinceStart
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: timeSinceStart
        path: ''
        startLine: 4845
      summary: "\nTime passed since the textAnimator started showing the very first letter\n"
      example: []
      syntax:
        content:
          CSharp: public float timeSinceStart { readonly get; }
          VB: Public ReadOnly Property timeSinceStart As Single
        parameters: []
        return:
          type: System.Single
      overload: Febucci.UI.TimeData.timeSinceStart*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: Febucci.UI.TimeData.deltaTime
      commentId: P:Febucci.UI.TimeData.deltaTime
      language: CSharp
      name:
        CSharp: deltaTime
        VB: deltaTime
      nameWithType:
        CSharp: TimeData.deltaTime
        VB: TimeData.deltaTime
      qualifiedName:
        CSharp: Febucci.UI.TimeData.deltaTime
        VB: Febucci.UI.TimeData.deltaTime
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: deltaTime
        path: ''
        startLine: 4850
      summary: "\nTextAnimator&apos;s Component delta time, could be Scaled or Unscaled\n"
      example: []
      syntax:
        content:
          CSharp: public float deltaTime { readonly get; }
          VB: Public ReadOnly Property deltaTime As Single
        parameters: []
        return:
          type: System.Single
      overload: Febucci.UI.TimeData.deltaTime*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: Febucci.UI.TimeData.RestartTime
      commentId: M:Febucci.UI.TimeData.RestartTime
      language: CSharp
      name:
        CSharp: RestartTime()
        VB: RestartTime()
      nameWithType:
        CSharp: TimeData.RestartTime()
        VB: TimeData.RestartTime()
      qualifiedName:
        CSharp: Febucci.UI.TimeData.RestartTime()
        VB: Febucci.UI.TimeData.RestartTime()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: RestartTime
        path: ''
        startLine: 4852
      syntax:
        content:
          CSharp: public void RestartTime()
          VB: Public Sub RestartTime
      overload: Febucci.UI.TimeData.RestartTime*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Febucci.UI.TimeScale
    commentId: T:Febucci.UI.TimeScale
    language: CSharp
    name:
      CSharp: TimeScale
      VB: TimeScale
    nameWithType:
      CSharp: TimeScale
      VB: TimeScale
    qualifiedName:
      CSharp: Febucci.UI.TimeScale
      VB: Febucci.UI.TimeScale
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI
    source:
      id: TimeScale
      path: ''
      startLine: 4874
    summary: "\nTextAnimator&apos;s effects time scale, which could match unity&apos;s Time.deltaTime or Time.unscaledDeltaTime\n"
    example: []
    syntax:
      content:
        CSharp: public enum TimeScale
        VB: Public Enum TimeScale
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Febucci.UI.TimeScale.Scaled
      commentId: F:Febucci.UI.TimeScale.Scaled
      language: CSharp
      name:
        CSharp: Scaled
        VB: Scaled
      nameWithType:
        CSharp: TimeScale.Scaled
        VB: TimeScale.Scaled
      qualifiedName:
        CSharp: Febucci.UI.TimeScale.Scaled
        VB: Febucci.UI.TimeScale.Scaled
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: Scaled
        path: ''
        startLine: 4876
      syntax:
        content:
          CSharp: Scaled = 0
          VB: Scaled = 0
        return:
          type: Febucci.UI.TimeScale
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Febucci.UI.TimeScale.Unscaled
      commentId: F:Febucci.UI.TimeScale.Unscaled
      language: CSharp
      name:
        CSharp: Unscaled
        VB: Unscaled
      nameWithType:
        CSharp: TimeScale.Unscaled
        VB: TimeScale.Unscaled
      qualifiedName:
        CSharp: Febucci.UI.TimeScale.Unscaled
        VB: Febucci.UI.TimeScale.Unscaled
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: Unscaled
        path: ''
        startLine: 4877
      syntax:
        content:
          CSharp: Unscaled = 1
          VB: Unscaled = 1
        return:
          type: Febucci.UI.TimeScale
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Febucci.UI.TypewriterByCharacter
    commentId: T:Febucci.UI.TypewriterByCharacter
    language: CSharp
    name:
      CSharp: TypewriterByCharacter
      VB: TypewriterByCharacter
    nameWithType:
      CSharp: TypewriterByCharacter
      VB: TypewriterByCharacter
    qualifiedName:
      CSharp: Febucci.UI.TypewriterByCharacter
      VB: Febucci.UI.TypewriterByCharacter
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI
    source:
      id: TypewriterByCharacter
      path: ''
      startLine: 4892
    summary: "\nBuilt-in typewriter, which shows letters dynamically character after character.<br />\nTo enable it, add this component near a <see cref=\"!:TAnimCore\"></see> one<br />\n- Base class: <see cref=\"!:TypewriterCore\"></see><br />\n- Manual: <a href=\"https://www.febucci.com/text-animator-unity/docs/typewriters/\">TextAnimatorPlayers</a>\n"
    example: []
    syntax:
      content:
        CSharp: 'public class TypewriterByCharacter : TypewriterCore'
        VB: >-
          Public Class TypewriterByCharacter

              Inherits TypewriterCore
    inheritance:
    - System.Object
    - Febucci.UI.Core.TypewriterCore
    inheritedMembers:
    - Febucci.UI.Core.TypewriterCore.TextAnimator
    - Febucci.UI.Core.TypewriterCore.useTypeWriter
    - Febucci.UI.Core.TypewriterCore.startTypewriterMode
    - Febucci.UI.Core.TypewriterCore.hideAppearancesOnSkip
    - Febucci.UI.Core.TypewriterCore.hideDisappearancesOnSkip
    - Febucci.UI.Core.TypewriterCore.resetTypingSpeedAtStartup
    - Febucci.UI.Core.TypewriterCore.disappearanceOrientation
    - Febucci.UI.Core.TypewriterCore.triggerShowedAfterEffectsEnd
    - Febucci.UI.Core.TypewriterCore.triggerDisappearedAfterEffectsEnd
    - Febucci.UI.Core.TypewriterCore.onTextShowed
    - Febucci.UI.Core.TypewriterCore.onTypewriterStart
    - Febucci.UI.Core.TypewriterCore.onTextDisappeared
    - Febucci.UI.Core.TypewriterCore.onCharacterVisible
    - Febucci.UI.Core.TypewriterCore.onMessage
    - Febucci.UI.Core.TypewriterCore.ShowText(System.String)
    - Febucci.UI.Core.TypewriterCore.SkipTypewriter
    - Febucci.UI.Core.TypewriterCore.isShowingText
    - Febucci.UI.Core.TypewriterCore.StartShowingText(System.Boolean)
    - Febucci.UI.Core.TypewriterCore.StopShowingText
    - Febucci.UI.Core.TypewriterCore.isHidingText
    - Febucci.UI.Core.TypewriterCore.StartDisappearingText
    - Febucci.UI.Core.TypewriterCore.StopDisappearingText
    - Febucci.UI.Core.TypewriterCore.SetTypewriterSpeed(System.Single)
    - Febucci.UI.Core.TypewriterCore.TriggerRemainingEvents
    - Febucci.UI.Core.TypewriterCore.TriggerVisibleEvents
    - Febucci.UI.Core.TypewriterCore.OnEnable
    - Febucci.UI.Core.TypewriterCore.OnDisable
    - Febucci.UI.Core.TypewriterCore.typewriterPlayerSpeed
    - Febucci.UI.Core.TypewriterCore.wantsToSkip
    - Febucci.UI.Core.TypewriterCore.isBaseInsideRoutine
    - Febucci.UI.Core.TypewriterCore.textAnimator
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Febucci.UI.TypewriterByCharacter.waitForNormalChars
      commentId: F:Febucci.UI.TypewriterByCharacter.waitForNormalChars
      language: CSharp
      name:
        CSharp: waitForNormalChars
        VB: waitForNormalChars
      nameWithType:
        CSharp: TypewriterByCharacter.waitForNormalChars
        VB: TypewriterByCharacter.waitForNormalChars
      qualifiedName:
        CSharp: Febucci.UI.TypewriterByCharacter.waitForNormalChars
        VB: Febucci.UI.TypewriterByCharacter.waitForNormalChars
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: waitForNormalChars
        path: ''
        startLine: 4896
      syntax:
        content:
          CSharp: public float waitForNormalChars
          VB: Public waitForNormalChars As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.TypewriterByCharacter.waitLong
      commentId: F:Febucci.UI.TypewriterByCharacter.waitLong
      language: CSharp
      name:
        CSharp: waitLong
        VB: waitLong
      nameWithType:
        CSharp: TypewriterByCharacter.waitLong
        VB: TypewriterByCharacter.waitLong
      qualifiedName:
        CSharp: Febucci.UI.TypewriterByCharacter.waitLong
        VB: Febucci.UI.TypewriterByCharacter.waitLong
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: waitLong
        path: ''
        startLine: 4897
      syntax:
        content:
          CSharp: public float waitLong
          VB: Public waitLong As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.TypewriterByCharacter.waitMiddle
      commentId: F:Febucci.UI.TypewriterByCharacter.waitMiddle
      language: CSharp
      name:
        CSharp: waitMiddle
        VB: waitMiddle
      nameWithType:
        CSharp: TypewriterByCharacter.waitMiddle
        VB: TypewriterByCharacter.waitMiddle
      qualifiedName:
        CSharp: Febucci.UI.TypewriterByCharacter.waitMiddle
        VB: Febucci.UI.TypewriterByCharacter.waitMiddle
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: waitMiddle
        path: ''
        startLine: 4898
      syntax:
        content:
          CSharp: public float waitMiddle
          VB: Public waitMiddle As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.TypewriterByCharacter.avoidMultiplePunctuactionWait
      commentId: P:Febucci.UI.TypewriterByCharacter.avoidMultiplePunctuactionWait
      language: CSharp
      name:
        CSharp: avoidMultiplePunctuactionWait
        VB: avoidMultiplePunctuactionWait
      nameWithType:
        CSharp: TypewriterByCharacter.avoidMultiplePunctuactionWait
        VB: TypewriterByCharacter.avoidMultiplePunctuactionWait
      qualifiedName:
        CSharp: Febucci.UI.TypewriterByCharacter.avoidMultiplePunctuactionWait
        VB: Febucci.UI.TypewriterByCharacter.avoidMultiplePunctuactionWait
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: avoidMultiplePunctuactionWait
        path: ''
        startLine: 4900
      syntax:
        content:
          CSharp: >-
            [Obsolete("Typo, please use 'avoidMultiplePunctuationWait' instead.")]

            public bool avoidMultiplePunctuactionWait { get; }
          VB: >-
            <Obsolete("Typo, please use 'avoidMultiplePunctuationWait' instead.")>

            Public ReadOnly Property avoidMultiplePunctuactionWait As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Febucci.UI.TypewriterByCharacter.avoidMultiplePunctuactionWait*
      attributes:
      - type: System.ObsoleteAttribute
        ctor: System.ObsoleteAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Typo, please use 'avoidMultiplePunctuationWait' instead.
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Febucci.UI.TypewriterByCharacter.avoidMultiplePunctuationWait
      commentId: F:Febucci.UI.TypewriterByCharacter.avoidMultiplePunctuationWait
      language: CSharp
      name:
        CSharp: avoidMultiplePunctuationWait
        VB: avoidMultiplePunctuationWait
      nameWithType:
        CSharp: TypewriterByCharacter.avoidMultiplePunctuationWait
        VB: TypewriterByCharacter.avoidMultiplePunctuationWait
      qualifiedName:
        CSharp: Febucci.UI.TypewriterByCharacter.avoidMultiplePunctuationWait
        VB: Febucci.UI.TypewriterByCharacter.avoidMultiplePunctuationWait
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: avoidMultiplePunctuationWait
        path: ''
        startLine: 4904
      syntax:
        content:
          CSharp: public bool avoidMultiplePunctuationWait
          VB: Public avoidMultiplePunctuationWait As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.TypewriterByCharacter.waitForNewLines
      commentId: F:Febucci.UI.TypewriterByCharacter.waitForNewLines
      language: CSharp
      name:
        CSharp: waitForNewLines
        VB: waitForNewLines
      nameWithType:
        CSharp: TypewriterByCharacter.waitForNewLines
        VB: TypewriterByCharacter.waitForNewLines
      qualifiedName:
        CSharp: Febucci.UI.TypewriterByCharacter.waitForNewLines
        VB: Febucci.UI.TypewriterByCharacter.waitForNewLines
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: waitForNewLines
        path: ''
        startLine: 4906
      syntax:
        content:
          CSharp: public bool waitForNewLines
          VB: Public waitForNewLines As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.TypewriterByCharacter.waitForLastCharacter
      commentId: F:Febucci.UI.TypewriterByCharacter.waitForLastCharacter
      language: CSharp
      name:
        CSharp: waitForLastCharacter
        VB: waitForLastCharacter
      nameWithType:
        CSharp: TypewriterByCharacter.waitForLastCharacter
        VB: TypewriterByCharacter.waitForLastCharacter
      qualifiedName:
        CSharp: Febucci.UI.TypewriterByCharacter.waitForLastCharacter
        VB: Febucci.UI.TypewriterByCharacter.waitForLastCharacter
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: waitForLastCharacter
        path: ''
        startLine: 4908
      syntax:
        content:
          CSharp: public bool waitForLastCharacter
          VB: Public waitForLastCharacter As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.TypewriterByCharacter.useTypewriterWaitForDisappearances
      commentId: F:Febucci.UI.TypewriterByCharacter.useTypewriterWaitForDisappearances
      language: CSharp
      name:
        CSharp: useTypewriterWaitForDisappearances
        VB: useTypewriterWaitForDisappearances
      nameWithType:
        CSharp: TypewriterByCharacter.useTypewriterWaitForDisappearances
        VB: TypewriterByCharacter.useTypewriterWaitForDisappearances
      qualifiedName:
        CSharp: Febucci.UI.TypewriterByCharacter.useTypewriterWaitForDisappearances
        VB: Febucci.UI.TypewriterByCharacter.useTypewriterWaitForDisappearances
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: useTypewriterWaitForDisappearances
        path: ''
        startLine: 4910
      syntax:
        content:
          CSharp: public bool useTypewriterWaitForDisappearances
          VB: Public useTypewriterWaitForDisappearances As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.TypewriterByCharacter.disappearanceSpeedMultiplier
      commentId: F:Febucci.UI.TypewriterByCharacter.disappearanceSpeedMultiplier
      language: CSharp
      name:
        CSharp: disappearanceSpeedMultiplier
        VB: disappearanceSpeedMultiplier
      nameWithType:
        CSharp: TypewriterByCharacter.disappearanceSpeedMultiplier
        VB: TypewriterByCharacter.disappearanceSpeedMultiplier
      qualifiedName:
        CSharp: Febucci.UI.TypewriterByCharacter.disappearanceSpeedMultiplier
        VB: Febucci.UI.TypewriterByCharacter.disappearanceSpeedMultiplier
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: disappearanceSpeedMultiplier
        path: ''
        startLine: 4912
      syntax:
        content:
          CSharp: public float disappearanceSpeedMultiplier
          VB: Public disappearanceSpeedMultiplier As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.TypewriterByCharacter.GetWaitAppearanceTimeOf(System.Int32)
      commentId: M:Febucci.UI.TypewriterByCharacter.GetWaitAppearanceTimeOf(System.Int32)
      language: CSharp
      name:
        CSharp: GetWaitAppearanceTimeOf(Int32)
        VB: GetWaitAppearanceTimeOf(Int32)
      nameWithType:
        CSharp: TypewriterByCharacter.GetWaitAppearanceTimeOf(Int32)
        VB: TypewriterByCharacter.GetWaitAppearanceTimeOf(Int32)
      qualifiedName:
        CSharp: Febucci.UI.TypewriterByCharacter.GetWaitAppearanceTimeOf(System.Int32)
        VB: Febucci.UI.TypewriterByCharacter.GetWaitAppearanceTimeOf(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: GetWaitAppearanceTimeOf
        path: ''
        startLine: 4914
      syntax:
        content:
          CSharp: protected override float GetWaitAppearanceTimeOf(int charIndex)
          VB: Protected Overrides Function GetWaitAppearanceTimeOf(charIndex As Integer) As Single
        parameters:
        - id: charIndex
          type: System.Int32
        return:
          type: System.Single
      overload: Febucci.UI.TypewriterByCharacter.GetWaitAppearanceTimeOf*
      overridden: Febucci.UI.Core.TypewriterCore.GetWaitAppearanceTimeOf(System.Int32)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: Febucci.UI.TypewriterByCharacter.GetWaitDisappearanceTimeOf(System.Int32)
      commentId: M:Febucci.UI.TypewriterByCharacter.GetWaitDisappearanceTimeOf(System.Int32)
      language: CSharp
      name:
        CSharp: GetWaitDisappearanceTimeOf(Int32)
        VB: GetWaitDisappearanceTimeOf(Int32)
      nameWithType:
        CSharp: TypewriterByCharacter.GetWaitDisappearanceTimeOf(Int32)
        VB: TypewriterByCharacter.GetWaitDisappearanceTimeOf(Int32)
      qualifiedName:
        CSharp: Febucci.UI.TypewriterByCharacter.GetWaitDisappearanceTimeOf(System.Int32)
        VB: Febucci.UI.TypewriterByCharacter.GetWaitDisappearanceTimeOf(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: GetWaitDisappearanceTimeOf
        path: ''
        startLine: 4966
      syntax:
        content:
          CSharp: protected override float GetWaitDisappearanceTimeOf(int charIndex)
          VB: Protected Overrides Function GetWaitDisappearanceTimeOf(charIndex As Integer) As Single
        parameters:
        - id: charIndex
          type: System.Int32
        return:
          type: System.Single
      overload: Febucci.UI.TypewriterByCharacter.GetWaitDisappearanceTimeOf*
      overridden: Febucci.UI.Core.TypewriterCore.GetWaitDisappearanceTimeOf(System.Int32)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: Febucci.UI.TypewriterByWord
    commentId: T:Febucci.UI.TypewriterByWord
    language: CSharp
    name:
      CSharp: TypewriterByWord
      VB: TypewriterByWord
    nameWithType:
      CSharp: TypewriterByWord
      VB: TypewriterByWord
    qualifiedName:
      CSharp: Febucci.UI.TypewriterByWord
      VB: Febucci.UI.TypewriterByWord
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI
    source:
      id: TypewriterByWord
      path: ''
      startLine: 4983
    summary: "\nBuilt-in typewriter, which shows letters dynamically word after word.<br />\nTo enable it, add this component near a <xref href=\"Febucci.UI.Core.TAnimCore\" data-throw-if-not-resolved=\"false\"></xref> one<br />\n- Base class: <xref href=\"Febucci.UI.Core.TypewriterCore\" data-throw-if-not-resolved=\"false\"></xref><br />\n- Manual: <a href=\"https://www.febucci.com/text-animator-unity/docs/typewriters/\">TextAnimatorPlayers</a>\n"
    example: []
    syntax:
      content:
        CSharp: 'public class TypewriterByWord : TypewriterCore'
        VB: >-
          Public Class TypewriterByWord

              Inherits TypewriterCore
    inheritance:
    - System.Object
    - Febucci.UI.Core.TypewriterCore
    inheritedMembers:
    - Febucci.UI.Core.TypewriterCore.TextAnimator
    - Febucci.UI.Core.TypewriterCore.useTypeWriter
    - Febucci.UI.Core.TypewriterCore.startTypewriterMode
    - Febucci.UI.Core.TypewriterCore.hideAppearancesOnSkip
    - Febucci.UI.Core.TypewriterCore.hideDisappearancesOnSkip
    - Febucci.UI.Core.TypewriterCore.resetTypingSpeedAtStartup
    - Febucci.UI.Core.TypewriterCore.disappearanceOrientation
    - Febucci.UI.Core.TypewriterCore.triggerShowedAfterEffectsEnd
    - Febucci.UI.Core.TypewriterCore.triggerDisappearedAfterEffectsEnd
    - Febucci.UI.Core.TypewriterCore.onTextShowed
    - Febucci.UI.Core.TypewriterCore.onTypewriterStart
    - Febucci.UI.Core.TypewriterCore.onTextDisappeared
    - Febucci.UI.Core.TypewriterCore.onCharacterVisible
    - Febucci.UI.Core.TypewriterCore.onMessage
    - Febucci.UI.Core.TypewriterCore.ShowText(System.String)
    - Febucci.UI.Core.TypewriterCore.SkipTypewriter
    - Febucci.UI.Core.TypewriterCore.isShowingText
    - Febucci.UI.Core.TypewriterCore.StartShowingText(System.Boolean)
    - Febucci.UI.Core.TypewriterCore.StopShowingText
    - Febucci.UI.Core.TypewriterCore.isHidingText
    - Febucci.UI.Core.TypewriterCore.StartDisappearingText
    - Febucci.UI.Core.TypewriterCore.StopDisappearingText
    - Febucci.UI.Core.TypewriterCore.SetTypewriterSpeed(System.Single)
    - Febucci.UI.Core.TypewriterCore.TriggerRemainingEvents
    - Febucci.UI.Core.TypewriterCore.TriggerVisibleEvents
    - Febucci.UI.Core.TypewriterCore.OnEnable
    - Febucci.UI.Core.TypewriterCore.OnDisable
    - Febucci.UI.Core.TypewriterCore.typewriterPlayerSpeed
    - Febucci.UI.Core.TypewriterCore.wantsToSkip
    - Febucci.UI.Core.TypewriterCore.isBaseInsideRoutine
    - Febucci.UI.Core.TypewriterCore.textAnimator
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Febucci.UI.TypewriterByWord.waitForNormalWord
      commentId: F:Febucci.UI.TypewriterByWord.waitForNormalWord
      language: CSharp
      name:
        CSharp: waitForNormalWord
        VB: waitForNormalWord
      nameWithType:
        CSharp: TypewriterByWord.waitForNormalWord
        VB: TypewriterByWord.waitForNormalWord
      qualifiedName:
        CSharp: Febucci.UI.TypewriterByWord.waitForNormalWord
        VB: Febucci.UI.TypewriterByWord.waitForNormalWord
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: waitForNormalWord
        path: ''
        startLine: 4987
      syntax:
        content:
          CSharp: public float waitForNormalWord
          VB: Public waitForNormalWord As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.TypewriterByWord.waitForWordWithPunctuation
      commentId: F:Febucci.UI.TypewriterByWord.waitForWordWithPunctuation
      language: CSharp
      name:
        CSharp: waitForWordWithPunctuation
        VB: waitForWordWithPunctuation
      nameWithType:
        CSharp: TypewriterByWord.waitForWordWithPunctuation
        VB: TypewriterByWord.waitForWordWithPunctuation
      qualifiedName:
        CSharp: Febucci.UI.TypewriterByWord.waitForWordWithPunctuation
        VB: Febucci.UI.TypewriterByWord.waitForWordWithPunctuation
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: waitForWordWithPunctuation
        path: ''
        startLine: 4988
      syntax:
        content:
          CSharp: public float waitForWordWithPunctuation
          VB: Public waitForWordWithPunctuation As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.TypewriterByWord.disappearanceDelay
      commentId: F:Febucci.UI.TypewriterByWord.disappearanceDelay
      language: CSharp
      name:
        CSharp: disappearanceDelay
        VB: disappearanceDelay
      nameWithType:
        CSharp: TypewriterByWord.disappearanceDelay
        VB: TypewriterByWord.disappearanceDelay
      qualifiedName:
        CSharp: Febucci.UI.TypewriterByWord.disappearanceDelay
        VB: Febucci.UI.TypewriterByWord.disappearanceDelay
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: disappearanceDelay
        path: ''
        startLine: 4989
      syntax:
        content:
          CSharp: public float disappearanceDelay
          VB: Public disappearanceDelay As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.TypewriterByWord.GetWaitAppearanceTimeOf(System.Int32)
      commentId: M:Febucci.UI.TypewriterByWord.GetWaitAppearanceTimeOf(System.Int32)
      language: CSharp
      name:
        CSharp: GetWaitAppearanceTimeOf(Int32)
        VB: GetWaitAppearanceTimeOf(Int32)
      nameWithType:
        CSharp: TypewriterByWord.GetWaitAppearanceTimeOf(Int32)
        VB: TypewriterByWord.GetWaitAppearanceTimeOf(Int32)
      qualifiedName:
        CSharp: Febucci.UI.TypewriterByWord.GetWaitAppearanceTimeOf(System.Int32)
        VB: Febucci.UI.TypewriterByWord.GetWaitAppearanceTimeOf(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: GetWaitAppearanceTimeOf
        path: ''
        startLine: 4996
      syntax:
        content:
          CSharp: protected override float GetWaitAppearanceTimeOf(int charIndex)
          VB: Protected Overrides Function GetWaitAppearanceTimeOf(charIndex As Integer) As Single
        parameters:
        - id: charIndex
          type: System.Int32
        return:
          type: System.Single
      overload: Febucci.UI.TypewriterByWord.GetWaitAppearanceTimeOf*
      overridden: Febucci.UI.Core.TypewriterCore.GetWaitAppearanceTimeOf(System.Int32)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: Febucci.UI.TypewriterByWord.GetWaitDisappearanceTimeOf(System.Int32)
      commentId: M:Febucci.UI.TypewriterByWord.GetWaitDisappearanceTimeOf(System.Int32)
      language: CSharp
      name:
        CSharp: GetWaitDisappearanceTimeOf(Int32)
        VB: GetWaitDisappearanceTimeOf(Int32)
      nameWithType:
        CSharp: TypewriterByWord.GetWaitDisappearanceTimeOf(Int32)
        VB: TypewriterByWord.GetWaitDisappearanceTimeOf(Int32)
      qualifiedName:
        CSharp: Febucci.UI.TypewriterByWord.GetWaitDisappearanceTimeOf(System.Int32)
        VB: Febucci.UI.TypewriterByWord.GetWaitDisappearanceTimeOf(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: GetWaitDisappearanceTimeOf
        path: ''
        startLine: 5015
      syntax:
        content:
          CSharp: protected override float GetWaitDisappearanceTimeOf(int charIndex)
          VB: Protected Overrides Function GetWaitDisappearanceTimeOf(charIndex As Integer) As Single
        parameters:
        - id: charIndex
          type: System.Int32
        return:
          type: System.Single
      overload: Febucci.UI.TypewriterByWord.GetWaitDisappearanceTimeOf*
      overridden: Febucci.UI.Core.TypewriterCore.GetWaitDisappearanceTimeOf(System.Int32)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    references:
      Febucci.UI.Core.TAnimCore: 
      Febucci.UI.Core.TypewriterCore: 
  - id: Febucci.UI.ModifierInfo
    commentId: T:Febucci.UI.ModifierInfo
    language: CSharp
    name:
      CSharp: ModifierInfo
      VB: ModifierInfo
    nameWithType:
      CSharp: ModifierInfo
      VB: ModifierInfo
    qualifiedName:
      CSharp: Febucci.UI.ModifierInfo
      VB: Febucci.UI.ModifierInfo
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI
    source:
      id: ModifierInfo
      path: ''
      startLine: 6384
    syntax:
      content:
        CSharp: public struct ModifierInfo
        VB: Public Structure ModifierInfo
    implements:
    - IEquatable{Febucci.UI.ModifierInfo}
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Febucci.UI.ModifierInfo.name
      commentId: F:Febucci.UI.ModifierInfo.name
      language: CSharp
      name:
        CSharp: name
        VB: name
      nameWithType:
        CSharp: ModifierInfo.name
        VB: ModifierInfo.name
      qualifiedName:
        CSharp: Febucci.UI.ModifierInfo.name
        VB: Febucci.UI.ModifierInfo.name
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: name
        path: ''
        startLine: 6386
      syntax:
        content:
          CSharp: public string name
          VB: Public name As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.ModifierInfo.value
      commentId: F:Febucci.UI.ModifierInfo.value
      language: CSharp
      name:
        CSharp: value
        VB: value
      nameWithType:
        CSharp: ModifierInfo.value
        VB: ModifierInfo.value
      qualifiedName:
        CSharp: Febucci.UI.ModifierInfo.value
        VB: Febucci.UI.ModifierInfo.value
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: value
        path: ''
        startLine: 6387
      syntax:
        content:
          CSharp: public float value
          VB: Public value As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.ModifierInfo.#ctor(System.String,System.Single)
      commentId: M:Febucci.UI.ModifierInfo.#ctor(System.String,System.Single)
      language: CSharp
      name:
        CSharp: ModifierInfo(String, Single)
        VB: ModifierInfo(String, Single)
      nameWithType:
        CSharp: ModifierInfo.ModifierInfo(String, Single)
        VB: ModifierInfo.ModifierInfo(String, Single)
      qualifiedName:
        CSharp: Febucci.UI.ModifierInfo.ModifierInfo(System.String, System.Single)
        VB: Febucci.UI.ModifierInfo.ModifierInfo(System.String, System.Single)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: .ctor
        path: ''
        startLine: 6389
      syntax:
        content:
          CSharp: public ModifierInfo(string name, float value)
          VB: Public Sub New(name As String, value As Single)
        parameters:
        - id: name
          type: System.String
        - id: value
          type: System.Single
      overload: Febucci.UI.ModifierInfo.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.ModifierInfo.Equals(Febucci.UI.ModifierInfo)
      commentId: M:Febucci.UI.ModifierInfo.Equals(Febucci.UI.ModifierInfo)
      language: CSharp
      name:
        CSharp: Equals(ModifierInfo)
        VB: Equals(ModifierInfo)
      nameWithType:
        CSharp: ModifierInfo.Equals(ModifierInfo)
        VB: ModifierInfo.Equals(ModifierInfo)
      qualifiedName:
        CSharp: Febucci.UI.ModifierInfo.Equals(Febucci.UI.ModifierInfo)
        VB: Febucci.UI.ModifierInfo.Equals(Febucci.UI.ModifierInfo)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: Equals
        path: ''
        startLine: 6395
      syntax:
        content:
          CSharp: public bool Equals(ModifierInfo other)
          VB: Public Function Equals(other As ModifierInfo) As Boolean
        parameters:
        - id: other
          type: Febucci.UI.ModifierInfo
        return:
          type: System.Boolean
      overload: Febucci.UI.ModifierInfo.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.ModifierInfo.ToString
      commentId: M:Febucci.UI.ModifierInfo.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: ModifierInfo.ToString()
        VB: ModifierInfo.ToString()
      qualifiedName:
        CSharp: Febucci.UI.ModifierInfo.ToString()
        VB: Febucci.UI.ModifierInfo.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: ToString
        path: ''
        startLine: 6397
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: Febucci.UI.ModifierInfo.ToString*
      overridden: System.ValueType.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.TextAnimatorSettings
    commentId: T:Febucci.UI.TextAnimatorSettings
    language: CSharp
    name:
      CSharp: TextAnimatorSettings
      VB: TextAnimatorSettings
    nameWithType:
      CSharp: TextAnimatorSettings
      VB: TextAnimatorSettings
    qualifiedName:
      CSharp: Febucci.UI.TextAnimatorSettings
      VB: Febucci.UI.TextAnimatorSettings
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI
    source:
      id: TextAnimatorSettings
      path: ''
      startLine: 8701
    summary: "\nContains global settings for Text Animator, like effects enabled status and default databases. \n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public sealed class TextAnimatorSettings : ScriptableObject
        VB: >-
          <Serializable>

          Public NotInheritable Class TextAnimatorSettings

              Inherits ScriptableObject
    inheritance:
    - System.Object
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Febucci.UI.TextAnimatorSettings.expectedName
      commentId: F:Febucci.UI.TextAnimatorSettings.expectedName
      language: CSharp
      name:
        CSharp: expectedName
        VB: expectedName
      nameWithType:
        CSharp: TextAnimatorSettings.expectedName
        VB: TextAnimatorSettings.expectedName
      qualifiedName:
        CSharp: Febucci.UI.TextAnimatorSettings.expectedName
        VB: Febucci.UI.TextAnimatorSettings.expectedName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: expectedName
        path: ''
        startLine: 8705
      syntax:
        content:
          CSharp: public const string expectedName = "TextAnimatorSettings"
          VB: Public Const expectedName As String = "TextAnimatorSettings"
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Febucci.UI.TextAnimatorSettings.Instance
      commentId: P:Febucci.UI.TextAnimatorSettings.Instance
      language: CSharp
      name:
        CSharp: Instance
        VB: Instance
      nameWithType:
        CSharp: TextAnimatorSettings.Instance
        VB: TextAnimatorSettings.Instance
      qualifiedName:
        CSharp: Febucci.UI.TextAnimatorSettings.Instance
        VB: Febucci.UI.TextAnimatorSettings.Instance
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: Instance
        path: ''
        startLine: 8712
      summary: "\nThe current instance of the settings. If it&apos;s null, it will be loaded from the resources.\n(Make sure to have one &quot;TextAnimatorSettings&quot; file in the Resources folder.)\n"
      example: []
      syntax:
        content:
          CSharp: public static TextAnimatorSettings Instance { get; }
          VB: Public Shared ReadOnly Property Instance As TextAnimatorSettings
        parameters: []
        return:
          type: Febucci.UI.TextAnimatorSettings
      overload: Febucci.UI.TextAnimatorSettings.Instance*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Febucci.UI.TextAnimatorSettings.LoadSettings
      commentId: M:Febucci.UI.TextAnimatorSettings.LoadSettings
      language: CSharp
      name:
        CSharp: LoadSettings()
        VB: LoadSettings()
      nameWithType:
        CSharp: TextAnimatorSettings.LoadSettings()
        VB: TextAnimatorSettings.LoadSettings()
      qualifiedName:
        CSharp: Febucci.UI.TextAnimatorSettings.LoadSettings()
        VB: Febucci.UI.TextAnimatorSettings.LoadSettings()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: LoadSettings
        path: ''
        startLine: 8726
      summary: "\nManually loads the settings ScriptableObject in case it wasn&apos;t loaded yet.\n"
      example: []
      syntax:
        content:
          CSharp: public static void LoadSettings()
          VB: Public Shared Sub LoadSettings
      overload: Febucci.UI.TextAnimatorSettings.LoadSettings*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Febucci.UI.TextAnimatorSettings.UnloadSettings
      commentId: M:Febucci.UI.TextAnimatorSettings.UnloadSettings
      language: CSharp
      name:
        CSharp: UnloadSettings()
        VB: UnloadSettings()
      nameWithType:
        CSharp: TextAnimatorSettings.UnloadSettings()
        VB: TextAnimatorSettings.UnloadSettings()
      qualifiedName:
        CSharp: Febucci.UI.TextAnimatorSettings.UnloadSettings()
        VB: Febucci.UI.TextAnimatorSettings.UnloadSettings()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: UnloadSettings
        path: ''
        startLine: 8735
      summary: "\nManually unloads the settings ScriptableObject instance.\n"
      example: []
      syntax:
        content:
          CSharp: public static void UnloadSettings()
          VB: Public Shared Sub UnloadSettings
      overload: Febucci.UI.TextAnimatorSettings.UnloadSettings*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Febucci.UI.TextAnimatorSettings.SetAllEffectsActive(System.Boolean)
      commentId: M:Febucci.UI.TextAnimatorSettings.SetAllEffectsActive(System.Boolean)
      language: CSharp
      name:
        CSharp: SetAllEffectsActive(Boolean)
        VB: SetAllEffectsActive(Boolean)
      nameWithType:
        CSharp: TextAnimatorSettings.SetAllEffectsActive(Boolean)
        VB: TextAnimatorSettings.SetAllEffectsActive(Boolean)
      qualifiedName:
        CSharp: Febucci.UI.TextAnimatorSettings.SetAllEffectsActive(System.Boolean)
        VB: Febucci.UI.TextAnimatorSettings.SetAllEffectsActive(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: SetAllEffectsActive
        path: ''
        startLine: 8747
      summary: "\nSets all the effects (both appearances/disappearances and behaviors) status.\n"
      example: []
      syntax:
        content:
          CSharp: public static void SetAllEffectsActive(bool enabled)
          VB: Public Shared Sub SetAllEffectsActive(enabled As Boolean)
        parameters:
        - id: enabled
          type: System.Boolean
          description: ''
      overload: Febucci.UI.TextAnimatorSettings.SetAllEffectsActive*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Febucci.UI.TextAnimatorSettings.SetAppearancesActive(System.Boolean)
      commentId: M:Febucci.UI.TextAnimatorSettings.SetAppearancesActive(System.Boolean)
      language: CSharp
      name:
        CSharp: SetAppearancesActive(Boolean)
        VB: SetAppearancesActive(Boolean)
      nameWithType:
        CSharp: TextAnimatorSettings.SetAppearancesActive(Boolean)
        VB: TextAnimatorSettings.SetAppearancesActive(Boolean)
      qualifiedName:
        CSharp: Febucci.UI.TextAnimatorSettings.SetAppearancesActive(System.Boolean)
        VB: Febucci.UI.TextAnimatorSettings.SetAppearancesActive(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: SetAppearancesActive
        path: ''
        startLine: 8757
      summary: "\nSets all appearances effects status.\n"
      example: []
      syntax:
        content:
          CSharp: public static void SetAppearancesActive(bool enabled)
          VB: Public Shared Sub SetAppearancesActive(enabled As Boolean)
        parameters:
        - id: enabled
          type: System.Boolean
          description: ''
      overload: Febucci.UI.TextAnimatorSettings.SetAppearancesActive*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Febucci.UI.TextAnimatorSettings.SetBehaviorsActive(System.Boolean)
      commentId: M:Febucci.UI.TextAnimatorSettings.SetBehaviorsActive(System.Boolean)
      language: CSharp
      name:
        CSharp: SetBehaviorsActive(Boolean)
        VB: SetBehaviorsActive(Boolean)
      nameWithType:
        CSharp: TextAnimatorSettings.SetBehaviorsActive(Boolean)
        VB: TextAnimatorSettings.SetBehaviorsActive(Boolean)
      qualifiedName:
        CSharp: Febucci.UI.TextAnimatorSettings.SetBehaviorsActive(System.Boolean)
        VB: Febucci.UI.TextAnimatorSettings.SetBehaviorsActive(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: SetBehaviorsActive
        path: ''
        startLine: 8766
      summary: "\nSets all behaviors effects status.\n"
      example: []
      syntax:
        content:
          CSharp: public static void SetBehaviorsActive(bool enabled)
          VB: Public Shared Sub SetBehaviorsActive(enabled As Boolean)
        parameters:
        - id: enabled
          type: System.Boolean
          description: ''
      overload: Febucci.UI.TextAnimatorSettings.SetBehaviorsActive*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Febucci.UI.TextAnimatorSettings.behaviors
      commentId: F:Febucci.UI.TextAnimatorSettings.behaviors
      language: CSharp
      name:
        CSharp: behaviors
        VB: behaviors
      nameWithType:
        CSharp: TextAnimatorSettings.behaviors
        VB: TextAnimatorSettings.behaviors
      qualifiedName:
        CSharp: Febucci.UI.TextAnimatorSettings.behaviors
        VB: Febucci.UI.TextAnimatorSettings.behaviors
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: behaviors
        path: ''
        startLine: 8789
      syntax:
        content:
          CSharp: public TextAnimatorSettings.Category<AnimationsDatabase> behaviors
          VB: Public behaviors As TextAnimatorSettings.Category(Of AnimationsDatabase)
        return:
          type: Febucci.UI.TextAnimatorSettings.Category{AnimationsDatabase}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.TextAnimatorSettings.appearances
      commentId: F:Febucci.UI.TextAnimatorSettings.appearances
      language: CSharp
      name:
        CSharp: appearances
        VB: appearances
      nameWithType:
        CSharp: TextAnimatorSettings.appearances
        VB: TextAnimatorSettings.appearances
      qualifiedName:
        CSharp: Febucci.UI.TextAnimatorSettings.appearances
        VB: Febucci.UI.TextAnimatorSettings.appearances
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: appearances
        path: ''
        startLine: 8790
      syntax:
        content:
          CSharp: public TextAnimatorSettings.Category<AnimationsDatabase> appearances
          VB: Public appearances As TextAnimatorSettings.Category(Of AnimationsDatabase)
        return:
          type: Febucci.UI.TextAnimatorSettings.Category{AnimationsDatabase}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.TextAnimatorSettings.actions
      commentId: F:Febucci.UI.TextAnimatorSettings.actions
      language: CSharp
      name:
        CSharp: actions
        VB: actions
      nameWithType:
        CSharp: TextAnimatorSettings.actions
        VB: TextAnimatorSettings.actions
      qualifiedName:
        CSharp: Febucci.UI.TextAnimatorSettings.actions
        VB: Febucci.UI.TextAnimatorSettings.actions
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: actions
        path: ''
        startLine: 8791
      syntax:
        content:
          CSharp: public TextAnimatorSettings.Category<ActionDatabase> actions
          VB: Public actions As TextAnimatorSettings.Category(Of ActionDatabase)
        return:
          type: Febucci.UI.TextAnimatorSettings.Category{ActionDatabase}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.TextAnimatorSettings.defaultStyleSheet
      commentId: F:Febucci.UI.TextAnimatorSettings.defaultStyleSheet
      language: CSharp
      name:
        CSharp: defaultStyleSheet
        VB: defaultStyleSheet
      nameWithType:
        CSharp: TextAnimatorSettings.defaultStyleSheet
        VB: TextAnimatorSettings.defaultStyleSheet
      qualifiedName:
        CSharp: Febucci.UI.TextAnimatorSettings.defaultStyleSheet
        VB: Febucci.UI.TextAnimatorSettings.defaultStyleSheet
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: defaultStyleSheet
        path: ''
        startLine: 8793
      syntax:
        content:
          CSharp: public StyleSheetScriptable defaultStyleSheet
          VB: Public defaultStyleSheet As StyleSheetScriptable
        return:
          type: StyleSheetScriptable
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.TextAnimatorSettings.controlTags
      commentId: F:Febucci.UI.TextAnimatorSettings.controlTags
      language: CSharp
      name:
        CSharp: controlTags
        VB: controlTags
      nameWithType:
        CSharp: TextAnimatorSettings.controlTags
        VB: TextAnimatorSettings.controlTags
      qualifiedName:
        CSharp: Febucci.UI.TextAnimatorSettings.controlTags
        VB: Febucci.UI.TextAnimatorSettings.controlTags
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: controlTags
        path: ''
        startLine: 8806
      syntax:
        content:
          CSharp: public TextAnimatorSettings.ControlTags controlTags
          VB: Public controlTags As TextAnimatorSettings.ControlTags
        return:
          type: Febucci.UI.TextAnimatorSettings.ControlTags
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Febucci.UI.TextAnimatorSettings.Category`1
    commentId: T:Febucci.UI.TextAnimatorSettings.Category`1
    language: CSharp
    name:
      CSharp: TextAnimatorSettings.Category<T>
      VB: TextAnimatorSettings.Category(Of T)
    nameWithType:
      CSharp: TextAnimatorSettings.Category<T>
      VB: TextAnimatorSettings.Category(Of T)
    qualifiedName:
      CSharp: Febucci.UI.TextAnimatorSettings.Category<T>
      VB: Febucci.UI.TextAnimatorSettings.Category(Of T)
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI
    source:
      id: Category
      path: ''
      startLine: 8771
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public struct Category<T>

              where T : ScriptableObject
        VB: >-
          <Serializable>

          Public Structure Category(Of T As ScriptableObject)
      typeParameters:
      - id: T
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Febucci.UI.TextAnimatorSettings.Category`1.defaultDatabase
      commentId: F:Febucci.UI.TextAnimatorSettings.Category`1.defaultDatabase
      language: CSharp
      name:
        CSharp: defaultDatabase
        VB: defaultDatabase
      nameWithType:
        CSharp: TextAnimatorSettings.Category<T>.defaultDatabase
        VB: TextAnimatorSettings.Category(Of T).defaultDatabase
      qualifiedName:
        CSharp: Febucci.UI.TextAnimatorSettings.Category<T>.defaultDatabase
        VB: Febucci.UI.TextAnimatorSettings.Category(Of T).defaultDatabase
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: defaultDatabase
        path: ''
        startLine: 8774
      syntax:
        content:
          CSharp: public T defaultDatabase
          VB: Public defaultDatabase As T
        return:
          type: '{T}'
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.TextAnimatorSettings.Category`1.enabled
      commentId: F:Febucci.UI.TextAnimatorSettings.Category`1.enabled
      language: CSharp
      name:
        CSharp: enabled
        VB: enabled
      nameWithType:
        CSharp: TextAnimatorSettings.Category<T>.enabled
        VB: TextAnimatorSettings.Category(Of T).enabled
      qualifiedName:
        CSharp: Febucci.UI.TextAnimatorSettings.Category<T>.enabled
        VB: Febucci.UI.TextAnimatorSettings.Category(Of T).enabled
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: enabled
        path: ''
        startLine: 8776
      syntax:
        content:
          CSharp: public bool enabled
          VB: Public enabled As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.TextAnimatorSettings.Category`1.openingSymbol
      commentId: F:Febucci.UI.TextAnimatorSettings.Category`1.openingSymbol
      language: CSharp
      name:
        CSharp: openingSymbol
        VB: openingSymbol
      nameWithType:
        CSharp: TextAnimatorSettings.Category<T>.openingSymbol
        VB: TextAnimatorSettings.Category(Of T).openingSymbol
      qualifiedName:
        CSharp: Febucci.UI.TextAnimatorSettings.Category<T>.openingSymbol
        VB: Febucci.UI.TextAnimatorSettings.Category(Of T).openingSymbol
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: openingSymbol
        path: ''
        startLine: 8777
      syntax:
        content:
          CSharp: public char openingSymbol
          VB: Public openingSymbol As Char
        return:
          type: System.Char
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.TextAnimatorSettings.Category`1.closingSymbol
      commentId: F:Febucci.UI.TextAnimatorSettings.Category`1.closingSymbol
      language: CSharp
      name:
        CSharp: closingSymbol
        VB: closingSymbol
      nameWithType:
        CSharp: TextAnimatorSettings.Category<T>.closingSymbol
        VB: TextAnimatorSettings.Category(Of T).closingSymbol
      qualifiedName:
        CSharp: Febucci.UI.TextAnimatorSettings.Category<T>.closingSymbol
        VB: Febucci.UI.TextAnimatorSettings.Category(Of T).closingSymbol
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: closingSymbol
        path: ''
        startLine: 8778
      syntax:
        content:
          CSharp: public char closingSymbol
          VB: Public closingSymbol As Char
        return:
          type: System.Char
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.TextAnimatorSettings.Category`1.#ctor(System.Char,System.Char)
      commentId: M:Febucci.UI.TextAnimatorSettings.Category`1.#ctor(System.Char,System.Char)
      language: CSharp
      name:
        CSharp: Category(Char, Char)
        VB: Category(Char, Char)
      nameWithType:
        CSharp: TextAnimatorSettings.Category<T>.Category(Char, Char)
        VB: TextAnimatorSettings.Category(Of T).Category(Char, Char)
      qualifiedName:
        CSharp: Febucci.UI.TextAnimatorSettings.Category<T>.Category(System.Char, System.Char)
        VB: Febucci.UI.TextAnimatorSettings.Category(Of T).Category(System.Char, System.Char)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: .ctor
        path: ''
        startLine: 8780
      syntax:
        content:
          CSharp: public Category(char openingSymbol, char closingSymbol)
          VB: Public Sub New(openingSymbol As Char, closingSymbol As Char)
        parameters:
        - id: openingSymbol
          type: System.Char
        - id: closingSymbol
          type: System.Char
      overload: Febucci.UI.TextAnimatorSettings.Category`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Febucci.UI.TextAnimatorSettings.ControlTags
    commentId: T:Febucci.UI.TextAnimatorSettings.ControlTags
    language: CSharp
    name:
      CSharp: TextAnimatorSettings.ControlTags
      VB: TextAnimatorSettings.ControlTags
    nameWithType:
      CSharp: TextAnimatorSettings.ControlTags
      VB: TextAnimatorSettings.ControlTags
    qualifiedName:
      CSharp: Febucci.UI.TextAnimatorSettings.ControlTags
      VB: Febucci.UI.TextAnimatorSettings.ControlTags
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI
    source:
      id: ControlTags
      path: ''
      startLine: 8795
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public struct ControlTags
        VB: >-
          <Serializable>

          Public Structure ControlTags
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Febucci.UI.TextAnimatorSettings.ControlTags.disableTypewriter
      commentId: F:Febucci.UI.TextAnimatorSettings.ControlTags.disableTypewriter
      language: CSharp
      name:
        CSharp: disableTypewriter
        VB: disableTypewriter
      nameWithType:
        CSharp: TextAnimatorSettings.ControlTags.disableTypewriter
        VB: TextAnimatorSettings.ControlTags.disableTypewriter
      qualifiedName:
        CSharp: Febucci.UI.TextAnimatorSettings.ControlTags.disableTypewriter
        VB: Febucci.UI.TextAnimatorSettings.ControlTags.disableTypewriter
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: disableTypewriter
        path: ''
        startLine: 8798
      syntax:
        content:
          CSharp: public string disableTypewriter
          VB: Public disableTypewriter As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.TextAnimatorSettings.ControlTags.#ctor(System.String)
      commentId: M:Febucci.UI.TextAnimatorSettings.ControlTags.#ctor(System.String)
      language: CSharp
      name:
        CSharp: ControlTags(String)
        VB: ControlTags(String)
      nameWithType:
        CSharp: TextAnimatorSettings.ControlTags.ControlTags(String)
        VB: TextAnimatorSettings.ControlTags.ControlTags(String)
      qualifiedName:
        CSharp: Febucci.UI.TextAnimatorSettings.ControlTags.ControlTags(System.String)
        VB: Febucci.UI.TextAnimatorSettings.ControlTags.ControlTags(System.String)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI
      source:
        id: .ctor
        path: ''
        startLine: 8800
      syntax:
        content:
          CSharp: public ControlTags(string disableTypewriter)
          VB: Public Sub New(disableTypewriter As String)
        parameters:
        - id: disableTypewriter
          type: System.String
      overload: Febucci.UI.TextAnimatorSettings.ControlTags.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
- id: Febucci.UI.Examples
  commentId: N:Febucci.UI.Examples
  language: CSharp
  name:
    CSharp: Febucci.UI.Examples
    VB: Febucci.UI.Examples
  nameWithType:
    CSharp: Febucci.UI.Examples
    VB: Febucci.UI.Examples
  qualifiedName:
    CSharp: Febucci.UI.Examples
    VB: Febucci.UI.Examples
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: Febucci.UI.Examples.DefaultEffectsExample
    commentId: T:Febucci.UI.Examples.DefaultEffectsExample
    language: CSharp
    name:
      CSharp: DefaultEffectsExample
      VB: DefaultEffectsExample
    nameWithType:
      CSharp: DefaultEffectsExample
      VB: DefaultEffectsExample
    qualifiedName:
      CSharp: Febucci.UI.Examples.DefaultEffectsExample
      VB: Febucci.UI.Examples.DefaultEffectsExample
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Examples
    source:
      id: DefaultEffectsExample
      path: ''
      startLine: 302
    syntax:
      content:
        CSharp: 'public class DefaultEffectsExample : MonoBehaviour'
        VB: >-
          Public Class DefaultEffectsExample

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Febucci.UI.Examples.DefaultEffectsExample.typewriter
      commentId: F:Febucci.UI.Examples.DefaultEffectsExample.typewriter
      language: CSharp
      name:
        CSharp: typewriter
        VB: typewriter
      nameWithType:
        CSharp: DefaultEffectsExample.typewriter
        VB: DefaultEffectsExample.typewriter
      qualifiedName:
        CSharp: Febucci.UI.Examples.DefaultEffectsExample.typewriter
        VB: Febucci.UI.Examples.DefaultEffectsExample.typewriter
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Examples
      source:
        id: typewriter
        path: ''
        startLine: 305
      syntax:
        content:
          CSharp: public TypewriterCore typewriter
          VB: Public typewriter As TypewriterCore
        return:
          type: TypewriterCore
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Febucci.UI.Examples.UsageExample
    commentId: T:Febucci.UI.Examples.UsageExample
    language: CSharp
    name:
      CSharp: UsageExample
      VB: UsageExample
    nameWithType:
      CSharp: UsageExample
      VB: UsageExample
    qualifiedName:
      CSharp: Febucci.UI.Examples.UsageExample
      VB: Febucci.UI.Examples.UsageExample
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Examples
    source:
      id: UsageExample
      path: ''
      startLine: 522
    syntax:
      content:
        CSharp: 'public class UsageExample : MonoBehaviour'
        VB: >-
          Public Class UsageExample

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Febucci.UI.Examples.UsageExample.textAnimatorPlayer
      commentId: F:Febucci.UI.Examples.UsageExample.textAnimatorPlayer
      language: CSharp
      name:
        CSharp: textAnimatorPlayer
        VB: textAnimatorPlayer
      nameWithType:
        CSharp: UsageExample.textAnimatorPlayer
        VB: UsageExample.textAnimatorPlayer
      qualifiedName:
        CSharp: Febucci.UI.Examples.UsageExample.textAnimatorPlayer
        VB: Febucci.UI.Examples.UsageExample.textAnimatorPlayer
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Examples
      source:
        id: textAnimatorPlayer
        path: ''
        startLine: 525
      syntax:
        content:
          CSharp: public TypewriterByCharacter textAnimatorPlayer
          VB: Public textAnimatorPlayer As TypewriterByCharacter
        return:
          type: Febucci.UI.TypewriterByCharacter
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Examples.UsageExample.ShowText
      commentId: M:Febucci.UI.Examples.UsageExample.ShowText
      language: CSharp
      name:
        CSharp: ShowText()
        VB: ShowText()
      nameWithType:
        CSharp: UsageExample.ShowText()
        VB: UsageExample.ShowText()
      qualifiedName:
        CSharp: Febucci.UI.Examples.UsageExample.ShowText()
        VB: Febucci.UI.Examples.UsageExample.ShowText()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Examples
      source:
        id: ShowText
        path: ''
        startLine: 540
      syntax:
        content:
          CSharp: public void ShowText()
          VB: Public Sub ShowText
      overload: Febucci.UI.Examples.UsageExample.ShowText*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
- id: Febucci.UI.Core
  commentId: N:Febucci.UI.Core
  language: CSharp
  name:
    CSharp: Febucci.UI.Core
    VB: Febucci.UI.Core
  nameWithType:
    CSharp: Febucci.UI.Core
    VB: Febucci.UI.Core
  qualifiedName:
    CSharp: Febucci.UI.Core
    VB: Febucci.UI.Core
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: Febucci.UI.Core.ColorCurvePropertyDrawer
    commentId: T:Febucci.UI.Core.ColorCurvePropertyDrawer
    language: CSharp
    name:
      CSharp: ColorCurvePropertyDrawer
      VB: ColorCurvePropertyDrawer
    nameWithType:
      CSharp: ColorCurvePropertyDrawer
      VB: ColorCurvePropertyDrawer
    qualifiedName:
      CSharp: Febucci.UI.Core.ColorCurvePropertyDrawer
      VB: Febucci.UI.Core.ColorCurvePropertyDrawer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core
    source:
      id: ColorCurvePropertyDrawer
      path: ''
      startLine: 1720
    syntax:
      content:
        CSharp: 'public class ColorCurvePropertyDrawer : PropertyDrawer'
        VB: >-
          Public Class ColorCurvePropertyDrawer

              Inherits PropertyDrawer
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Febucci.UI.Core.ColorCurvePropertyDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
      commentId: M:Febucci.UI.Core.ColorCurvePropertyDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: OnGUI(Rect, SerializedProperty, GUIContent)
        VB: OnGUI(Rect, SerializedProperty, GUIContent)
      nameWithType:
        CSharp: ColorCurvePropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
        VB: ColorCurvePropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: Febucci.UI.Core.ColorCurvePropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
        VB: Febucci.UI.Core.ColorCurvePropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: OnGUI
        path: ''
        startLine: 1723
      syntax:
        content:
          CSharp: public override void OnGUI(Rect position, SerializedProperty property, GUIContent label)
          VB: Public Overrides Sub OnGUI(position As Rect, property As SerializedProperty, label As GUIContent)
        parameters:
        - id: position
          type: Rect
        - id: property
          type: SerializedProperty
        - id: label
          type: GUIContent
      overload: Febucci.UI.Core.ColorCurvePropertyDrawer.OnGUI*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Core.ColorCurvePropertyDrawer.GetPropertyHeight(SerializedProperty,GUIContent)
      commentId: M:Febucci.UI.Core.ColorCurvePropertyDrawer.GetPropertyHeight(SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: GetPropertyHeight(SerializedProperty, GUIContent)
        VB: GetPropertyHeight(SerializedProperty, GUIContent)
      nameWithType:
        CSharp: ColorCurvePropertyDrawer.GetPropertyHeight(SerializedProperty, GUIContent)
        VB: ColorCurvePropertyDrawer.GetPropertyHeight(SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: Febucci.UI.Core.ColorCurvePropertyDrawer.GetPropertyHeight(SerializedProperty, GUIContent)
        VB: Febucci.UI.Core.ColorCurvePropertyDrawer.GetPropertyHeight(SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: GetPropertyHeight
        path: ''
        startLine: 1757
      syntax:
        content:
          CSharp: public override float GetPropertyHeight(SerializedProperty property, GUIContent label)
          VB: Public Overrides Function GetPropertyHeight(property As SerializedProperty, label As GUIContent) As Single
        parameters:
        - id: property
          type: SerializedProperty
        - id: label
          type: GUIContent
        return:
          type: System.Single
      overload: Febucci.UI.Core.ColorCurvePropertyDrawer.GetPropertyHeight*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Core.EmissionCurvePropertyDrawer
    commentId: T:Febucci.UI.Core.EmissionCurvePropertyDrawer
    language: CSharp
    name:
      CSharp: EmissionCurvePropertyDrawer
      VB: EmissionCurvePropertyDrawer
    nameWithType:
      CSharp: EmissionCurvePropertyDrawer
      VB: EmissionCurvePropertyDrawer
    qualifiedName:
      CSharp: Febucci.UI.Core.EmissionCurvePropertyDrawer
      VB: Febucci.UI.Core.EmissionCurvePropertyDrawer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core
    source:
      id: EmissionCurvePropertyDrawer
      path: ''
      startLine: 1771
    syntax:
      content:
        CSharp: 'public class EmissionCurvePropertyDrawer : PropertyDrawer'
        VB: >-
          Public Class EmissionCurvePropertyDrawer

              Inherits PropertyDrawer
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Febucci.UI.Core.EmissionCurvePropertyDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
      commentId: M:Febucci.UI.Core.EmissionCurvePropertyDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: OnGUI(Rect, SerializedProperty, GUIContent)
        VB: OnGUI(Rect, SerializedProperty, GUIContent)
      nameWithType:
        CSharp: EmissionCurvePropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
        VB: EmissionCurvePropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: Febucci.UI.Core.EmissionCurvePropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
        VB: Febucci.UI.Core.EmissionCurvePropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: OnGUI
        path: ''
        startLine: 1774
      syntax:
        content:
          CSharp: public override void OnGUI(Rect position, SerializedProperty property, GUIContent label)
          VB: Public Overrides Sub OnGUI(position As Rect, property As SerializedProperty, label As GUIContent)
        parameters:
        - id: position
          type: Rect
        - id: property
          type: SerializedProperty
        - id: label
          type: GUIContent
      overload: Febucci.UI.Core.EmissionCurvePropertyDrawer.OnGUI*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Core.EmissionCurvePropertyDrawer.GetPropertyHeight(SerializedProperty,GUIContent)
      commentId: M:Febucci.UI.Core.EmissionCurvePropertyDrawer.GetPropertyHeight(SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: GetPropertyHeight(SerializedProperty, GUIContent)
        VB: GetPropertyHeight(SerializedProperty, GUIContent)
      nameWithType:
        CSharp: EmissionCurvePropertyDrawer.GetPropertyHeight(SerializedProperty, GUIContent)
        VB: EmissionCurvePropertyDrawer.GetPropertyHeight(SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: Febucci.UI.Core.EmissionCurvePropertyDrawer.GetPropertyHeight(SerializedProperty, GUIContent)
        VB: Febucci.UI.Core.EmissionCurvePropertyDrawer.GetPropertyHeight(SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: GetPropertyHeight
        path: ''
        startLine: 1806
      syntax:
        content:
          CSharp: public override float GetPropertyHeight(SerializedProperty property, GUIContent label)
          VB: Public Overrides Function GetPropertyHeight(property As SerializedProperty, label As GUIContent) As Single
        parameters:
        - id: property
          type: SerializedProperty
        - id: label
          type: GUIContent
        return:
          type: System.Single
      overload: Febucci.UI.Core.EmissionCurvePropertyDrawer.GetPropertyHeight*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Core.FloatCurvePropertyDrawer
    commentId: T:Febucci.UI.Core.FloatCurvePropertyDrawer
    language: CSharp
    name:
      CSharp: FloatCurvePropertyDrawer
      VB: FloatCurvePropertyDrawer
    nameWithType:
      CSharp: FloatCurvePropertyDrawer
      VB: FloatCurvePropertyDrawer
    qualifiedName:
      CSharp: Febucci.UI.Core.FloatCurvePropertyDrawer
      VB: Febucci.UI.Core.FloatCurvePropertyDrawer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core
    source:
      id: FloatCurvePropertyDrawer
      path: ''
      startLine: 1820
    syntax:
      content:
        CSharp: 'public class FloatCurvePropertyDrawer : PropertyDrawer'
        VB: >-
          Public Class FloatCurvePropertyDrawer

              Inherits PropertyDrawer
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Febucci.UI.Core.FloatCurvePropertyDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
      commentId: M:Febucci.UI.Core.FloatCurvePropertyDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: OnGUI(Rect, SerializedProperty, GUIContent)
        VB: OnGUI(Rect, SerializedProperty, GUIContent)
      nameWithType:
        CSharp: FloatCurvePropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
        VB: FloatCurvePropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: Febucci.UI.Core.FloatCurvePropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
        VB: Febucci.UI.Core.FloatCurvePropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: OnGUI
        path: ''
        startLine: 1823
      syntax:
        content:
          CSharp: public override void OnGUI(Rect position, SerializedProperty property, GUIContent label)
          VB: Public Overrides Sub OnGUI(position As Rect, property As SerializedProperty, label As GUIContent)
        parameters:
        - id: position
          type: Rect
        - id: property
          type: SerializedProperty
        - id: label
          type: GUIContent
      overload: Febucci.UI.Core.FloatCurvePropertyDrawer.OnGUI*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Core.FloatCurvePropertyDrawer.GetPropertyHeight(SerializedProperty,GUIContent)
      commentId: M:Febucci.UI.Core.FloatCurvePropertyDrawer.GetPropertyHeight(SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: GetPropertyHeight(SerializedProperty, GUIContent)
        VB: GetPropertyHeight(SerializedProperty, GUIContent)
      nameWithType:
        CSharp: FloatCurvePropertyDrawer.GetPropertyHeight(SerializedProperty, GUIContent)
        VB: FloatCurvePropertyDrawer.GetPropertyHeight(SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: Febucci.UI.Core.FloatCurvePropertyDrawer.GetPropertyHeight(SerializedProperty, GUIContent)
        VB: Febucci.UI.Core.FloatCurvePropertyDrawer.GetPropertyHeight(SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: GetPropertyHeight
        path: ''
        startLine: 1857
      syntax:
        content:
          CSharp: public override float GetPropertyHeight(SerializedProperty property, GUIContent label)
          VB: Public Overrides Function GetPropertyHeight(property As SerializedProperty, label As GUIContent) As Single
        parameters:
        - id: property
          type: SerializedProperty
        - id: label
          type: GUIContent
        return:
          type: System.Single
      overload: Febucci.UI.Core.FloatCurvePropertyDrawer.GetPropertyHeight*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Core.TAnimCore
    commentId: T:Febucci.UI.Core.TAnimCore
    language: CSharp
    name:
      CSharp: TAnimCore
      VB: TAnimCore
    nameWithType:
      CSharp: TAnimCore
      VB: TAnimCore
    qualifiedName:
      CSharp: Febucci.UI.Core.TAnimCore
      VB: Febucci.UI.Core.TAnimCore
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core
    source:
      id: TAnimCore
      path: ''
      startLine: 3405
    syntax:
      content:
        CSharp: 'public abstract class TAnimCore : MonoBehaviour'
        VB: >-
          Public MustInherit Class TAnimCore

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: Febucci.UI.Core.TAnimCore.typewriterStartsAutomatically
      commentId: F:Febucci.UI.Core.TAnimCore.typewriterStartsAutomatically
      language: CSharp
      name:
        CSharp: typewriterStartsAutomatically
        VB: typewriterStartsAutomatically
      nameWithType:
        CSharp: TAnimCore.typewriterStartsAutomatically
        VB: TAnimCore.typewriterStartsAutomatically
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.typewriterStartsAutomatically
        VB: Febucci.UI.Core.TAnimCore.typewriterStartsAutomatically
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: typewriterStartsAutomatically
        path: ''
        startLine: 3431
      summary: "\nIf the source text changes, should the typewriter start automatically?\n"
      remarks: "\nRequires a Typewriter component if true.\n"
      example: []
      syntax:
        content:
          CSharp: public bool typewriterStartsAutomatically
          VB: Public typewriterStartsAutomatically As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TAnimCore.animationLoop
      commentId: F:Febucci.UI.Core.TAnimCore.animationLoop
      language: CSharp
      name:
        CSharp: animationLoop
        VB: animationLoop
      nameWithType:
        CSharp: TAnimCore.animationLoop
        VB: TAnimCore.animationLoop
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.animationLoop
        VB: Febucci.UI.Core.TAnimCore.animationLoop
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: animationLoop
        path: ''
        startLine: 3462
      summary: "\nControls when Text Animator should update its effects. Set it to <xref href=\"Febucci.UI.AnimationLoop.Script\" data-throw-if-not-resolved=\"false\"></xref> if you want to control the animations from your own loop, invoking the <xref href=\"Febucci.UI.Core.TAnimCore.Animate(System.Single)\" data-throw-if-not-resolved=\"false\"></xref> method.\n"
      example: []
      syntax:
        content:
          CSharp: public AnimationLoop animationLoop
          VB: Public animationLoop As AnimationLoop
        return:
          type: Febucci.UI.AnimationLoop
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Febucci.UI.AnimationLoop.Script: 
        Febucci.UI.Core.TAnimCore.Animate(System.Single): 
    - id: Febucci.UI.Core.TAnimCore.timeScale
      commentId: F:Febucci.UI.Core.TAnimCore.timeScale
      language: CSharp
      name:
        CSharp: timeScale
        VB: timeScale
      nameWithType:
        CSharp: TAnimCore.timeScale
        VB: TAnimCore.timeScale
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.timeScale
        VB: Febucci.UI.Core.TAnimCore.timeScale
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: timeScale
        path: ''
        startLine: 3468
      summary: "\nChooses which Time Scale to use when automatically animating effects (in other words, when the Update Mode is not set to Script). Set it to <xref href=\"Febucci.UI.TimeScale.Unscaled\" data-throw-if-not-resolved=\"false\"></xref> if you want to animate effects even when the game is paused.\n"
      example: []
      syntax:
        content:
          CSharp: public TimeScale timeScale
          VB: Public timeScale As TimeScale
        return:
          type: Febucci.UI.TimeScale
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Febucci.UI.TimeScale.Unscaled: 
    - id: Febucci.UI.Core.TAnimCore.textFull
      commentId: P:Febucci.UI.Core.TAnimCore.textFull
      language: CSharp
      name:
        CSharp: textFull
        VB: textFull
      nameWithType:
        CSharp: TAnimCore.textFull
        VB: TAnimCore.textFull
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.textFull
        VB: Febucci.UI.Core.TAnimCore.textFull
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: textFull
        path: ''
        startLine: 3477
      syntax:
        content:
          CSharp: public string textFull { get; set; }
          VB: Public Property textFull As String
        parameters: []
        return:
          type: System.String
      overload: Febucci.UI.Core.TAnimCore.textFull*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Febucci.UI.Core.TAnimCore.textWithoutTextAnimTags
      commentId: P:Febucci.UI.Core.TAnimCore.textWithoutTextAnimTags
      language: CSharp
      name:
        CSharp: textWithoutTextAnimTags
        VB: textWithoutTextAnimTags
      nameWithType:
        CSharp: TAnimCore.textWithoutTextAnimTags
        VB: TAnimCore.textWithoutTextAnimTags
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.textWithoutTextAnimTags
        VB: Febucci.UI.Core.TAnimCore.textWithoutTextAnimTags
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: textWithoutTextAnimTags
        path: ''
        startLine: 3504
      summary: "\nThe text without any Text Animator tag\n"
      remarks: "\nPS. this might still contain other tags from different supported plugins, like &quot;color&quot; from TMPro.\nTo get the full stripped text, see <xref href=\"Febucci.UI.Core.TAnimCore.textWithoutAnyTag\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public string textWithoutTextAnimTags { get; }
          VB: Public ReadOnly Property textWithoutTextAnimTags As String
        parameters: []
        return:
          type: System.String
      overload: Febucci.UI.Core.TAnimCore.textWithoutTextAnimTags*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        Febucci.UI.Core.TAnimCore.textWithoutAnyTag: 
    - id: Febucci.UI.Core.TAnimCore.textWithoutAnyTag
      commentId: P:Febucci.UI.Core.TAnimCore.textWithoutAnyTag
      language: CSharp
      name:
        CSharp: textWithoutAnyTag
        VB: textWithoutAnyTag
      nameWithType:
        CSharp: TAnimCore.textWithoutAnyTag
        VB: TAnimCore.textWithoutAnyTag
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.textWithoutAnyTag
        VB: Febucci.UI.Core.TAnimCore.textWithoutAnyTag
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: textWithoutAnyTag
        path: ''
        startLine: 3505
      syntax:
        content:
          CSharp: public string textWithoutAnyTag { get; }
          VB: Public ReadOnly Property textWithoutAnyTag As String
        parameters: []
        return:
          type: System.String
      overload: Febucci.UI.Core.TAnimCore.textWithoutAnyTag*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Febucci.UI.Core.TAnimCore.latestCharacterShown
      commentId: P:Febucci.UI.Core.TAnimCore.latestCharacterShown
      language: CSharp
      name:
        CSharp: latestCharacterShown
        VB: latestCharacterShown
      nameWithType:
        CSharp: TAnimCore.latestCharacterShown
        VB: TAnimCore.latestCharacterShown
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.latestCharacterShown
        VB: Febucci.UI.Core.TAnimCore.latestCharacterShown
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: latestCharacterShown
        path: ''
        startLine: 3509
      syntax:
        content:
          CSharp: public CharacterData latestCharacterShown { get; }
          VB: Public ReadOnly Property latestCharacterShown As CharacterData
        parameters: []
        return:
          type: Febucci.UI.Core.CharacterData
      overload: Febucci.UI.Core.TAnimCore.latestCharacterShown*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Febucci.UI.Core.TAnimCore.allLettersShown
      commentId: P:Febucci.UI.Core.TAnimCore.allLettersShown
      language: CSharp
      name:
        CSharp: allLettersShown
        VB: allLettersShown
      nameWithType:
        CSharp: TAnimCore.allLettersShown
        VB: TAnimCore.allLettersShown
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.allLettersShown
        VB: Febucci.UI.Core.TAnimCore.allLettersShown
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: allLettersShown
        path: ''
        startLine: 3518
      summary: "\n<code>true</code> if the text is entirely visible, including waiting for appearance effects to finish\n(as they might still hide a character until the very end)\n"
      remarks: "\nYou can use this to check if all the letters have been shown.\n"
      example: []
      syntax:
        content:
          CSharp: public bool allLettersShown { get; }
          VB: Public ReadOnly Property allLettersShown As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Febucci.UI.Core.TAnimCore.allLettersShown*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Febucci.UI.Core.TAnimCore.anyLetterVisible
      commentId: P:Febucci.UI.Core.TAnimCore.anyLetterVisible
      language: CSharp
      name:
        CSharp: anyLetterVisible
        VB: anyLetterVisible
      nameWithType:
        CSharp: TAnimCore.anyLetterVisible
        VB: TAnimCore.anyLetterVisible
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.anyLetterVisible
        VB: Febucci.UI.Core.TAnimCore.anyLetterVisible
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: anyLetterVisible
        path: ''
        startLine: 3552
      summary: "\n<code>true</code> if any letter is still visible in the text\n"
      remarks: "\nYou can use this to check if the disappearance effects are still running.\n"
      example: []
      syntax:
        content:
          CSharp: public bool anyLetterVisible { get; }
          VB: Public ReadOnly Property anyLetterVisible As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Febucci.UI.Core.TAnimCore.anyLetterVisible*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Febucci.UI.Core.TAnimCore.CharactersCount
      commentId: P:Febucci.UI.Core.TAnimCore.CharactersCount
      language: CSharp
      name:
        CSharp: CharactersCount
        VB: CharactersCount
      nameWithType:
        CSharp: TAnimCore.CharactersCount
        VB: TAnimCore.CharactersCount
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.CharactersCount
        VB: Febucci.UI.Core.TAnimCore.CharactersCount
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: CharactersCount
        path: ''
        startLine: 3582
      syntax:
        content:
          CSharp: public int CharactersCount { get; }
          VB: Public ReadOnly Property CharactersCount As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Febucci.UI.Core.TAnimCore.CharactersCount*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Febucci.UI.Core.TAnimCore.Characters
      commentId: P:Febucci.UI.Core.TAnimCore.Characters
      language: CSharp
      name:
        CSharp: Characters
        VB: Characters
      nameWithType:
        CSharp: TAnimCore.Characters
        VB: TAnimCore.Characters
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.Characters
        VB: Febucci.UI.Core.TAnimCore.Characters
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: Characters
        path: ''
        startLine: 3593
      summary: "\nThe array of characters currently present in the text.\n"
      remarks: "\nThis array might be larger than the actual number of characters, so please cycle for <xref href=\"Febucci.UI.Core.TAnimCore.CharactersCount\" data-throw-if-not-resolved=\"false\"></xref> instead.\n"
      example: []
      syntax:
        content:
          CSharp: public CharacterData[] Characters { get; }
          VB: Public ReadOnly Property Characters As CharacterData()
        parameters: []
        return:
          type: Febucci.UI.Core.CharacterData[]
      overload: Febucci.UI.Core.TAnimCore.Characters*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        Febucci.UI.Core.TAnimCore.CharactersCount: 
    - id: Febucci.UI.Core.TAnimCore.WordsCount
      commentId: P:Febucci.UI.Core.TAnimCore.WordsCount
      language: CSharp
      name:
        CSharp: WordsCount
        VB: WordsCount
      nameWithType:
        CSharp: TAnimCore.WordsCount
        VB: TAnimCore.WordsCount
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.WordsCount
        VB: Febucci.UI.Core.TAnimCore.WordsCount
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: WordsCount
        path: ''
        startLine: 3602
      summary: "\nNumber of words in the text\n"
      example: []
      syntax:
        content:
          CSharp: public int WordsCount { get; }
          VB: Public ReadOnly Property WordsCount As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Febucci.UI.Core.TAnimCore.WordsCount*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Febucci.UI.Core.TAnimCore.Words
      commentId: P:Febucci.UI.Core.TAnimCore.Words
      language: CSharp
      name:
        CSharp: Words
        VB: Words
      nameWithType:
        CSharp: TAnimCore.Words
        VB: TAnimCore.Words
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.Words
        VB: Febucci.UI.Core.TAnimCore.Words
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: Words
        path: ''
        startLine: 3614
      summary: "\nThe array of words currently present in the text.\n"
      remarks: "\nThis array might be larger than the actual number of words, so please cycle for <xref href=\"Febucci.UI.Core.TAnimCore.WordsCount\" data-throw-if-not-resolved=\"false\"></xref> instead.\n"
      example: []
      syntax:
        content:
          CSharp: public WordInfo[] Words { get; }
          VB: Public ReadOnly Property Words As WordInfo()
        parameters: []
        return:
          type: Febucci.UI.Core.WordInfo[]
      overload: Febucci.UI.Core.TAnimCore.Words*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        Febucci.UI.Core.TAnimCore.WordsCount: 
    - id: Febucci.UI.Core.TAnimCore.useDynamicScaling
      commentId: F:Febucci.UI.Core.TAnimCore.useDynamicScaling
      language: CSharp
      name:
        CSharp: useDynamicScaling
        VB: useDynamicScaling
      nameWithType:
        CSharp: TAnimCore.useDynamicScaling
        VB: TAnimCore.useDynamicScaling
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.useDynamicScaling
        VB: Febucci.UI.Core.TAnimCore.useDynamicScaling
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: useDynamicScaling
        path: ''
        startLine: 3622
      summary: "\nTrue if you want the animations to be uniform/consistent across different font sizes. Default/Suggested to leave this as true, and change <xref href=\"Febucci.UI.Core.TAnimCore.referenceFontSize\" data-throw-if-not-resolved=\"false\"></xref>. Otherwise, effects will move more when the text is smaller (requires less space on screen).\n"
      example: []
      syntax:
        content:
          CSharp: public bool useDynamicScaling
          VB: Public useDynamicScaling As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Febucci.UI.Core.TAnimCore.referenceFontSize: 
    - id: Febucci.UI.Core.TAnimCore.referenceFontSize
      commentId: F:Febucci.UI.Core.TAnimCore.referenceFontSize
      language: CSharp
      name:
        CSharp: referenceFontSize
        VB: referenceFontSize
      nameWithType:
        CSharp: TAnimCore.referenceFontSize
        VB: TAnimCore.referenceFontSize
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.referenceFontSize
        VB: Febucci.UI.Core.TAnimCore.referenceFontSize
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: referenceFontSize
        path: ''
        startLine: 3628
      summary: "\nFont size that will be used as reference to keep animations consistent/uniform at different scales. Works only if <xref href=\"Febucci.UI.Core.TAnimCore.useDynamicScaling\" data-throw-if-not-resolved=\"false\"></xref> is set to true.\n"
      example: []
      syntax:
        content:
          CSharp: public float referenceFontSize
          VB: Public referenceFontSize As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Febucci.UI.Core.TAnimCore.useDynamicScaling: 
    - id: Febucci.UI.Core.TAnimCore.isResettingTimeOnNewText
      commentId: F:Febucci.UI.Core.TAnimCore.isResettingTimeOnNewText
      language: CSharp
      name:
        CSharp: isResettingTimeOnNewText
        VB: isResettingTimeOnNewText
      nameWithType:
        CSharp: TAnimCore.isResettingTimeOnNewText
        VB: TAnimCore.isResettingTimeOnNewText
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.isResettingTimeOnNewText
        VB: Febucci.UI.Core.TAnimCore.isResettingTimeOnNewText
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: isResettingTimeOnNewText
        path: ''
        startLine: 3637
      summary: "\nTrue if you want the animator&apos;s time to be reset on new text.\n"
      example: []
      syntax:
        content:
          CSharp: public bool isResettingTimeOnNewText
          VB: Public isResettingTimeOnNewText As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TAnimCore.useDefaultDatabases
      commentId: F:Febucci.UI.Core.TAnimCore.useDefaultDatabases
      language: CSharp
      name:
        CSharp: useDefaultDatabases
        VB: useDefaultDatabases
      nameWithType:
        CSharp: TAnimCore.useDefaultDatabases
        VB: TAnimCore.useDefaultDatabases
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.useDefaultDatabases
        VB: Febucci.UI.Core.TAnimCore.useDefaultDatabases
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: useDefaultDatabases
        path: ''
        startLine: 3650
      summary: "\nTrue if you want to use the databases referenced in the <xref href=\"Febucci.UI.TextAnimatorSettings\" data-throw-if-not-resolved=\"false\"></xref> asset, otherwise you can specify which databases to use in this component.\n"
      example: []
      syntax:
        content:
          CSharp: public bool useDefaultDatabases
          VB: Public useDefaultDatabases As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Febucci.UI.TextAnimatorSettings: 
    - id: Febucci.UI.Core.TAnimCore.DatabaseBehaviors
      commentId: P:Febucci.UI.Core.TAnimCore.DatabaseBehaviors
      language: CSharp
      name:
        CSharp: DatabaseBehaviors
        VB: DatabaseBehaviors
      nameWithType:
        CSharp: TAnimCore.DatabaseBehaviors
        VB: TAnimCore.DatabaseBehaviors
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.DatabaseBehaviors
        VB: Febucci.UI.Core.TAnimCore.DatabaseBehaviors
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: DatabaseBehaviors
        path: ''
        startLine: 3659
      summary: "\nBehaviors Database used by this Text Animator. If <xref href=\"Febucci.UI.Core.TAnimCore.useDefaultDatabases\" data-throw-if-not-resolved=\"false\"></xref> is set to true, this will be the default database from the <xref href=\"Febucci.UI.TextAnimatorSettings\" data-throw-if-not-resolved=\"false\"></xref> asset.\n"
      example: []
      syntax:
        content:
          CSharp: public AnimationsDatabase DatabaseBehaviors { get; set; }
          VB: Public Property DatabaseBehaviors As AnimationsDatabase
        parameters: []
        return:
          type: AnimationsDatabase
      overload: Febucci.UI.Core.TAnimCore.DatabaseBehaviors*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
      references:
        Febucci.UI.Core.TAnimCore.useDefaultDatabases: 
        Febucci.UI.TextAnimatorSettings: 
    - id: Febucci.UI.Core.TAnimCore.DatabaseAppearances
      commentId: P:Febucci.UI.Core.TAnimCore.DatabaseAppearances
      language: CSharp
      name:
        CSharp: DatabaseAppearances
        VB: DatabaseAppearances
      nameWithType:
        CSharp: TAnimCore.DatabaseAppearances
        VB: TAnimCore.DatabaseAppearances
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.DatabaseAppearances
        VB: Febucci.UI.Core.TAnimCore.DatabaseAppearances
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: DatabaseAppearances
        path: ''
        startLine: 3674
      summary: "\nAppearances Database used by this Text Animator. If <xref href=\"Febucci.UI.Core.TAnimCore.useDefaultDatabases\" data-throw-if-not-resolved=\"false\"></xref> is set to true, this will be the default database from the <xref href=\"Febucci.UI.TextAnimatorSettings\" data-throw-if-not-resolved=\"false\"></xref> asset.\n"
      example: []
      syntax:
        content:
          CSharp: public AnimationsDatabase DatabaseAppearances { get; set; }
          VB: Public Property DatabaseAppearances As AnimationsDatabase
        parameters: []
        return:
          type: AnimationsDatabase
      overload: Febucci.UI.Core.TAnimCore.DatabaseAppearances*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
      references:
        Febucci.UI.Core.TAnimCore.useDefaultDatabases: 
        Febucci.UI.TextAnimatorSettings: 
    - id: Febucci.UI.Core.TAnimCore.useDefaultStyleSheet
      commentId: F:Febucci.UI.Core.TAnimCore.useDefaultStyleSheet
      language: CSharp
      name:
        CSharp: useDefaultStyleSheet
        VB: useDefaultStyleSheet
      nameWithType:
        CSharp: TAnimCore.useDefaultStyleSheet
        VB: TAnimCore.useDefaultStyleSheet
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.useDefaultStyleSheet
        VB: Febucci.UI.Core.TAnimCore.useDefaultStyleSheet
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: useDefaultStyleSheet
        path: ''
        startLine: 3689
      syntax:
        content:
          CSharp: public bool useDefaultStyleSheet
          VB: Public useDefaultStyleSheet As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TAnimCore.StyleSheet
      commentId: P:Febucci.UI.Core.TAnimCore.StyleSheet
      language: CSharp
      name:
        CSharp: StyleSheet
        VB: StyleSheet
      nameWithType:
        CSharp: TAnimCore.StyleSheet
        VB: TAnimCore.StyleSheet
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.StyleSheet
        VB: Febucci.UI.Core.TAnimCore.StyleSheet
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: StyleSheet
        path: ''
        startLine: 3692
      syntax:
        content:
          CSharp: public StyleSheetScriptable StyleSheet { get; set; }
          VB: Public Property StyleSheet As StyleSheetScriptable
        parameters: []
        return:
          type: StyleSheetScriptable
      overload: Febucci.UI.Core.TAnimCore.StyleSheet*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Febucci.UI.Core.TAnimCore.Behaviors
      commentId: P:Febucci.UI.Core.TAnimCore.Behaviors
      language: CSharp
      name:
        CSharp: Behaviors
        VB: Behaviors
      nameWithType:
        CSharp: TAnimCore.Behaviors
        VB: TAnimCore.Behaviors
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.Behaviors
        VB: Febucci.UI.Core.TAnimCore.Behaviors
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: Behaviors
        path: ''
        startLine: 3710
      summary: "\nAll the behavior effects that are applied to the current text.\n"
      example: []
      syntax:
        content:
          CSharp: public AnimationRegion[] Behaviors { get; set; }
          VB: Public Property Behaviors As AnimationRegion()
        parameters: []
        return:
          type: AnimationRegion[]
      overload: Febucci.UI.Core.TAnimCore.Behaviors*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Febucci.UI.Core.TAnimCore.Appearances
      commentId: P:Febucci.UI.Core.TAnimCore.Appearances
      language: CSharp
      name:
        CSharp: Appearances
        VB: Appearances
      nameWithType:
        CSharp: TAnimCore.Appearances
        VB: TAnimCore.Appearances
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.Appearances
        VB: Febucci.UI.Core.TAnimCore.Appearances
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: Appearances
        path: ''
        startLine: 3720
      summary: "\nAll the appearance effects that are applied to the current text.\n"
      example: []
      syntax:
        content:
          CSharp: public AnimationRegion[] Appearances { get; set; }
          VB: Public Property Appearances As AnimationRegion()
        parameters: []
        return:
          type: AnimationRegion[]
      overload: Febucci.UI.Core.TAnimCore.Appearances*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Febucci.UI.Core.TAnimCore.Disappearances
      commentId: P:Febucci.UI.Core.TAnimCore.Disappearances
      language: CSharp
      name:
        CSharp: Disappearances
        VB: Disappearances
      nameWithType:
        CSharp: TAnimCore.Disappearances
        VB: TAnimCore.Disappearances
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.Disappearances
        VB: Febucci.UI.Core.TAnimCore.Disappearances
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: Disappearances
        path: ''
        startLine: 3730
      summary: "\nAll the disappearance effects that are applied to the current text.\n"
      example: []
      syntax:
        content:
          CSharp: public AnimationRegion[] Disappearances { get; set; }
          VB: Public Property Disappearances As AnimationRegion()
        parameters: []
        return:
          type: AnimationRegion[]
      overload: Febucci.UI.Core.TAnimCore.Disappearances*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Febucci.UI.Core.TAnimCore.TypewriterDisabledRange
      commentId: P:Febucci.UI.Core.TAnimCore.TypewriterDisabledRange
      language: CSharp
      name:
        CSharp: TypewriterDisabledRange
        VB: TypewriterDisabledRange
      nameWithType:
        CSharp: TAnimCore.TypewriterDisabledRange
        VB: TAnimCore.TypewriterDisabledRange
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.TypewriterDisabledRange
        VB: Febucci.UI.Core.TAnimCore.TypewriterDisabledRange
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: TypewriterDisabledRange
        path: ''
        startLine: 3745
      summary: "\nHolds any range where the typewriter should be skipped entirely and show the entire text.\nOnly takes effect if you&apos;re using a <xref href=\"Febucci.UI.Core.TypewriterCore\" data-throw-if-not-resolved=\"false\"></xref>\n"
      remarks: >
        <xref href="Febucci.UI.Core.TAnimCore.IsTypewriterEnabledAtIndex(System.Int32)" data-throw-if-not-resolved="false"></xref>
            P.S. this value is reset every time you set a new text, calculating the &quot;notypewriter&quot; tags in it
      example: []
      syntax:
        content:
          CSharp: public Vector2Int[] TypewriterDisabledRange { get; set; }
          VB: Public Property TypewriterDisabledRange As Vector2Int()
        parameters: []
        return:
          type: Vector2Int[]
      overload: Febucci.UI.Core.TAnimCore.TypewriterDisabledRange*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
      references:
        Febucci.UI.Core.TypewriterCore: 
        Febucci.UI.Core.TAnimCore.IsTypewriterEnabledAtIndex(System.Int32): 
    - id: Febucci.UI.Core.TAnimCore.IsTypewriterEnabledAtIndex(System.Int32)
      commentId: M:Febucci.UI.Core.TAnimCore.IsTypewriterEnabledAtIndex(System.Int32)
      language: CSharp
      name:
        CSharp: IsTypewriterEnabledAtIndex(Int32)
        VB: IsTypewriterEnabledAtIndex(Int32)
      nameWithType:
        CSharp: TAnimCore.IsTypewriterEnabledAtIndex(Int32)
        VB: TAnimCore.IsTypewriterEnabledAtIndex(Int32)
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.IsTypewriterEnabledAtIndex(System.Int32)
        VB: Febucci.UI.Core.TAnimCore.IsTypewriterEnabledAtIndex(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: IsTypewriterEnabledAtIndex
        path: ''
        startLine: 3757
      summary: "\nTrue if the typewriter should calculate a <xref href=\"Febucci.UI.Core.CharacterData\" data-throw-if-not-resolved=\"false\"></xref> appearance or disappearance time.\nCalculated from <xref href=\"Febucci.UI.Core.TAnimCore.TypewriterDisabledRange\" data-throw-if-not-resolved=\"false\"></xref> \n"
      example: []
      syntax:
        content:
          CSharp: public bool IsTypewriterEnabledAtIndex(int index)
          VB: Public Function IsTypewriterEnabledAtIndex(index As Integer) As Boolean
        parameters:
        - id: index
          type: System.Int32
          description: ''
        return:
          type: System.Boolean
          description: ''
      overload: Febucci.UI.Core.TAnimCore.IsTypewriterEnabledAtIndex*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Febucci.UI.Core.CharacterData: 
        Febucci.UI.Core.TAnimCore.TypewriterDisabledRange: 
    - id: Febucci.UI.Core.TAnimCore.Actions
      commentId: P:Febucci.UI.Core.TAnimCore.Actions
      language: CSharp
      name:
        CSharp: Actions
        VB: Actions
      nameWithType:
        CSharp: TAnimCore.Actions
        VB: TAnimCore.Actions
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.Actions
        VB: Febucci.UI.Core.TAnimCore.Actions
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: Actions
        path: ''
        startLine: 3775
      summary: "\nAll the actions that have been parsed from the current text, and that will be used by a <xref href=\"Febucci.UI.Core.TypewriterCore\" data-throw-if-not-resolved=\"false\"></xref> component if present.\n"
      example: []
      syntax:
        content:
          CSharp: public ActionMarker[] Actions { get; set; }
          VB: Public Property Actions As ActionMarker()
        parameters: []
        return:
          type: ActionMarker[]
      overload: Febucci.UI.Core.TAnimCore.Actions*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
      references:
        Febucci.UI.Core.TypewriterCore: 
    - id: Febucci.UI.Core.TAnimCore.DatabaseActions
      commentId: P:Febucci.UI.Core.TAnimCore.DatabaseActions
      language: CSharp
      name:
        CSharp: DatabaseActions
        VB: DatabaseActions
      nameWithType:
        CSharp: TAnimCore.DatabaseActions
        VB: TAnimCore.DatabaseActions
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.DatabaseActions
        VB: Febucci.UI.Core.TAnimCore.DatabaseActions
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: DatabaseActions
        path: ''
        startLine: 3786
      summary: "\nActions Database used by this Text Animator. If <xref href=\"Febucci.UI.Core.TAnimCore.useDefaultDatabases\" data-throw-if-not-resolved=\"false\"></xref> is set to true, this will be the default database from the <xref href=\"Febucci.UI.TextAnimatorSettings\" data-throw-if-not-resolved=\"false\"></xref> asset.\n"
      example: []
      syntax:
        content:
          CSharp: public ActionDatabase DatabaseActions { get; set; }
          VB: Public Property DatabaseActions As ActionDatabase
        parameters: []
        return:
          type: ActionDatabase
      overload: Febucci.UI.Core.TAnimCore.DatabaseActions*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
      references:
        Febucci.UI.Core.TAnimCore.useDefaultDatabases: 
        Febucci.UI.TextAnimatorSettings: 
    - id: Febucci.UI.Core.TAnimCore.Events
      commentId: P:Febucci.UI.Core.TAnimCore.Events
      language: CSharp
      name:
        CSharp: Events
        VB: Events
      nameWithType:
        CSharp: TAnimCore.Events
        VB: TAnimCore.Events
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.Events
        VB: Febucci.UI.Core.TAnimCore.Events
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: Events
        path: ''
        startLine: 3800
      summary: "\nEvents that have been parsed from the current text, and that will be used by a <xref href=\"Febucci.UI.Core.TypewriterCore\" data-throw-if-not-resolved=\"false\"></xref> component if present.\n"
      example: []
      syntax:
        content:
          CSharp: public EventMarker[] Events { get; set; }
          VB: Public Property Events As EventMarker()
        parameters: []
        return:
          type: EventMarker[]
      overload: Febucci.UI.Core.TAnimCore.Events*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
      references:
        Febucci.UI.Core.TypewriterCore: 
    - id: Febucci.UI.Core.TAnimCore.DefaultAppearancesTags
      commentId: P:Febucci.UI.Core.TAnimCore.DefaultAppearancesTags
      language: CSharp
      name:
        CSharp: DefaultAppearancesTags
        VB: DefaultAppearancesTags
      nameWithType:
        CSharp: TAnimCore.DefaultAppearancesTags
        VB: TAnimCore.DefaultAppearancesTags
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.DefaultAppearancesTags
        VB: Febucci.UI.Core.TAnimCore.DefaultAppearancesTags
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: DefaultAppearancesTags
        path: ''
        startLine: 3826
      summary: "\nFallback/Constant tags that will be applied to the entire text, if no other tags are found, based on the <xref href=\"Febucci.UI.Core.TAnimCore.defaultTagsMode\" data-throw-if-not-resolved=\"false\"></xref> value.\n"
      example: []
      syntax:
        content:
          CSharp: public string[] DefaultAppearancesTags { get; set; }
          VB: Public Property DefaultAppearancesTags As String()
        parameters: []
        return:
          type: System.String[]
      overload: Febucci.UI.Core.TAnimCore.DefaultAppearancesTags*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
      references:
        Febucci.UI.Core.TAnimCore.defaultTagsMode: 
    - id: Febucci.UI.Core.TAnimCore.DefaultDisappearancesTags
      commentId: P:Febucci.UI.Core.TAnimCore.DefaultDisappearancesTags
      language: CSharp
      name:
        CSharp: DefaultDisappearancesTags
        VB: DefaultDisappearancesTags
      nameWithType:
        CSharp: TAnimCore.DefaultDisappearancesTags
        VB: TAnimCore.DefaultDisappearancesTags
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.DefaultDisappearancesTags
        VB: Febucci.UI.Core.TAnimCore.DefaultDisappearancesTags
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: DefaultDisappearancesTags
        path: ''
        startLine: 3839
      summary: "\nFallback/Constant tags that will be applied to the entire text, if no other tags are found, based on the <xref href=\"Febucci.UI.Core.TAnimCore.defaultTagsMode\" data-throw-if-not-resolved=\"false\"></xref> value.\n"
      example: []
      syntax:
        content:
          CSharp: public string[] DefaultDisappearancesTags { get; set; }
          VB: Public Property DefaultDisappearancesTags As String()
        parameters: []
        return:
          type: System.String[]
      overload: Febucci.UI.Core.TAnimCore.DefaultDisappearancesTags*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
      references:
        Febucci.UI.Core.TAnimCore.defaultTagsMode: 
    - id: Febucci.UI.Core.TAnimCore.DefaultBehaviorsTags
      commentId: P:Febucci.UI.Core.TAnimCore.DefaultBehaviorsTags
      language: CSharp
      name:
        CSharp: DefaultBehaviorsTags
        VB: DefaultBehaviorsTags
      nameWithType:
        CSharp: TAnimCore.DefaultBehaviorsTags
        VB: TAnimCore.DefaultBehaviorsTags
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.DefaultBehaviorsTags
        VB: Febucci.UI.Core.TAnimCore.DefaultBehaviorsTags
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: DefaultBehaviorsTags
        path: ''
        startLine: 3853
      summary: "\nFallback/Constant tags that will be applied to the entire text, if no other tags are found, based on the <xref href=\"Febucci.UI.Core.TAnimCore.defaultTagsMode\" data-throw-if-not-resolved=\"false\"></xref> value.\n"
      example: []
      syntax:
        content:
          CSharp: public string[] DefaultBehaviorsTags { get; set; }
          VB: Public Property DefaultBehaviorsTags As String()
        parameters: []
        return:
          type: System.String[]
      overload: Febucci.UI.Core.TAnimCore.DefaultBehaviorsTags*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
      references:
        Febucci.UI.Core.TAnimCore.defaultTagsMode: 
    - id: Febucci.UI.Core.TAnimCore.OnInitialized
      commentId: M:Febucci.UI.Core.TAnimCore.OnInitialized
      language: CSharp
      name:
        CSharp: OnInitialized()
        VB: OnInitialized()
      nameWithType:
        CSharp: TAnimCore.OnInitialized()
        VB: TAnimCore.OnInitialized()
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.OnInitialized()
        VB: Febucci.UI.Core.TAnimCore.OnInitialized()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: OnInitialized
        path: ''
        startLine: 3870
      summary: "\nCalled once when the component is initialized.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void OnInitialized()
          VB: Protected Overridable Sub OnInitialized
      overload: Febucci.UI.Core.TAnimCore.OnInitialized*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: Febucci.UI.Core.TAnimCore.GetOriginalTextFromSource
      commentId: M:Febucci.UI.Core.TAnimCore.GetOriginalTextFromSource
      language: CSharp
      name:
        CSharp: GetOriginalTextFromSource()
        VB: GetOriginalTextFromSource()
      nameWithType:
        CSharp: TAnimCore.GetOriginalTextFromSource()
        VB: TAnimCore.GetOriginalTextFromSource()
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.GetOriginalTextFromSource()
        VB: Febucci.UI.Core.TAnimCore.GetOriginalTextFromSource()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: GetOriginalTextFromSource
        path: ''
        startLine: 3875
      syntax:
        content:
          CSharp: public abstract string GetOriginalTextFromSource()
          VB: Public MustOverride Function GetOriginalTextFromSource As String
        return:
          type: System.String
      overload: Febucci.UI.Core.TAnimCore.GetOriginalTextFromSource*
      modifiers:
        CSharp:
        - public
        - abstract
        VB:
        - Public
        - MustOverride
    - id: Febucci.UI.Core.TAnimCore.GetStrippedTextFromSource
      commentId: M:Febucci.UI.Core.TAnimCore.GetStrippedTextFromSource
      language: CSharp
      name:
        CSharp: GetStrippedTextFromSource()
        VB: GetStrippedTextFromSource()
      nameWithType:
        CSharp: TAnimCore.GetStrippedTextFromSource()
        VB: TAnimCore.GetStrippedTextFromSource()
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.GetStrippedTextFromSource()
        VB: Febucci.UI.Core.TAnimCore.GetStrippedTextFromSource()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: GetStrippedTextFromSource
        path: ''
        startLine: 3876
      syntax:
        content:
          CSharp: public abstract string GetStrippedTextFromSource()
          VB: Public MustOverride Function GetStrippedTextFromSource As String
        return:
          type: System.String
      overload: Febucci.UI.Core.TAnimCore.GetStrippedTextFromSource*
      modifiers:
        CSharp:
        - public
        - abstract
        VB:
        - Public
        - MustOverride
    - id: Febucci.UI.Core.TAnimCore.SetTextToSource(System.String)
      commentId: M:Febucci.UI.Core.TAnimCore.SetTextToSource(System.String)
      language: CSharp
      name:
        CSharp: SetTextToSource(String)
        VB: SetTextToSource(String)
      nameWithType:
        CSharp: TAnimCore.SetTextToSource(String)
        VB: TAnimCore.SetTextToSource(String)
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.SetTextToSource(System.String)
        VB: Febucci.UI.Core.TAnimCore.SetTextToSource(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: SetTextToSource
        path: ''
        startLine: 3877
      syntax:
        content:
          CSharp: public abstract void SetTextToSource(string text)
          VB: Public MustOverride Sub SetTextToSource(text As String)
        parameters:
        - id: text
          type: System.String
      overload: Febucci.UI.Core.TAnimCore.SetTextToSource*
      modifiers:
        CSharp:
        - public
        - abstract
        VB:
        - Public
        - MustOverride
    - id: Febucci.UI.Core.TAnimCore.HasChangedText(System.String)
      commentId: M:Febucci.UI.Core.TAnimCore.HasChangedText(System.String)
      language: CSharp
      name:
        CSharp: HasChangedText(String)
        VB: HasChangedText(String)
      nameWithType:
        CSharp: TAnimCore.HasChangedText(String)
        VB: TAnimCore.HasChangedText(String)
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.HasChangedText(System.String)
        VB: Febucci.UI.Core.TAnimCore.HasChangedText(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: HasChangedText
        path: ''
        startLine: 3882
      syntax:
        content:
          CSharp: protected abstract bool HasChangedText(string strippedText)
          VB: Protected MustOverride Function HasChangedText(strippedText As String) As Boolean
        parameters:
        - id: strippedText
          type: System.String
        return:
          type: System.Boolean
      overload: Febucci.UI.Core.TAnimCore.HasChangedText*
      modifiers:
        CSharp:
        - protected
        - abstract
        VB:
        - Protected
        - MustOverride
    - id: Febucci.UI.Core.TAnimCore.HasChangedRenderingSettings
      commentId: M:Febucci.UI.Core.TAnimCore.HasChangedRenderingSettings
      language: CSharp
      name:
        CSharp: HasChangedRenderingSettings()
        VB: HasChangedRenderingSettings()
      nameWithType:
        CSharp: TAnimCore.HasChangedRenderingSettings()
        VB: TAnimCore.HasChangedRenderingSettings()
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.HasChangedRenderingSettings()
        VB: Febucci.UI.Core.TAnimCore.HasChangedRenderingSettings()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: HasChangedRenderingSettings
        path: ''
        startLine: 3883
      syntax:
        content:
          CSharp: protected abstract bool HasChangedRenderingSettings()
          VB: Protected MustOverride Function HasChangedRenderingSettings As Boolean
        return:
          type: System.Boolean
      overload: Febucci.UI.Core.TAnimCore.HasChangedRenderingSettings*
      modifiers:
        CSharp:
        - protected
        - abstract
        VB:
        - Protected
        - MustOverride
    - id: Febucci.UI.Core.TAnimCore.GetCharactersCount
      commentId: M:Febucci.UI.Core.TAnimCore.GetCharactersCount
      language: CSharp
      name:
        CSharp: GetCharactersCount()
        VB: GetCharactersCount()
      nameWithType:
        CSharp: TAnimCore.GetCharactersCount()
        VB: TAnimCore.GetCharactersCount()
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.GetCharactersCount()
        VB: Febucci.UI.Core.TAnimCore.GetCharactersCount()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: GetCharactersCount
        path: ''
        startLine: 3888
      syntax:
        content:
          CSharp: protected abstract int GetCharactersCount()
          VB: Protected MustOverride Function GetCharactersCount As Integer
        return:
          type: System.Int32
      overload: Febucci.UI.Core.TAnimCore.GetCharactersCount*
      modifiers:
        CSharp:
        - protected
        - abstract
        VB:
        - Protected
        - MustOverride
    - id: Febucci.UI.Core.TAnimCore.OnForceMeshUpdate
      commentId: M:Febucci.UI.Core.TAnimCore.OnForceMeshUpdate
      language: CSharp
      name:
        CSharp: OnForceMeshUpdate()
        VB: OnForceMeshUpdate()
      nameWithType:
        CSharp: TAnimCore.OnForceMeshUpdate()
        VB: TAnimCore.OnForceMeshUpdate()
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.OnForceMeshUpdate()
        VB: Febucci.UI.Core.TAnimCore.OnForceMeshUpdate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: OnForceMeshUpdate
        path: ''
        startLine: 3893
      syntax:
        content:
          CSharp: protected abstract void OnForceMeshUpdate()
          VB: Protected MustOverride Sub OnForceMeshUpdate
      overload: Febucci.UI.Core.TAnimCore.OnForceMeshUpdate*
      modifiers:
        CSharp:
        - protected
        - abstract
        VB:
        - Protected
        - MustOverride
    - id: Febucci.UI.Core.TAnimCore.CopyMeshFromSource(Febucci.UI.Core.CharacterData[]@)
      commentId: M:Febucci.UI.Core.TAnimCore.CopyMeshFromSource(Febucci.UI.Core.CharacterData[]@)
      language: CSharp
      name:
        CSharp: CopyMeshFromSource(ref CharacterData[])
        VB: CopyMeshFromSource(ByRef CharacterData())
      nameWithType:
        CSharp: TAnimCore.CopyMeshFromSource(ref CharacterData[])
        VB: TAnimCore.CopyMeshFromSource(ByRef CharacterData())
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.CopyMeshFromSource(ref Febucci.UI.Core.CharacterData[])
        VB: Febucci.UI.Core.TAnimCore.CopyMeshFromSource(ByRef Febucci.UI.Core.CharacterData())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: CopyMeshFromSource
        path: ''
        startLine: 3894
      syntax:
        content:
          CSharp: protected abstract void CopyMeshFromSource(ref CharacterData[] characters)
          VB: Protected MustOverride Sub CopyMeshFromSource(ByRef characters As CharacterData())
        parameters:
        - id: characters
          type: Febucci.UI.Core.CharacterData[]
      overload: Febucci.UI.Core.TAnimCore.CopyMeshFromSource*
      modifiers:
        CSharp:
        - protected
        - abstract
        VB:
        - Protected
        - MustOverride
    - id: Febucci.UI.Core.TAnimCore.PasteMeshToSource(Febucci.UI.Core.CharacterData[])
      commentId: M:Febucci.UI.Core.TAnimCore.PasteMeshToSource(Febucci.UI.Core.CharacterData[])
      language: CSharp
      name:
        CSharp: PasteMeshToSource(CharacterData[])
        VB: PasteMeshToSource(CharacterData())
      nameWithType:
        CSharp: TAnimCore.PasteMeshToSource(CharacterData[])
        VB: TAnimCore.PasteMeshToSource(CharacterData())
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.PasteMeshToSource(Febucci.UI.Core.CharacterData[])
        VB: Febucci.UI.Core.TAnimCore.PasteMeshToSource(Febucci.UI.Core.CharacterData())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: PasteMeshToSource
        path: ''
        startLine: 3895
      syntax:
        content:
          CSharp: protected abstract void PasteMeshToSource(CharacterData[] characters)
          VB: Protected MustOverride Sub PasteMeshToSource(characters As CharacterData())
        parameters:
        - id: characters
          type: Febucci.UI.Core.CharacterData[]
      overload: Febucci.UI.Core.TAnimCore.PasteMeshToSource*
      modifiers:
        CSharp:
        - protected
        - abstract
        VB:
        - Protected
        - MustOverride
    - id: Febucci.UI.Core.TAnimCore.time
      commentId: F:Febucci.UI.Core.TAnimCore.time
      language: CSharp
      name:
        CSharp: time
        VB: time
      nameWithType:
        CSharp: TAnimCore.time
        VB: TAnimCore.time
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.time
        VB: Febucci.UI.Core.TAnimCore.time
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: time
        path: ''
        startLine: 3950
      summary: "\nContains TextAnimator&apos;s current time values.\n"
      example: []
      syntax:
        content:
          CSharp: public TimeData time
          VB: Public time As TimeData
        return:
          type: Febucci.UI.TimeData
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TAnimCore.GetFirstCharacterIndexInsidePage
      commentId: M:Febucci.UI.Core.TAnimCore.GetFirstCharacterIndexInsidePage
      language: CSharp
      name:
        CSharp: GetFirstCharacterIndexInsidePage()
        VB: GetFirstCharacterIndexInsidePage()
      nameWithType:
        CSharp: TAnimCore.GetFirstCharacterIndexInsidePage()
        VB: TAnimCore.GetFirstCharacterIndexInsidePage()
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.GetFirstCharacterIndexInsidePage()
        VB: Febucci.UI.Core.TAnimCore.GetFirstCharacterIndexInsidePage()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: GetFirstCharacterIndexInsidePage
        path: ''
        startLine: 3960
      summary: "\nReturns the first character index inside the page, in case the text has an overflow mode set up and the text is paginated.\n"
      example:
      - "\nIf each page has 5 characters, and we&apos;re on page 2, then this method would return 5 as the starting index of the text.\n"
      syntax:
        content:
          CSharp: public virtual int GetFirstCharacterIndexInsidePage()
          VB: Public Overridable Function GetFirstCharacterIndexInsidePage As Integer
        return:
          type: System.Int32
          description: ''
      overload: Febucci.UI.Core.TAnimCore.GetFirstCharacterIndexInsidePage*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: Febucci.UI.Core.TAnimCore.GetRenderedCharactersCountInsidePage
      commentId: M:Febucci.UI.Core.TAnimCore.GetRenderedCharactersCountInsidePage
      language: CSharp
      name:
        CSharp: GetRenderedCharactersCountInsidePage()
        VB: GetRenderedCharactersCountInsidePage()
      nameWithType:
        CSharp: TAnimCore.GetRenderedCharactersCountInsidePage()
        VB: TAnimCore.GetRenderedCharactersCountInsidePage()
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.GetRenderedCharactersCountInsidePage()
        VB: Febucci.UI.Core.TAnimCore.GetRenderedCharactersCountInsidePage()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: GetRenderedCharactersCountInsidePage
        path: ''
        startLine: 3965
      summary: "\nReturns the number of characters that fit inside the page, in case the text has an overflow mode set up and the text is paginated. (otherwise simply returns the characters count)\n"
      example: []
      syntax:
        content:
          CSharp: public virtual int GetRenderedCharactersCountInsidePage()
          VB: Public Overridable Function GetRenderedCharactersCountInsidePage As Integer
        return:
          type: System.Int32
          description: ''
      overload: Febucci.UI.Core.TAnimCore.GetRenderedCharactersCountInsidePage*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: Febucci.UI.Core.TAnimCore.defaultTagsMode
      commentId: F:Febucci.UI.Core.TAnimCore.defaultTagsMode
      language: CSharp
      name:
        CSharp: defaultTagsMode
        VB: defaultTagsMode
      nameWithType:
        CSharp: TAnimCore.defaultTagsMode
        VB: TAnimCore.defaultTagsMode
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.defaultTagsMode
        VB: Febucci.UI.Core.TAnimCore.defaultTagsMode
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: defaultTagsMode
        path: ''
        startLine: 4003
      summary: "\nControls how default tags should be applied.\\n&quot;Fallback&quot; will apply the effects only to characters that don&apos;t have any.\\n&quot;Constant&quot; will apply the default effects to all the characters, even if they already have other tags via text.\n"
      example: []
      syntax:
        content:
          CSharp: public TAnimCore.DefaultTagsMode defaultTagsMode
          VB: Public defaultTagsMode As TAnimCore.DefaultTagsMode
        return:
          type: Febucci.UI.Core.TAnimCore.DefaultTagsMode
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TAnimCore.GetExtraParsers
      commentId: M:Febucci.UI.Core.TAnimCore.GetExtraParsers
      language: CSharp
      name:
        CSharp: GetExtraParsers()
        VB: GetExtraParsers()
      nameWithType:
        CSharp: TAnimCore.GetExtraParsers()
        VB: TAnimCore.GetExtraParsers()
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.GetExtraParsers()
        VB: Febucci.UI.Core.TAnimCore.GetExtraParsers()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: GetExtraParsers
        path: ''
        startLine: 4007
      syntax:
        content:
          CSharp: protected virtual TagParserBase[] GetExtraParsers()
          VB: Protected Overridable Function GetExtraParsers As TagParserBase()
        return:
          type: TagParserBase[]
      overload: Febucci.UI.Core.TAnimCore.GetExtraParsers*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: Febucci.UI.Core.TAnimCore.SetText(System.String)
      commentId: M:Febucci.UI.Core.TAnimCore.SetText(System.String)
      language: CSharp
      name:
        CSharp: SetText(String)
        VB: SetText(String)
      nameWithType:
        CSharp: TAnimCore.SetText(String)
        VB: TAnimCore.SetText(String)
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.SetText(System.String)
        VB: Febucci.UI.Core.TAnimCore.SetText(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: SetText
        path: ''
        startLine: 4375
      summary: "\nSets the text to Text Animator, parsing its rich text tags.\n"
      remarks: 'This method shows the text instantly. To control if it should be hidden instead, please see <xref href="Febucci.UI.Core.TAnimCore.SetText(System.String%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>. '
      example: []
      syntax:
        content:
          CSharp: public void SetText(string text)
          VB: Public Sub SetText(text As String)
        parameters:
        - id: text
          type: System.String
          description: Full text that you want to paste, including rich text tags.
      overload: Febucci.UI.Core.TAnimCore.SetText*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Febucci.UI.Core.TAnimCore.SetText(System.String,System.Boolean): 
    - id: Febucci.UI.Core.TAnimCore.SwapText(System.String)
      commentId: M:Febucci.UI.Core.TAnimCore.SwapText(System.String)
      language: CSharp
      name:
        CSharp: SwapText(String)
        VB: SwapText(String)
      nameWithType:
        CSharp: TAnimCore.SwapText(String)
        VB: TAnimCore.SwapText(String)
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.SwapText(System.String)
        VB: Febucci.UI.Core.TAnimCore.SwapText(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: SwapText
        path: ''
        startLine: 4381
      summary: "\nChanges the text to Text Animator with a new one, keeping the current visibility\n"
      example: []
      syntax:
        content:
          CSharp: public void SwapText(string text)
          VB: Public Sub SwapText(text As String)
        parameters:
        - id: text
          type: System.String
          description: ''
      overload: Febucci.UI.Core.TAnimCore.SwapText*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TAnimCore.SetText(System.String,System.Boolean)
      commentId: M:Febucci.UI.Core.TAnimCore.SetText(System.String,System.Boolean)
      language: CSharp
      name:
        CSharp: SetText(String, Boolean)
        VB: SetText(String, Boolean)
      nameWithType:
        CSharp: TAnimCore.SetText(String, Boolean)
        VB: TAnimCore.SetText(String, Boolean)
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.SetText(System.String, System.Boolean)
        VB: Febucci.UI.Core.TAnimCore.SetText(System.String, System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: SetText
        path: ''
        startLine: 4393
      summary: "\nSets the text to Text Animator, parsing its rich text tags.\n"
      example: []
      syntax:
        content:
          CSharp: public void SetText(string text, bool hideText)
          VB: Public Sub SetText(text As String, hideText As Boolean)
        parameters:
        - id: text
          type: System.String
          description: ''
        - id: hideText
          type: System.Boolean
          description: ''
      overload: Febucci.UI.Core.TAnimCore.SetText*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TAnimCore.AppendText(System.String,System.Boolean)
      commentId: M:Febucci.UI.Core.TAnimCore.AppendText(System.String,System.Boolean)
      language: CSharp
      name:
        CSharp: AppendText(String, Boolean)
        VB: AppendText(String, Boolean)
      nameWithType:
        CSharp: TAnimCore.AppendText(String, Boolean)
        VB: TAnimCore.AppendText(String, Boolean)
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.AppendText(System.String, System.Boolean)
        VB: Febucci.UI.Core.TAnimCore.AppendText(System.String, System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: AppendText
        path: ''
        startLine: 4401
      summary: "\nAdds text to the already existing one, parsing its rich text tags.\n"
      example: []
      syntax:
        content:
          CSharp: public void AppendText(string appendedText, bool hideText = false)
          VB: Public Sub AppendText(appendedText As String, hideText As Boolean = False)
        parameters:
        - id: appendedText
          type: System.String
          description: New text that you want to append
        - id: hideText
          type: System.Boolean
          description: ''
      overload: Febucci.UI.Core.TAnimCore.AppendText*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TAnimCore.SetVisibilityChar(System.Int32,System.Boolean,System.Boolean)
      commentId: M:Febucci.UI.Core.TAnimCore.SetVisibilityChar(System.Int32,System.Boolean,System.Boolean)
      language: CSharp
      name:
        CSharp: SetVisibilityChar(Int32, Boolean, Boolean)
        VB: SetVisibilityChar(Int32, Boolean, Boolean)
      nameWithType:
        CSharp: TAnimCore.SetVisibilityChar(Int32, Boolean, Boolean)
        VB: TAnimCore.SetVisibilityChar(Int32, Boolean, Boolean)
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.SetVisibilityChar(System.Int32, System.Boolean, System.Boolean)
        VB: Febucci.UI.Core.TAnimCore.SetVisibilityChar(System.Int32, System.Boolean, System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: SetVisibilityChar
        path: ''
        startLine: 4450
      summary: "\nSets a character visibility.\n"
      example: []
      syntax:
        content:
          CSharp: public void SetVisibilityChar(int index, bool isVisible, bool canPlayEffects = true)
          VB: Public Sub SetVisibilityChar(index As Integer, isVisible As Boolean, canPlayEffects As Boolean = True)
        parameters:
        - id: index
          type: System.Int32
          description: Character&apos;s index. See <xref href="Febucci.UI.Core.TAnimCore.CharactersCount" data-throw-if-not-resolved="false"></xref> and the <xref href="Febucci.UI.Core.TAnimCore.Characters" data-throw-if-not-resolved="false"></xref> array.
        - id: isVisible
          type: System.Boolean
          description: Controls if the character should be visible
        - id: canPlayEffects
          type: System.Boolean
          description: ''
      overload: Febucci.UI.Core.TAnimCore.SetVisibilityChar*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Febucci.UI.Core.TAnimCore.CharactersCount: 
        Febucci.UI.Core.TAnimCore.Characters: 
    - id: Febucci.UI.Core.TAnimCore.SetVisibilityWord(System.Int32,System.Boolean,System.Boolean)
      commentId: M:Febucci.UI.Core.TAnimCore.SetVisibilityWord(System.Int32,System.Boolean,System.Boolean)
      language: CSharp
      name:
        CSharp: SetVisibilityWord(Int32, Boolean, Boolean)
        VB: SetVisibilityWord(Int32, Boolean, Boolean)
      nameWithType:
        CSharp: TAnimCore.SetVisibilityWord(Int32, Boolean, Boolean)
        VB: TAnimCore.SetVisibilityWord(Int32, Boolean, Boolean)
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.SetVisibilityWord(System.Int32, System.Boolean, System.Boolean)
        VB: Febucci.UI.Core.TAnimCore.SetVisibilityWord(System.Int32, System.Boolean, System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: SetVisibilityWord
        path: ''
        startLine: 4484
      summary: "\nSets a word visibility.\n"
      example: []
      syntax:
        content:
          CSharp: public void SetVisibilityWord(int index, bool isVisible, bool canPlayEffects = true)
          VB: Public Sub SetVisibilityWord(index As Integer, isVisible As Boolean, canPlayEffects As Boolean = True)
        parameters:
        - id: index
          type: System.Int32
          description: Word&apos;s index. See <xref href="Febucci.UI.Core.TAnimCore.WordsCount" data-throw-if-not-resolved="false"></xref> and the <xref href="Febucci.UI.Core.TAnimCore.Words" data-throw-if-not-resolved="false"></xref> array.
        - id: isVisible
          type: System.Boolean
          description: Controls if the word should be visible
        - id: canPlayEffects
          type: System.Boolean
          description: ''
      overload: Febucci.UI.Core.TAnimCore.SetVisibilityWord*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Febucci.UI.Core.TAnimCore.WordsCount: 
        Febucci.UI.Core.TAnimCore.Words: 
    - id: Febucci.UI.Core.TAnimCore.SetVisibilityEntireText(System.Boolean,System.Boolean)
      commentId: M:Febucci.UI.Core.TAnimCore.SetVisibilityEntireText(System.Boolean,System.Boolean)
      language: CSharp
      name:
        CSharp: SetVisibilityEntireText(Boolean, Boolean)
        VB: SetVisibilityEntireText(Boolean, Boolean)
      nameWithType:
        CSharp: TAnimCore.SetVisibilityEntireText(Boolean, Boolean)
        VB: TAnimCore.SetVisibilityEntireText(Boolean, Boolean)
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.SetVisibilityEntireText(System.Boolean, System.Boolean)
        VB: Febucci.UI.Core.TAnimCore.SetVisibilityEntireText(System.Boolean, System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: SetVisibilityEntireText
        path: ''
        startLine: 4502
      summary: "\nSets the visibility of the entire text, also allowing to play or skip effects.\n"
      example: []
      syntax:
        content:
          CSharp: public void SetVisibilityEntireText(bool isVisible, bool canPlayEffects = true)
          VB: Public Sub SetVisibilityEntireText(isVisible As Boolean, canPlayEffects As Boolean = True)
        parameters:
        - id: isVisible
          type: System.Boolean
          description: ''
        - id: canPlayEffects
          type: System.Boolean
          description: ''
      overload: Febucci.UI.Core.TAnimCore.SetVisibilityEntireText*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TAnimCore.firstVisibleCharacter
      commentId: P:Febucci.UI.Core.TAnimCore.firstVisibleCharacter
      language: CSharp
      name:
        CSharp: firstVisibleCharacter
        VB: firstVisibleCharacter
      nameWithType:
        CSharp: TAnimCore.firstVisibleCharacter
        VB: TAnimCore.firstVisibleCharacter
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.firstVisibleCharacter
        VB: Febucci.UI.Core.TAnimCore.firstVisibleCharacter
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: firstVisibleCharacter
        path: ''
        startLine: 4520
      summary: "\nHandles the very first character allowed to be visible in the text.\n"
      remarks: "\nBe aware that in order to visible, a character also needs to also have its own &quot;visible&quot; flag set to true. See <xref href=\"Febucci.UI.Core.TAnimCore.SetVisibilityChar(System.Int32%2cSystem.Boolean%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Febucci.UI.Core.CharacterData.isVisible\" data-throw-if-not-resolved=\"false\"></xref>\n"
      example: []
      syntax:
        content:
          CSharp: public int firstVisibleCharacter { get; set; }
          VB: Public Property firstVisibleCharacter As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Febucci.UI.Core.TAnimCore.firstVisibleCharacter*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
      references:
        Febucci.UI.Core.TAnimCore.SetVisibilityChar(System.Int32,System.Boolean,System.Boolean): 
        Febucci.UI.Core.CharacterData.isVisible: 
    - id: Febucci.UI.Core.TAnimCore.maxVisibleCharacters
      commentId: P:Febucci.UI.Core.TAnimCore.maxVisibleCharacters
      language: CSharp
      name:
        CSharp: maxVisibleCharacters
        VB: maxVisibleCharacters
      nameWithType:
        CSharp: TAnimCore.maxVisibleCharacters
        VB: TAnimCore.maxVisibleCharacters
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.maxVisibleCharacters
        VB: Febucci.UI.Core.TAnimCore.maxVisibleCharacters
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: maxVisibleCharacters
        path: ''
        startLine: 4533
      summary: "\nHandles the very last character allowed to be visible in the text.\n"
      remarks: "\nBe aware that in order to visible, a character also needs to also have its own &quot;visible&quot; flag set to true. See <xref href=\"Febucci.UI.Core.TAnimCore.SetVisibilityChar(System.Int32%2cSystem.Boolean%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Febucci.UI.Core.CharacterData.isVisible\" data-throw-if-not-resolved=\"false\"></xref>\n"
      example: []
      syntax:
        content:
          CSharp: public int maxVisibleCharacters { get; set; }
          VB: Public Property maxVisibleCharacters As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Febucci.UI.Core.TAnimCore.maxVisibleCharacters*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
      references:
        Febucci.UI.Core.TAnimCore.SetVisibilityChar(System.Int32,System.Boolean,System.Boolean): 
        Febucci.UI.Core.CharacterData.isVisible: 
    - id: Febucci.UI.Core.TAnimCore.IsReady
      commentId: M:Febucci.UI.Core.TAnimCore.IsReady
      language: CSharp
      name:
        CSharp: IsReady()
        VB: IsReady()
      nameWithType:
        CSharp: TAnimCore.IsReady()
        VB: TAnimCore.IsReady()
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.IsReady()
        VB: Febucci.UI.Core.TAnimCore.IsReady()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: IsReady
        path: ''
        startLine: 4581
      syntax:
        content:
          CSharp: protected abstract bool IsReady()
          VB: Protected MustOverride Function IsReady As Boolean
        return:
          type: System.Boolean
      overload: Febucci.UI.Core.TAnimCore.IsReady*
      modifiers:
        CSharp:
        - protected
        - abstract
        VB:
        - Protected
        - MustOverride
    - id: Febucci.UI.Core.TAnimCore.Animate(System.Single)
      commentId: M:Febucci.UI.Core.TAnimCore.Animate(System.Single)
      language: CSharp
      name:
        CSharp: Animate(Single)
        VB: Animate(Single)
      nameWithType:
        CSharp: TAnimCore.Animate(Single)
        VB: TAnimCore.Animate(Single)
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.Animate(System.Single)
        VB: Febucci.UI.Core.TAnimCore.Animate(System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: Animate
        path: ''
        startLine: 4590
      summary: "\nProceeds the text animation with the given deltaTime value.\n"
      example:
      - "\nYou could use this if <xref href=\"Febucci.UI.Core.TAnimCore.animationLoop\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"Febucci.UI.AnimationLoop.Script\" data-throw-if-not-resolved=\"false\"></xref> and you want to control when to animate the text.\n"
      syntax:
        content:
          CSharp: public void Animate(float deltaTime)
          VB: Public Sub Animate(deltaTime As Single)
        parameters:
        - id: deltaTime
          type: System.Single
          description: ''
      overload: Febucci.UI.Core.TAnimCore.Animate*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Febucci.UI.Core.TAnimCore.animationLoop: 
        Febucci.UI.AnimationLoop.Script: 
    - id: Febucci.UI.Core.TAnimCore.ScheduleMeshRefresh
      commentId: M:Febucci.UI.Core.TAnimCore.ScheduleMeshRefresh
      language: CSharp
      name:
        CSharp: ScheduleMeshRefresh()
        VB: ScheduleMeshRefresh()
      nameWithType:
        CSharp: TAnimCore.ScheduleMeshRefresh()
        VB: TAnimCore.ScheduleMeshRefresh()
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.ScheduleMeshRefresh()
        VB: Febucci.UI.Core.TAnimCore.ScheduleMeshRefresh()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: ScheduleMeshRefresh
        path: ''
        startLine: 4704
      summary: "\nSchedules that a mesh refresh is required as soon as possible, which will be applied before the next animation loop starts. \n"
      example: []
      syntax:
        content:
          CSharp: public void ScheduleMeshRefresh()
          VB: Public Sub ScheduleMeshRefresh
      overload: Febucci.UI.Core.TAnimCore.ScheduleMeshRefresh*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TAnimCore.ForceDatabaseRefresh
      commentId: M:Febucci.UI.Core.TAnimCore.ForceDatabaseRefresh
      language: CSharp
      name:
        CSharp: ForceDatabaseRefresh()
        VB: ForceDatabaseRefresh()
      nameWithType:
        CSharp: TAnimCore.ForceDatabaseRefresh()
        VB: TAnimCore.ForceDatabaseRefresh()
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.ForceDatabaseRefresh()
        VB: Febucci.UI.Core.TAnimCore.ForceDatabaseRefresh()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: ForceDatabaseRefresh
        path: ''
        startLine: 4705
      syntax:
        content:
          CSharp: public void ForceDatabaseRefresh()
          VB: Public Sub ForceDatabaseRefresh
      overload: Febucci.UI.Core.TAnimCore.ForceDatabaseRefresh*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TAnimCore.SetBehaviorsActive(System.Boolean)
      commentId: M:Febucci.UI.Core.TAnimCore.SetBehaviorsActive(System.Boolean)
      language: CSharp
      name:
        CSharp: SetBehaviorsActive(Boolean)
        VB: SetBehaviorsActive(Boolean)
      nameWithType:
        CSharp: TAnimCore.SetBehaviorsActive(Boolean)
        VB: TAnimCore.SetBehaviorsActive(Boolean)
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.SetBehaviorsActive(System.Boolean)
        VB: Febucci.UI.Core.TAnimCore.SetBehaviorsActive(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: SetBehaviorsActive
        path: ''
        startLine: 4720
      summary: "\nEnables or disables behavior effects animation *LOCALLY* on this Text Animator component.\nTo change this globally, see <xref href=\"Febucci.UI.TextAnimatorSettings.SetBehaviorsActive(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>\n"
      example: []
      syntax:
        content:
          CSharp: public void SetBehaviorsActive(bool isCategoryEnabled)
          VB: Public Sub SetBehaviorsActive(isCategoryEnabled As Boolean)
        parameters:
        - id: isCategoryEnabled
          type: System.Boolean
          description: ''
      overload: Febucci.UI.Core.TAnimCore.SetBehaviorsActive*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Febucci.UI.TextAnimatorSettings.SetBehaviorsActive(System.Boolean): 
    - id: Febucci.UI.Core.TAnimCore.SetAppearancesActive(System.Boolean)
      commentId: M:Febucci.UI.Core.TAnimCore.SetAppearancesActive(System.Boolean)
      language: CSharp
      name:
        CSharp: SetAppearancesActive(Boolean)
        VB: SetAppearancesActive(Boolean)
      nameWithType:
        CSharp: TAnimCore.SetAppearancesActive(Boolean)
        VB: TAnimCore.SetAppearancesActive(Boolean)
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.SetAppearancesActive(System.Boolean)
        VB: Febucci.UI.Core.TAnimCore.SetAppearancesActive(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: SetAppearancesActive
        path: ''
        startLine: 4727
      summary: "\nEnables or disables appearance effects animation *LOCALLY* on this Text Animator component.\nTo change this globally, see <xref href=\"Febucci.UI.TextAnimatorSettings.SetAppearancesActive(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>\n"
      example: []
      syntax:
        content:
          CSharp: public void SetAppearancesActive(bool isCategoryEnabled)
          VB: Public Sub SetAppearancesActive(isCategoryEnabled As Boolean)
        parameters:
        - id: isCategoryEnabled
          type: System.Boolean
          description: ''
      overload: Febucci.UI.Core.TAnimCore.SetAppearancesActive*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Febucci.UI.TextAnimatorSettings.SetAppearancesActive(System.Boolean): 
    - id: Febucci.UI.Core.TAnimCore.OnEnable
      commentId: M:Febucci.UI.Core.TAnimCore.OnEnable
      language: CSharp
      name:
        CSharp: OnEnable()
        VB: OnEnable()
      nameWithType:
        CSharp: TAnimCore.OnEnable()
        VB: TAnimCore.OnEnable()
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.OnEnable()
        VB: Febucci.UI.Core.TAnimCore.OnEnable()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: OnEnable
        path: ''
        startLine: 4731
      syntax:
        content:
          CSharp: protected virtual void OnEnable()
          VB: Protected Overridable Sub OnEnable
      overload: Febucci.UI.Core.TAnimCore.OnEnable*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: Febucci.UI.Core.TAnimCore.ResetState
      commentId: M:Febucci.UI.Core.TAnimCore.ResetState
      language: CSharp
      name:
        CSharp: ResetState()
        VB: ResetState()
      nameWithType:
        CSharp: TAnimCore.ResetState()
        VB: TAnimCore.ResetState()
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.ResetState()
        VB: Febucci.UI.Core.TAnimCore.ResetState()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: ResetState
        path: ''
        startLine: 4738
      syntax:
        content:
          CSharp: public void ResetState()
          VB: Public Sub ResetState
      overload: Febucci.UI.Core.TAnimCore.ResetState*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TAnimCore.EnableAllEffects(System.Boolean)
      commentId: M:Febucci.UI.Core.TAnimCore.EnableAllEffects(System.Boolean)
      language: CSharp
      name:
        CSharp: EnableAllEffects(Boolean)
        VB: EnableAllEffects(Boolean)
      nameWithType:
        CSharp: TAnimCore.EnableAllEffects(Boolean)
        VB: TAnimCore.EnableAllEffects(Boolean)
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.EnableAllEffects(System.Boolean)
        VB: Febucci.UI.Core.TAnimCore.EnableAllEffects(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: EnableAllEffects
        path: ''
        startLine: 4754
      syntax:
        content:
          CSharp: public static void EnableAllEffects(bool enabled)
          VB: Public Shared Sub EnableAllEffects(enabled As Boolean)
        parameters:
        - id: enabled
          type: System.Boolean
      overload: Febucci.UI.Core.TAnimCore.EnableAllEffects*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Febucci.UI.Core.TAnimCore.EnableAppearances(System.Boolean)
      commentId: M:Febucci.UI.Core.TAnimCore.EnableAppearances(System.Boolean)
      language: CSharp
      name:
        CSharp: EnableAppearances(Boolean)
        VB: EnableAppearances(Boolean)
      nameWithType:
        CSharp: TAnimCore.EnableAppearances(Boolean)
        VB: TAnimCore.EnableAppearances(Boolean)
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.EnableAppearances(System.Boolean)
        VB: Febucci.UI.Core.TAnimCore.EnableAppearances(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: EnableAppearances
        path: ''
        startLine: 4757
      syntax:
        content:
          CSharp: public static void EnableAppearances(bool enabled)
          VB: Public Shared Sub EnableAppearances(enabled As Boolean)
        parameters:
        - id: enabled
          type: System.Boolean
      overload: Febucci.UI.Core.TAnimCore.EnableAppearances*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Febucci.UI.Core.TAnimCore.EnableBehaviors(System.Boolean)
      commentId: M:Febucci.UI.Core.TAnimCore.EnableBehaviors(System.Boolean)
      language: CSharp
      name:
        CSharp: EnableBehaviors(Boolean)
        VB: EnableBehaviors(Boolean)
      nameWithType:
        CSharp: TAnimCore.EnableBehaviors(Boolean)
        VB: TAnimCore.EnableBehaviors(Boolean)
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.EnableBehaviors(System.Boolean)
        VB: Febucci.UI.Core.TAnimCore.EnableBehaviors(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: EnableBehaviors
        path: ''
        startLine: 4760
      syntax:
        content:
          CSharp: public static void EnableBehaviors(bool enabled)
          VB: Public Shared Sub EnableBehaviors(enabled As Boolean)
        parameters:
        - id: enabled
          type: System.Boolean
      overload: Febucci.UI.Core.TAnimCore.EnableBehaviors*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Febucci.UI.Core.TAnimCore.EnableAppearancesLocally(System.Boolean)
      commentId: M:Febucci.UI.Core.TAnimCore.EnableAppearancesLocally(System.Boolean)
      language: CSharp
      name:
        CSharp: EnableAppearancesLocally(Boolean)
        VB: EnableAppearancesLocally(Boolean)
      nameWithType:
        CSharp: TAnimCore.EnableAppearancesLocally(Boolean)
        VB: TAnimCore.EnableAppearancesLocally(Boolean)
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.EnableAppearancesLocally(System.Boolean)
        VB: Febucci.UI.Core.TAnimCore.EnableAppearancesLocally(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: EnableAppearancesLocally
        path: ''
        startLine: 4764
      syntax:
        content:
          CSharp: public void EnableAppearancesLocally(bool value)
          VB: Public Sub EnableAppearancesLocally(value As Boolean)
        parameters:
        - id: value
          type: System.Boolean
      overload: Febucci.UI.Core.TAnimCore.EnableAppearancesLocally*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TAnimCore.EnableBehaviorsLocally(System.Boolean)
      commentId: M:Febucci.UI.Core.TAnimCore.EnableBehaviorsLocally(System.Boolean)
      language: CSharp
      name:
        CSharp: EnableBehaviorsLocally(Boolean)
        VB: EnableBehaviorsLocally(Boolean)
      nameWithType:
        CSharp: TAnimCore.EnableBehaviorsLocally(Boolean)
        VB: TAnimCore.EnableBehaviorsLocally(Boolean)
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.EnableBehaviorsLocally(System.Boolean)
        VB: Febucci.UI.Core.TAnimCore.EnableBehaviorsLocally(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: EnableBehaviorsLocally
        path: ''
        startLine: 4767
      syntax:
        content:
          CSharp: public void EnableBehaviorsLocally(bool value)
          VB: Public Sub EnableBehaviorsLocally(value As Boolean)
        parameters:
        - id: value
          type: System.Boolean
      overload: Febucci.UI.Core.TAnimCore.EnableBehaviorsLocally*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TAnimCore.ShowAllCharacters(System.Boolean)
      commentId: M:Febucci.UI.Core.TAnimCore.ShowAllCharacters(System.Boolean)
      language: CSharp
      name:
        CSharp: ShowAllCharacters(Boolean)
        VB: ShowAllCharacters(Boolean)
      nameWithType:
        CSharp: TAnimCore.ShowAllCharacters(Boolean)
        VB: TAnimCore.ShowAllCharacters(Boolean)
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.ShowAllCharacters(System.Boolean)
        VB: Febucci.UI.Core.TAnimCore.ShowAllCharacters(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: ShowAllCharacters
        path: ''
        startLine: 4775
      summary: "\nTurns all characters visible at the end of the frame (i.e. &quot;a typewriter skip&quot;)\n"
      example: []
      syntax:
        content:
          CSharp: >-
            [Obsolete("Use SetVisibilityEntireText instead")]

            public void ShowAllCharacters(bool skipAppearanceEffects)
          VB: >-
            <Obsolete("Use SetVisibilityEntireText instead")>

            Public Sub ShowAllCharacters(skipAppearanceEffects As Boolean)
        parameters:
        - id: skipAppearanceEffects
          type: System.Boolean
          description: Set this to true if you want all letters to appear instantly (without any appearance effect)
      overload: Febucci.UI.Core.TAnimCore.ShowAllCharacters*
      attributes:
      - type: System.ObsoleteAttribute
        ctor: System.ObsoleteAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Use SetVisibilityEntireText instead
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TAnimCore.UpdateEffects
      commentId: M:Febucci.UI.Core.TAnimCore.UpdateEffects
      language: CSharp
      name:
        CSharp: UpdateEffects()
        VB: UpdateEffects()
      nameWithType:
        CSharp: TAnimCore.UpdateEffects()
        VB: TAnimCore.UpdateEffects()
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.UpdateEffects()
        VB: Febucci.UI.Core.TAnimCore.UpdateEffects()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: UpdateEffects
        path: ''
        startLine: 4778
      syntax:
        content:
          CSharp: >-
            [Obsolete("Use 'Animate' instead.")]

            public void UpdateEffects()
          VB: >-
            <Obsolete("Use 'Animate' instead.")>

            Public Sub UpdateEffects
      overload: Febucci.UI.Core.TAnimCore.UpdateEffects*
      attributes:
      - type: System.ObsoleteAttribute
        ctor: System.ObsoleteAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Use 'Animate' instead.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TAnimCore.TriggerRemainingEvents
      commentId: M:Febucci.UI.Core.TAnimCore.TriggerRemainingEvents
      language: CSharp
      name:
        CSharp: TriggerRemainingEvents()
        VB: TriggerRemainingEvents()
      nameWithType:
        CSharp: TAnimCore.TriggerRemainingEvents()
        VB: TAnimCore.TriggerRemainingEvents()
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.TriggerRemainingEvents()
        VB: Febucci.UI.Core.TAnimCore.TriggerRemainingEvents()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: TriggerRemainingEvents
        path: ''
        startLine: 4781
      syntax:
        content:
          CSharp: >-
            [Obsolete("Events are not tied to TextAnimators anymore, but to their Typewriters. Please invoke 'TriggerRemainingEvents' on the Typewriter component instead.")]

            public void TriggerRemainingEvents()
          VB: >-
            <Obsolete("Events are not tied to TextAnimators anymore, but to their Typewriters. Please invoke 'TriggerRemainingEvents' on the Typewriter component instead.")>

            Public Sub TriggerRemainingEvents
      overload: Febucci.UI.Core.TAnimCore.TriggerRemainingEvents*
      attributes:
      - type: System.ObsoleteAttribute
        ctor: System.ObsoleteAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Events are not tied to TextAnimators anymore, but to their Typewriters. Please invoke 'TriggerRemainingEvents' on the Typewriter component instead.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TAnimCore.TriggerVisibleEvents
      commentId: M:Febucci.UI.Core.TAnimCore.TriggerVisibleEvents
      language: CSharp
      name:
        CSharp: TriggerVisibleEvents()
        VB: TriggerVisibleEvents()
      nameWithType:
        CSharp: TAnimCore.TriggerVisibleEvents()
        VB: TAnimCore.TriggerVisibleEvents()
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.TriggerVisibleEvents()
        VB: Febucci.UI.Core.TAnimCore.TriggerVisibleEvents()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: TriggerVisibleEvents
        path: ''
        startLine: 4787
      syntax:
        content:
          CSharp: >-
            [Obsolete("Events are not tied to TextAnimators anymore, but to their related typewriters. Please invoke 'TriggerVisibleEvents' on the Typewriter component instead.")]

            public void TriggerVisibleEvents()
          VB: >-
            <Obsolete("Events are not tied to TextAnimators anymore, but to their related typewriters. Please invoke 'TriggerVisibleEvents' on the Typewriter component instead.")>

            Public Sub TriggerVisibleEvents
      overload: Febucci.UI.Core.TAnimCore.TriggerVisibleEvents*
      attributes:
      - type: System.ObsoleteAttribute
        ctor: System.ObsoleteAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Events are not tied to TextAnimators anymore, but to their related typewriters. Please invoke 'TriggerVisibleEvents' on the Typewriter component instead.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TAnimCore.ForceMeshRefresh
      commentId: M:Febucci.UI.Core.TAnimCore.ForceMeshRefresh
      language: CSharp
      name:
        CSharp: ForceMeshRefresh()
        VB: ForceMeshRefresh()
      nameWithType:
        CSharp: TAnimCore.ForceMeshRefresh()
        VB: TAnimCore.ForceMeshRefresh()
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.ForceMeshRefresh()
        VB: Febucci.UI.Core.TAnimCore.ForceMeshRefresh()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: ForceMeshRefresh
        path: ''
        startLine: 4794
      syntax:
        content:
          CSharp: >-
            [Obsolete("Use 'ScheduleMeshRefresh' instead")]

            public void ForceMeshRefresh()
          VB: >-
            <Obsolete("Use 'ScheduleMeshRefresh' instead")>

            Public Sub ForceMeshRefresh
      overload: Febucci.UI.Core.TAnimCore.ForceMeshRefresh*
      attributes:
      - type: System.ObsoleteAttribute
        ctor: System.ObsoleteAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Use 'ScheduleMeshRefresh' instead
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TAnimCore.ResetEffectsTime(System.Boolean)
      commentId: M:Febucci.UI.Core.TAnimCore.ResetEffectsTime(System.Boolean)
      language: CSharp
      name:
        CSharp: ResetEffectsTime(Boolean)
        VB: ResetEffectsTime(Boolean)
      nameWithType:
        CSharp: TAnimCore.ResetEffectsTime(Boolean)
        VB: TAnimCore.ResetEffectsTime(Boolean)
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.ResetEffectsTime(System.Boolean)
        VB: Febucci.UI.Core.TAnimCore.ResetEffectsTime(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: ResetEffectsTime
        path: ''
        startLine: 4798
      syntax:
        content:
          CSharp: >-
            [Obsolete("To restart TextAnimator's time, please use 'time.RestartTime()'. To skip appearances effects please set 'SetVisibilityEntireText(true, false)' instead")]

            public void ResetEffectsTime(bool skipAppearances)
          VB: >-
            <Obsolete("To restart TextAnimator's time, please use 'time.RestartTime()'. To skip appearances effects please set 'SetVisibilityEntireText(true, false)' instead")>

            Public Sub ResetEffectsTime(skipAppearances As Boolean)
        parameters:
        - id: skipAppearances
          type: System.Boolean
      overload: Febucci.UI.Core.TAnimCore.ResetEffectsTime*
      attributes:
      - type: System.ObsoleteAttribute
        ctor: System.ObsoleteAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: To restart TextAnimator's time, please use 'time.RestartTime()'. To skip appearances effects please set 'SetVisibilityEntireText(true, false)' instead
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TAnimCore.isResettingEffectsOnNewText
      commentId: P:Febucci.UI.Core.TAnimCore.isResettingEffectsOnNewText
      language: CSharp
      name:
        CSharp: isResettingEffectsOnNewText
        VB: isResettingEffectsOnNewText
      nameWithType:
        CSharp: TAnimCore.isResettingEffectsOnNewText
        VB: TAnimCore.isResettingEffectsOnNewText
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.isResettingEffectsOnNewText
        VB: Febucci.UI.Core.TAnimCore.isResettingEffectsOnNewText
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: isResettingEffectsOnNewText
        path: ''
        startLine: 4806
      syntax:
        content:
          CSharp: >-
            [Obsolete("Please use 'isResettingTimeOnNewText' instead")]

            public bool isResettingEffectsOnNewText { get; }
          VB: >-
            <Obsolete("Please use 'isResettingTimeOnNewText' instead")>

            Public ReadOnly Property isResettingEffectsOnNewText As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Febucci.UI.Core.TAnimCore.isResettingEffectsOnNewText*
      attributes:
      - type: System.ObsoleteAttribute
        ctor: System.ObsoleteAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Please use 'isResettingTimeOnNewText' instead
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Febucci.UI.Core.TAnimCore.updateMode
      commentId: P:Febucci.UI.Core.TAnimCore.updateMode
      language: CSharp
      name:
        CSharp: updateMode
        VB: updateMode
      nameWithType:
        CSharp: TAnimCore.updateMode
        VB: TAnimCore.updateMode
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.updateMode
        VB: Febucci.UI.Core.TAnimCore.updateMode
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: updateMode
        path: ''
        startLine: 4809
      syntax:
        content:
          CSharp: >-
            [Obsolete("Please use 'animationLoop' instead")]

            public AnimationLoop updateMode { get; }
          VB: >-
            <Obsolete("Please use 'animationLoop' instead")>

            Public ReadOnly Property updateMode As AnimationLoop
        parameters: []
        return:
          type: Febucci.UI.AnimationLoop
      overload: Febucci.UI.Core.TAnimCore.updateMode*
      attributes:
      - type: System.ObsoleteAttribute
        ctor: System.ObsoleteAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Please use 'animationLoop' instead
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Febucci.UI.Core.TAnimCore.onEvent
      commentId: P:Febucci.UI.Core.TAnimCore.onEvent
      language: CSharp
      name:
        CSharp: onEvent
        VB: onEvent
      nameWithType:
        CSharp: TAnimCore.onEvent
        VB: TAnimCore.onEvent
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.onEvent
        VB: Febucci.UI.Core.TAnimCore.onEvent
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: onEvent
        path: ''
        startLine: 4812
      syntax:
        content:
          CSharp: >-
            [Obsolete("Events are now handled/stored by Typewriters instead.")]

            public MessageEvent onEvent { get; }
          VB: >-
            <Obsolete("Events are now handled/stored by Typewriters instead.")>

            Public ReadOnly Property onEvent As MessageEvent
        parameters: []
        return:
          type: Febucci.UI.Core.MessageEvent
      overload: Febucci.UI.Core.TAnimCore.onEvent*
      attributes:
      - type: System.ObsoleteAttribute
        ctor: System.ObsoleteAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Events are now handled/stored by Typewriters instead.
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Febucci.UI.Core.TAnimCore.effectsAppearancesEnabled
      commentId: P:Febucci.UI.Core.TAnimCore.effectsAppearancesEnabled
      language: CSharp
      name:
        CSharp: effectsAppearancesEnabled
        VB: effectsAppearancesEnabled
      nameWithType:
        CSharp: TAnimCore.effectsAppearancesEnabled
        VB: TAnimCore.effectsAppearancesEnabled
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.effectsAppearancesEnabled
        VB: Febucci.UI.Core.TAnimCore.effectsAppearancesEnabled
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: effectsAppearancesEnabled
        path: ''
        startLine: 4815
      syntax:
        content:
          CSharp: >-
            [Obsolete("Please use TextAnimatorSettings.Instance.appearances.enabled instead")]

            public static bool effectsAppearancesEnabled { get; }
          VB: >-
            <Obsolete("Please use TextAnimatorSettings.Instance.appearances.enabled instead")>

            Public Shared ReadOnly Property effectsAppearancesEnabled As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Febucci.UI.Core.TAnimCore.effectsAppearancesEnabled*
      attributes:
      - type: System.ObsoleteAttribute
        ctor: System.ObsoleteAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Please use TextAnimatorSettings.Instance.appearances.enabled instead
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Febucci.UI.Core.TAnimCore.effectsBehaviorsEnabled
      commentId: P:Febucci.UI.Core.TAnimCore.effectsBehaviorsEnabled
      language: CSharp
      name:
        CSharp: effectsBehaviorsEnabled
        VB: effectsBehaviorsEnabled
      nameWithType:
        CSharp: TAnimCore.effectsBehaviorsEnabled
        VB: TAnimCore.effectsBehaviorsEnabled
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.effectsBehaviorsEnabled
        VB: Febucci.UI.Core.TAnimCore.effectsBehaviorsEnabled
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: effectsBehaviorsEnabled
        path: ''
        startLine: 4818
      syntax:
        content:
          CSharp: >-
            [Obsolete("Please use TextAnimatorSettings.Instance.behaviors.enabled instead")]

            public static bool effectsBehaviorsEnabled { get; }
          VB: >-
            <Obsolete("Please use TextAnimatorSettings.Instance.behaviors.enabled instead")>

            Public Shared ReadOnly Property effectsBehaviorsEnabled As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Febucci.UI.Core.TAnimCore.effectsBehaviorsEnabled*
      attributes:
      - type: System.ObsoleteAttribute
        ctor: System.ObsoleteAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Please use TextAnimatorSettings.Instance.behaviors.enabled instead
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Febucci.UI.Core.TAnimCore.text
      commentId: P:Febucci.UI.Core.TAnimCore.text
      language: CSharp
      name:
        CSharp: text
        VB: text
      nameWithType:
        CSharp: TAnimCore.text
        VB: TAnimCore.text
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.text
        VB: Febucci.UI.Core.TAnimCore.text
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: text
        path: ''
        startLine: 4821
      syntax:
        content:
          CSharp: >-
            [Obsolete("Please use 'textFull' instead")]

            public string text { get; }
          VB: >-
            <Obsolete("Please use 'textFull' instead")>

            Public ReadOnly Property text As String
        parameters: []
        return:
          type: System.String
      overload: Febucci.UI.Core.TAnimCore.text*
      attributes:
      - type: System.ObsoleteAttribute
        ctor: System.ObsoleteAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Please use 'textFull' instead
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Febucci.UI.Core.TAnimCore.effectIntensityMultiplier
      commentId: P:Febucci.UI.Core.TAnimCore.effectIntensityMultiplier
      language: CSharp
      name:
        CSharp: effectIntensityMultiplier
        VB: effectIntensityMultiplier
      nameWithType:
        CSharp: TAnimCore.effectIntensityMultiplier
        VB: TAnimCore.effectIntensityMultiplier
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.effectIntensityMultiplier
        VB: Febucci.UI.Core.TAnimCore.effectIntensityMultiplier
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: effectIntensityMultiplier
        path: ''
        startLine: 4824
      syntax:
        content:
          CSharp: >-
            [Obsolete("Please change 'referenceFontSize' instead")]

            public float effectIntensityMultiplier { get; set; }
          VB: >-
            <Obsolete("Please change 'referenceFontSize' instead")>

            Public Property effectIntensityMultiplier As Single
        parameters: []
        return:
          type: System.Single
      overload: Febucci.UI.Core.TAnimCore.effectIntensityMultiplier*
      attributes:
      - type: System.ObsoleteAttribute
        ctor: System.ObsoleteAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Please change 'referenceFontSize' instead
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: Febucci.UI.Core.TAnimCore.DefaultTagsMode
    commentId: T:Febucci.UI.Core.TAnimCore.DefaultTagsMode
    language: CSharp
    name:
      CSharp: TAnimCore.DefaultTagsMode
      VB: TAnimCore.DefaultTagsMode
    nameWithType:
      CSharp: TAnimCore.DefaultTagsMode
      VB: TAnimCore.DefaultTagsMode
    qualifiedName:
      CSharp: Febucci.UI.Core.TAnimCore.DefaultTagsMode
      VB: Febucci.UI.Core.TAnimCore.DefaultTagsMode
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core
    source:
      id: DefaultTagsMode
      path: ''
      startLine: 3987
    syntax:
      content:
        CSharp: public enum DefaultTagsMode
        VB: Public Enum DefaultTagsMode
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Febucci.UI.Core.TAnimCore.DefaultTagsMode.Fallback
      commentId: F:Febucci.UI.Core.TAnimCore.DefaultTagsMode.Fallback
      language: CSharp
      name:
        CSharp: Fallback
        VB: Fallback
      nameWithType:
        CSharp: TAnimCore.DefaultTagsMode.Fallback
        VB: TAnimCore.DefaultTagsMode.Fallback
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.DefaultTagsMode.Fallback
        VB: Febucci.UI.Core.TAnimCore.DefaultTagsMode.Fallback
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: Fallback
        path: ''
        startLine: 3992
      summary: "\nApplies effects only to characters that don&apos;t have any.\n"
      example: []
      syntax:
        content:
          CSharp: Fallback = 0
          VB: Fallback = 0
        return:
          type: Febucci.UI.Core.TAnimCore.DefaultTagsMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Febucci.UI.Core.TAnimCore.DefaultTagsMode.Constant
      commentId: F:Febucci.UI.Core.TAnimCore.DefaultTagsMode.Constant
      language: CSharp
      name:
        CSharp: Constant
        VB: Constant
      nameWithType:
        CSharp: TAnimCore.DefaultTagsMode.Constant
        VB: TAnimCore.DefaultTagsMode.Constant
      qualifiedName:
        CSharp: Febucci.UI.Core.TAnimCore.DefaultTagsMode.Constant
        VB: Febucci.UI.Core.TAnimCore.DefaultTagsMode.Constant
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: Constant
        path: ''
        startLine: 3996
      summary: "\nApplies effects to all the characters, even if they already have other tags via text.\n"
      example: []
      syntax:
        content:
          CSharp: Constant = 1
          VB: Constant = 1
        return:
          type: Febucci.UI.Core.TAnimCore.DefaultTagsMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Febucci.UI.Core.CharacterEvent
    commentId: T:Febucci.UI.Core.CharacterEvent
    language: CSharp
    name:
      CSharp: CharacterEvent
      VB: CharacterEvent
    nameWithType:
      CSharp: CharacterEvent
      VB: CharacterEvent
    qualifiedName:
      CSharp: Febucci.UI.Core.CharacterEvent
      VB: Febucci.UI.Core.CharacterEvent
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core
    source:
      id: CharacterEvent
      path: ''
      startLine: 5025
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class CharacterEvent : UnityEvent<char>
        VB: >-
          <Serializable>

          Public Class CharacterEvent

              Inherits UnityEvent(Of Char)
    inheritance:
    - System.Object
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Febucci.UI.Core.MessageEvent
    commentId: T:Febucci.UI.Core.MessageEvent
    language: CSharp
    name:
      CSharp: MessageEvent
      VB: MessageEvent
    nameWithType:
      CSharp: MessageEvent
      VB: MessageEvent
    qualifiedName:
      CSharp: Febucci.UI.Core.MessageEvent
      VB: Febucci.UI.Core.MessageEvent
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core
    source:
      id: MessageEvent
      path: ''
      startLine: 5033
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class MessageEvent : UnityEvent<EventMarker>
        VB: >-
          <Serializable>

          Public Class MessageEvent

              Inherits UnityEvent(Of EventMarker)
    inheritance:
    - System.Object
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Febucci.UI.Core.TypewriterCore
    commentId: T:Febucci.UI.Core.TypewriterCore
    language: CSharp
    name:
      CSharp: TypewriterCore
      VB: TypewriterCore
    nameWithType:
      CSharp: TypewriterCore
      VB: TypewriterCore
    qualifiedName:
      CSharp: Febucci.UI.Core.TypewriterCore
      VB: Febucci.UI.Core.TypewriterCore
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core
    source:
      id: TypewriterCore
      path: ''
      startLine: 5054
    summary: "\nBase class for all Typewriters. <br />\n- Manual: <a href=\"https://www.febucci.com/text-animator-unity/docs/typewriters/\">Typewriters</a>.<br />\n"
    remarks: "\nIf you want to use the built-in Typewriter, see: <xref href=\"Febucci.UI.TypewriterByCharacter\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Febucci.UI.TypewriterByWord\" data-throw-if-not-resolved=\"false\"></xref><br />\n<br />\nYou can also create custom typewriters by inheriting from this class. <br />\nManual: <a href=\"https://www.febucci.com/text-animator-unity/docs/writing-custom-typewriters-c-sharp/\">Writing Custom Typewriters (C#)</a>\n"
    example: []
    syntax:
      content:
        CSharp: 'public abstract class TypewriterCore : MonoBehaviour'
        VB: >-
          Public MustInherit Class TypewriterCore

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: Febucci.UI.Core.TypewriterCore.TextAnimator
      commentId: P:Febucci.UI.Core.TypewriterCore.TextAnimator
      language: CSharp
      name:
        CSharp: TextAnimator
        VB: TextAnimator
      nameWithType:
        CSharp: TypewriterCore.TextAnimator
        VB: TypewriterCore.TextAnimator
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.TextAnimator
        VB: Febucci.UI.Core.TypewriterCore.TextAnimator
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: TextAnimator
        path: ''
        startLine: 5088
      summary: "\nThe TextAnimator Component linked to this typewriter\n"
      example: []
      syntax:
        content:
          CSharp: public TAnimCore TextAnimator { get; }
          VB: Public ReadOnly Property TextAnimator As TAnimCore
        parameters: []
        return:
          type: Febucci.UI.Core.TAnimCore
      overload: Febucci.UI.Core.TypewriterCore.TextAnimator*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Febucci.UI.Core.TypewriterCore.useTypeWriter
      commentId: F:Febucci.UI.Core.TypewriterCore.useTypeWriter
      language: CSharp
      name:
        CSharp: useTypeWriter
        VB: useTypeWriter
      nameWithType:
        CSharp: TypewriterCore.useTypeWriter
        VB: TypewriterCore.useTypeWriter
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.useTypeWriter
        VB: Febucci.UI.Core.TypewriterCore.useTypeWriter
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: useTypeWriter
        path: ''
        startLine: 5116
      summary: "\n<code>true</code> if the typewriter is enabled\n"
      example: []
      syntax:
        content:
          CSharp: public bool useTypeWriter
          VB: Public useTypeWriter As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TypewriterCore.startTypewriterMode
      commentId: F:Febucci.UI.Core.TypewriterCore.startTypewriterMode
      language: CSharp
      name:
        CSharp: startTypewriterMode
        VB: startTypewriterMode
      nameWithType:
        CSharp: TypewriterCore.startTypewriterMode
        VB: TypewriterCore.startTypewriterMode
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.startTypewriterMode
        VB: Febucci.UI.Core.TypewriterCore.startTypewriterMode
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: startTypewriterMode
        path: ''
        startLine: 5119
      syntax:
        content:
          CSharp: public TypewriterCore.StartTypewriterMode startTypewriterMode
          VB: Public startTypewriterMode As TypewriterCore.StartTypewriterMode
        return:
          type: Febucci.UI.Core.TypewriterCore.StartTypewriterMode
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TypewriterCore.hideAppearancesOnSkip
      commentId: F:Febucci.UI.Core.TypewriterCore.hideAppearancesOnSkip
      language: CSharp
      name:
        CSharp: hideAppearancesOnSkip
        VB: hideAppearancesOnSkip
      nameWithType:
        CSharp: TypewriterCore.hideAppearancesOnSkip
        VB: TypewriterCore.hideAppearancesOnSkip
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.hideAppearancesOnSkip
        VB: Febucci.UI.Core.TypewriterCore.hideAppearancesOnSkip
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: hideAppearancesOnSkip
        path: ''
        startLine: 5122
      syntax:
        content:
          CSharp: public bool hideAppearancesOnSkip
          VB: Public hideAppearancesOnSkip As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TypewriterCore.hideDisappearancesOnSkip
      commentId: F:Febucci.UI.Core.TypewriterCore.hideDisappearancesOnSkip
      language: CSharp
      name:
        CSharp: hideDisappearancesOnSkip
        VB: hideDisappearancesOnSkip
      nameWithType:
        CSharp: TypewriterCore.hideDisappearancesOnSkip
        VB: TypewriterCore.hideDisappearancesOnSkip
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.hideDisappearancesOnSkip
        VB: Febucci.UI.Core.TypewriterCore.hideDisappearancesOnSkip
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: hideDisappearancesOnSkip
        path: ''
        startLine: 5123
      syntax:
        content:
          CSharp: public bool hideDisappearancesOnSkip
          VB: Public hideDisappearancesOnSkip As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TypewriterCore.resetTypingSpeedAtStartup
      commentId: F:Febucci.UI.Core.TypewriterCore.resetTypingSpeedAtStartup
      language: CSharp
      name:
        CSharp: resetTypingSpeedAtStartup
        VB: resetTypingSpeedAtStartup
      nameWithType:
        CSharp: TypewriterCore.resetTypingSpeedAtStartup
        VB: TypewriterCore.resetTypingSpeedAtStartup
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.resetTypingSpeedAtStartup
        VB: Febucci.UI.Core.TypewriterCore.resetTypingSpeedAtStartup
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: resetTypingSpeedAtStartup
        path: ''
        startLine: 5129
      syntax:
        content:
          CSharp: public bool resetTypingSpeedAtStartup
          VB: Public resetTypingSpeedAtStartup As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TypewriterCore.disappearanceOrientation
      commentId: F:Febucci.UI.Core.TypewriterCore.disappearanceOrientation
      language: CSharp
      name:
        CSharp: disappearanceOrientation
        VB: disappearanceOrientation
      nameWithType:
        CSharp: TypewriterCore.disappearanceOrientation
        VB: TypewriterCore.disappearanceOrientation
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.disappearanceOrientation
        VB: Febucci.UI.Core.TypewriterCore.disappearanceOrientation
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: disappearanceOrientation
        path: ''
        startLine: 5149
      syntax:
        content:
          CSharp: public TypewriterCore.DisappearanceOrientation disappearanceOrientation
          VB: Public disappearanceOrientation As TypewriterCore.DisappearanceOrientation
        return:
          type: Febucci.UI.Core.TypewriterCore.DisappearanceOrientation
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TypewriterCore.triggerShowedAfterEffectsEnd
      commentId: F:Febucci.UI.Core.TypewriterCore.triggerShowedAfterEffectsEnd
      language: CSharp
      name:
        CSharp: triggerShowedAfterEffectsEnd
        VB: triggerShowedAfterEffectsEnd
      nameWithType:
        CSharp: TypewriterCore.triggerShowedAfterEffectsEnd
        VB: TypewriterCore.triggerShowedAfterEffectsEnd
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.triggerShowedAfterEffectsEnd
        VB: Febucci.UI.Core.TypewriterCore.triggerShowedAfterEffectsEnd
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: triggerShowedAfterEffectsEnd
        path: ''
        startLine: 5161
      summary: "\n<code>true</code> if you want to wait for every single character to animate before invoking <xref href=\"Febucci.UI.Core.TypewriterCore.onTextShowed\" data-throw-if-not-resolved=\"false\"></xref>.\nOtherwise, you might have that event invoked even if the very last character(s) are animating.\n"
      remarks: "\nUsually users don&apos;t want to wait for the very last letter(s), similar to punctuation. That said, this option might come useful in cases like you have very slow letters.\n"
      example: []
      syntax:
        content:
          CSharp: public bool triggerShowedAfterEffectsEnd
          VB: Public triggerShowedAfterEffectsEnd As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Febucci.UI.Core.TypewriterCore.onTextShowed: 
    - id: Febucci.UI.Core.TypewriterCore.triggerDisappearedAfterEffectsEnd
      commentId: F:Febucci.UI.Core.TypewriterCore.triggerDisappearedAfterEffectsEnd
      language: CSharp
      name:
        CSharp: triggerDisappearedAfterEffectsEnd
        VB: triggerDisappearedAfterEffectsEnd
      nameWithType:
        CSharp: TypewriterCore.triggerDisappearedAfterEffectsEnd
        VB: TypewriterCore.triggerDisappearedAfterEffectsEnd
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.triggerDisappearedAfterEffectsEnd
        VB: Febucci.UI.Core.TypewriterCore.triggerDisappearedAfterEffectsEnd
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: triggerDisappearedAfterEffectsEnd
        path: ''
        startLine: 5171
      summary: "\n<code>true</code> if you want to wait for every single character to animate before invoking <xref href=\"Febucci.UI.Core.TypewriterCore.onTextDisappeared\" data-throw-if-not-resolved=\"false\"></xref>.\nOtherwise, you might have that event invoked even if the very last character(s) are animating.\n"
      remarks: "\nUsually users don&apos;t want to wait for the very last letter(s), similar to punctuation. That said, this option might come useful in cases like you have very slow letters.\n"
      example: []
      syntax:
        content:
          CSharp: public bool triggerDisappearedAfterEffectsEnd
          VB: Public triggerDisappearedAfterEffectsEnd As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Febucci.UI.Core.TypewriterCore.onTextDisappeared: 
    - id: Febucci.UI.Core.TypewriterCore.onTextShowed
      commentId: F:Febucci.UI.Core.TypewriterCore.onTextShowed
      language: CSharp
      name:
        CSharp: onTextShowed
        VB: onTextShowed
      nameWithType:
        CSharp: TypewriterCore.onTextShowed
        VB: TypewriterCore.onTextShowed
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.onTextShowed
        VB: Febucci.UI.Core.TypewriterCore.onTextShowed
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: onTextShowed
        path: ''
        startLine: 5180
      summary: "\nCalled once the text is completely shown. <br />\nIf the typewriter is enabled, this event is called once it has ended showing all letters.\n"
      example: []
      syntax:
        content:
          CSharp: public UnityEvent onTextShowed
          VB: Public onTextShowed As UnityEvent
        return:
          type: UnityEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TypewriterCore.onTypewriterStart
      commentId: F:Febucci.UI.Core.TypewriterCore.onTypewriterStart
      language: CSharp
      name:
        CSharp: onTypewriterStart
        VB: onTypewriterStart
      nameWithType:
        CSharp: TypewriterCore.onTypewriterStart
        VB: TypewriterCore.onTypewriterStart
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.onTypewriterStart
        VB: Febucci.UI.Core.TypewriterCore.onTypewriterStart
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: onTypewriterStart
        path: ''
        startLine: 5188
      summary: "\nCalled once the typewriter starts showing text.<br />\n"
      remarks: "\nIt is only invoked when the typewriter is enabled.\n"
      example: []
      syntax:
        content:
          CSharp: public UnityEvent onTypewriterStart
          VB: Public onTypewriterStart As UnityEvent
        return:
          type: UnityEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TypewriterCore.onTextDisappeared
      commentId: F:Febucci.UI.Core.TypewriterCore.onTextDisappeared
      language: CSharp
      name:
        CSharp: onTextDisappeared
        VB: onTextDisappeared
      nameWithType:
        CSharp: TypewriterCore.onTextDisappeared
        VB: TypewriterCore.onTextDisappeared
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.onTextDisappeared
        VB: Febucci.UI.Core.TypewriterCore.onTextDisappeared
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: onTextDisappeared
        path: ''
        startLine: 5196
      summary: "\nCalled once the typewriter has completed hiding all the letters.\n"
      remarks: "\nIt is only invoked when the typewriter is enabled.\n"
      example: []
      syntax:
        content:
          CSharp: public UnityEvent onTextDisappeared
          VB: Public onTextDisappeared As UnityEvent
        return:
          type: UnityEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TypewriterCore.onCharacterVisible
      commentId: F:Febucci.UI.Core.TypewriterCore.onCharacterVisible
      language: CSharp
      name:
        CSharp: onCharacterVisible
        VB: onCharacterVisible
      nameWithType:
        CSharp: TypewriterCore.onCharacterVisible
        VB: TypewriterCore.onCharacterVisible
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.onCharacterVisible
        VB: Febucci.UI.Core.TypewriterCore.onCharacterVisible
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: onCharacterVisible
        path: ''
        startLine: 5204
      summary: "\nCalled once a character has been shown by the typewriter.<br />\n"
      remarks: "\nIt is only invoked when the typewriter is enabled.\n"
      example: []
      syntax:
        content:
          CSharp: public CharacterEvent onCharacterVisible
          VB: Public onCharacterVisible As CharacterEvent
        return:
          type: Febucci.UI.Core.CharacterEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TypewriterCore.onMessage
      commentId: F:Febucci.UI.Core.TypewriterCore.onMessage
      language: CSharp
      name:
        CSharp: onMessage
        VB: onMessage
      nameWithType:
        CSharp: TypewriterCore.onMessage
        VB: TypewriterCore.onMessage
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.onMessage
        VB: Febucci.UI.Core.TypewriterCore.onMessage
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: onMessage
        path: ''
        startLine: 5214
      summary: "\nCalled once an event has been shown by the typewriter.<br />\nSee the <a href=\"https://www.febucci.com/text-animator-unity/docs/triggering-events-while-typing/\">Events Manual</a> for more info.\n"
      remarks: "\nIt is only invoked when the typewriter is enabled.\n"
      example: []
      syntax:
        content:
          CSharp: public MessageEvent onMessage
          VB: Public onMessage As MessageEvent
        return:
          type: Febucci.UI.Core.MessageEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TypewriterCore.ShowText(System.String)
      commentId: M:Febucci.UI.Core.TypewriterCore.ShowText(System.String)
      language: CSharp
      name:
        CSharp: ShowText(String)
        VB: ShowText(String)
      nameWithType:
        CSharp: TypewriterCore.ShowText(String)
        VB: TypewriterCore.ShowText(String)
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.ShowText(System.String)
        VB: Febucci.UI.Core.TypewriterCore.ShowText(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: ShowText
        path: ''
        startLine: 5228
      summary: "\nSets the given text to the connected TextAnimator component.<br />\nIf enabled, it also starts showing letters dynamically. <br />\n- Manual: <a href=\"https://www.febucci.com/text-animator-unity/docs/text-animator-players/\">Text Animator Players</a>\n"
      remarks: "\nIf the typewriter is enabled but its start mode <xref href=\"Febucci.UI.Core.TypewriterCore.startTypewriterMode\" data-throw-if-not-resolved=\"false\"></xref> doesn&apos;t include <xref href=\"Febucci.UI.Core.TypewriterCore.StartTypewriterMode.OnShowText\" data-throw-if-not-resolved=\"false\"></xref>, this method won&apos;t start showing letters. You&apos;d have to manually call <xref href=\"Febucci.UI.Core.TypewriterCore.StartShowingText(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> in order to start the typewriter, or include different &quot;start modes&quot; like <xref href=\"Febucci.UI.Core.TypewriterCore.StartTypewriterMode.OnEnable\" data-throw-if-not-resolved=\"false\"></xref> and let the script manage it automatically.\n"
      example: []
      syntax:
        content:
          CSharp: public void ShowText(string text)
          VB: Public Sub ShowText(text As String)
        parameters:
        - id: text
          type: System.String
          description: ''
      overload: Febucci.UI.Core.TypewriterCore.ShowText*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Febucci.UI.Core.TypewriterCore.startTypewriterMode: 
        Febucci.UI.Core.TypewriterCore.StartTypewriterMode.OnShowText: 
        Febucci.UI.Core.TypewriterCore.StartShowingText(System.Boolean): 
        Febucci.UI.Core.TypewriterCore.StartTypewriterMode.OnEnable: 
    - id: Febucci.UI.Core.TypewriterCore.SkipTypewriter
      commentId: M:Febucci.UI.Core.TypewriterCore.SkipTypewriter
      language: CSharp
      name:
        CSharp: SkipTypewriter()
        VB: SkipTypewriter()
      nameWithType:
        CSharp: TypewriterCore.SkipTypewriter()
        VB: TypewriterCore.SkipTypewriter()
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.SkipTypewriter()
        VB: Febucci.UI.Core.TypewriterCore.SkipTypewriter()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: SkipTypewriter
        path: ''
        startLine: 5256
      summary: "\nSkips the typewriter animation (if it&apos;s currently showing).<br />\nIn case the text is revealing, it will show all the letters immediately.<br />\nIn case the text is hiding, it will hide all the letters immediately.\n"
      remarks: "\nIf both revealing and hiding are occurring, hiding will prevail.\n"
      example: []
      syntax:
        content:
          CSharp: public void SkipTypewriter()
          VB: Public Sub SkipTypewriter
      overload: Febucci.UI.Core.TypewriterCore.SkipTypewriter*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TypewriterCore.isShowingText
      commentId: P:Febucci.UI.Core.TypewriterCore.isShowingText
      language: CSharp
      name:
        CSharp: isShowingText
        VB: isShowingText
      nameWithType:
        CSharp: TypewriterCore.isShowingText
        VB: TypewriterCore.isShowingText
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.isShowingText
        VB: Febucci.UI.Core.TypewriterCore.isShowingText
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: isShowingText
        path: ''
        startLine: 5315
      summary: "\nTrue if the typewriter is currently showing letters\n"
      example: []
      syntax:
        content:
          CSharp: public bool isShowingText { get; }
          VB: Public ReadOnly Property isShowingText As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Febucci.UI.Core.TypewriterCore.isShowingText*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Febucci.UI.Core.TypewriterCore.StartShowingText(System.Boolean)
      commentId: M:Febucci.UI.Core.TypewriterCore.StartShowingText(System.Boolean)
      language: CSharp
      name:
        CSharp: StartShowingText(Boolean)
        VB: StartShowingText(Boolean)
      nameWithType:
        CSharp: TypewriterCore.StartShowingText(Boolean)
        VB: TypewriterCore.StartShowingText(Boolean)
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.StartShowingText(System.Boolean)
        VB: Febucci.UI.Core.TypewriterCore.StartShowingText(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: StartShowingText
        path: ''
        startLine: 5321
      summary: "\nStarts showing letters dynamically\n"
      example: []
      syntax:
        content:
          CSharp: public void StartShowingText(bool restart = false)
          VB: Public Sub StartShowingText(restart As Boolean = False)
        parameters:
        - id: restart
          type: System.Boolean
          description: <pre><code>false</code></pre> if you want the typewriter to resume where it has left. <pre><code>true</code></pre> if the typewriter should restart from character 0
      overload: Febucci.UI.Core.TypewriterCore.StartShowingText*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TypewriterCore.GetWaitAppearanceTimeOf(System.Int32)
      commentId: M:Febucci.UI.Core.TypewriterCore.GetWaitAppearanceTimeOf(System.Int32)
      language: CSharp
      name:
        CSharp: GetWaitAppearanceTimeOf(Int32)
        VB: GetWaitAppearanceTimeOf(Int32)
      nameWithType:
        CSharp: TypewriterCore.GetWaitAppearanceTimeOf(Int32)
        VB: TypewriterCore.GetWaitAppearanceTimeOf(Int32)
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.GetWaitAppearanceTimeOf(System.Int32)
        VB: Febucci.UI.Core.TypewriterCore.GetWaitAppearanceTimeOf(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: GetWaitAppearanceTimeOf
        path: ''
        startLine: 5356
      syntax:
        content:
          CSharp: protected abstract float GetWaitAppearanceTimeOf(int charIndex)
          VB: Protected MustOverride Function GetWaitAppearanceTimeOf(charIndex As Integer) As Single
        parameters:
        - id: charIndex
          type: System.Int32
        return:
          type: System.Single
      overload: Febucci.UI.Core.TypewriterCore.GetWaitAppearanceTimeOf*
      modifiers:
        CSharp:
        - protected
        - abstract
        VB:
        - Protected
        - MustOverride
    - id: Febucci.UI.Core.TypewriterCore.StopShowingText
      commentId: M:Febucci.UI.Core.TypewriterCore.StopShowingText
      language: CSharp
      name:
        CSharp: StopShowingText()
        VB: StopShowingText()
      nameWithType:
        CSharp: TypewriterCore.StopShowingText()
        VB: TypewriterCore.StopShowingText()
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.StopShowingText()
        VB: Febucci.UI.Core.TypewriterCore.StopShowingText()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: StopShowingText
        path: ''
        startLine: 5466
      summary: "\nStops showing letters dynamically, leaving the text as it is.\n"
      example: []
      syntax:
        content:
          CSharp: public void StopShowingText()
          VB: Public Sub StopShowingText
      overload: Febucci.UI.Core.TypewriterCore.StopShowingText*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TypewriterCore.isHidingText
      commentId: P:Febucci.UI.Core.TypewriterCore.isHidingText
      language: CSharp
      name:
        CSharp: isHidingText
        VB: isHidingText
      nameWithType:
        CSharp: TypewriterCore.isHidingText
        VB: TypewriterCore.isHidingText
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.isHidingText
        VB: Febucci.UI.Core.TypewriterCore.isHidingText
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: isHidingText
        path: ''
        startLine: 5486
      summary: "\nTrue if the typewriter is currently disappearing the text\n"
      example: []
      syntax:
        content:
          CSharp: public bool isHidingText { get; }
          VB: Public ReadOnly Property isHidingText As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Febucci.UI.Core.TypewriterCore.isHidingText*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Febucci.UI.Core.TypewriterCore.StartDisappearingText
      commentId: M:Febucci.UI.Core.TypewriterCore.StartDisappearingText
      language: CSharp
      name:
        CSharp: StartDisappearingText()
        VB: StartDisappearingText()
      nameWithType:
        CSharp: TypewriterCore.StartDisappearingText()
        VB: TypewriterCore.StartDisappearingText()
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.StartDisappearingText()
        VB: Febucci.UI.Core.TypewriterCore.StartDisappearingText()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: StartDisappearingText
        path: ''
        startLine: 5491
      summary: "\nStarts disappearing the text dynamically\n"
      example: []
      syntax:
        content:
          CSharp: public void StartDisappearingText()
          VB: Public Sub StartDisappearingText
      overload: Febucci.UI.Core.TypewriterCore.StartDisappearingText*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TypewriterCore.StopDisappearingText
      commentId: M:Febucci.UI.Core.TypewriterCore.StopDisappearingText
      language: CSharp
      name:
        CSharp: StopDisappearingText()
        VB: StopDisappearingText()
      nameWithType:
        CSharp: TypewriterCore.StopDisappearingText()
        VB: TypewriterCore.StopDisappearingText()
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.StopDisappearingText()
        VB: Febucci.UI.Core.TypewriterCore.StopDisappearingText()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: StopDisappearingText
        path: ''
        startLine: 5509
      summary: "\nStops the typewriter&apos;s from disappearing the text dynamically, leaving the text at its current state\n"
      example: []
      syntax:
        content:
          CSharp: public void StopDisappearingText()
          VB: Public Sub StopDisappearingText
      overload: Febucci.UI.Core.TypewriterCore.StopDisappearingText*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TypewriterCore.GetWaitDisappearanceTimeOf(System.Int32)
      commentId: M:Febucci.UI.Core.TypewriterCore.GetWaitDisappearanceTimeOf(System.Int32)
      language: CSharp
      name:
        CSharp: GetWaitDisappearanceTimeOf(Int32)
        VB: GetWaitDisappearanceTimeOf(Int32)
      nameWithType:
        CSharp: TypewriterCore.GetWaitDisappearanceTimeOf(Int32)
        VB: TypewriterCore.GetWaitDisappearanceTimeOf(Int32)
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.GetWaitDisappearanceTimeOf(System.Int32)
        VB: Febucci.UI.Core.TypewriterCore.GetWaitDisappearanceTimeOf(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: GetWaitDisappearanceTimeOf
        path: ''
        startLine: 5524
      summary: "\nHandles characters delay when disappearing text.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual float GetWaitDisappearanceTimeOf(int charIndex)
          VB: Protected Overridable Function GetWaitDisappearanceTimeOf(charIndex As Integer) As Single
        parameters:
        - id: charIndex
          type: System.Int32
          description: Current character that should decide how much time to wait. Check <xref href="Febucci.UI.Core.TAnimCore.Characters" data-throw-if-not-resolved="false"></xref> to view its info
        return:
          type: System.Single
          description: time to wait before disappearing the next character
      overload: Febucci.UI.Core.TypewriterCore.GetWaitDisappearanceTimeOf*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
      references:
        Febucci.UI.Core.TAnimCore.Characters: 
    - id: Febucci.UI.Core.TypewriterCore.SetTypewriterSpeed(System.Single)
      commentId: M:Febucci.UI.Core.TypewriterCore.SetTypewriterSpeed(System.Single)
      language: CSharp
      name:
        CSharp: SetTypewriterSpeed(Single)
        VB: SetTypewriterSpeed(Single)
      nameWithType:
        CSharp: TypewriterCore.SetTypewriterSpeed(Single)
        VB: TypewriterCore.SetTypewriterSpeed(Single)
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.SetTypewriterSpeed(System.Single)
        VB: Febucci.UI.Core.TypewriterCore.SetTypewriterSpeed(System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: SetTypewriterSpeed
        path: ''
        startLine: 5638
      summary: "\nMakes the typewriter slower/faster, by setting its internal speed multiplier.\n"
      remarks: "\nThe minimum value is 0.001\n"
      example:
      - "\nIf the typewriter has to wait <code>1</code> second to show the next letter but you set the typewriter speed to <code>2</code>, the typewriter will wait <code>0.5</code> seconds.\n"
      syntax:
        content:
          CSharp: public void SetTypewriterSpeed(float value)
          VB: Public Sub SetTypewriterSpeed(value As Single)
        parameters:
        - id: value
          type: System.Single
          description: ''
      overload: Febucci.UI.Core.TypewriterCore.SetTypewriterSpeed*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TypewriterCore.TriggerRemainingEvents
      commentId: M:Febucci.UI.Core.TypewriterCore.TriggerRemainingEvents
      language: CSharp
      name:
        CSharp: TriggerRemainingEvents()
        VB: TriggerRemainingEvents()
      nameWithType:
        CSharp: TypewriterCore.TriggerRemainingEvents()
        VB: TypewriterCore.TriggerRemainingEvents()
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.TriggerRemainingEvents()
        VB: Febucci.UI.Core.TypewriterCore.TriggerRemainingEvents()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: TriggerRemainingEvents
        path: ''
        startLine: 5680
      summary: "\nTriggers all messages/events that have not yet been triggered, even if they&apos;re not shown in the yet.\n"
      remarks: "\n<xref href=\"Febucci.UI.Core.TypewriterCore.TriggerVisibleEvents\" data-throw-if-not-resolved=\"false\"></xref>\n"
      example: []
      syntax:
        content:
          CSharp: public void TriggerRemainingEvents()
          VB: Public Sub TriggerRemainingEvents
      overload: Febucci.UI.Core.TypewriterCore.TriggerRemainingEvents*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Febucci.UI.Core.TypewriterCore.TriggerVisibleEvents: 
    - id: Febucci.UI.Core.TypewriterCore.TriggerVisibleEvents
      commentId: M:Febucci.UI.Core.TypewriterCore.TriggerVisibleEvents
      language: CSharp
      name:
        CSharp: TriggerVisibleEvents()
        VB: TriggerVisibleEvents()
      nameWithType:
        CSharp: TypewriterCore.TriggerVisibleEvents()
        VB: TypewriterCore.TriggerVisibleEvents()
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.TriggerVisibleEvents()
        VB: Febucci.UI.Core.TypewriterCore.TriggerVisibleEvents()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: TriggerVisibleEvents
        path: ''
        startLine: 5688
      summary: "\nTriggers all messages/events that have not been triggered, but that are in the visible range of the text.\n"
      remarks: "\n<xref href=\"Febucci.UI.Core.TypewriterCore.TriggerRemainingEvents\" data-throw-if-not-resolved=\"false\"></xref>\n"
      example: []
      syntax:
        content:
          CSharp: public void TriggerVisibleEvents()
          VB: Public Sub TriggerVisibleEvents
      overload: Febucci.UI.Core.TypewriterCore.TriggerVisibleEvents*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Febucci.UI.Core.TypewriterCore.TriggerRemainingEvents: 
    - id: Febucci.UI.Core.TypewriterCore.OnEnable
      commentId: M:Febucci.UI.Core.TypewriterCore.OnEnable
      language: CSharp
      name:
        CSharp: OnEnable()
        VB: OnEnable()
      nameWithType:
        CSharp: TypewriterCore.OnEnable()
        VB: TypewriterCore.OnEnable()
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.OnEnable()
        VB: Febucci.UI.Core.TypewriterCore.OnEnable()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: OnEnable
        path: ''
        startLine: 5700
      summary: "\nUnity&apos;s default MonoBehavior &apos;OnEnable&apos; callback.\n"
      remarks: "\nP.S. If you&apos;re overriding this method, don&apos;t forget to invoke the base one.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void OnEnable()
          VB: Protected Overridable Sub OnEnable
      overload: Febucci.UI.Core.TypewriterCore.OnEnable*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: Febucci.UI.Core.TypewriterCore.OnDisable
      commentId: M:Febucci.UI.Core.TypewriterCore.OnDisable
      language: CSharp
      name:
        CSharp: OnDisable()
        VB: OnDisable()
      nameWithType:
        CSharp: TypewriterCore.OnDisable()
        VB: TypewriterCore.OnDisable()
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.OnDisable()
        VB: Febucci.UI.Core.TypewriterCore.OnDisable()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: OnDisable
        path: ''
        startLine: 5717
      summary: "\nUnity&apos;s default MonoBehavior &apos;OnDisable&apos; callback.\n"
      remarks: "\nP.S. If you&apos;re overriding this method, don&apos;t forget to invoke the base one.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void OnDisable()
          VB: Protected Overridable Sub OnDisable
      overload: Febucci.UI.Core.TypewriterCore.OnDisable*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: Febucci.UI.Core.TypewriterCore.typewriterPlayerSpeed
      commentId: P:Febucci.UI.Core.TypewriterCore.typewriterPlayerSpeed
      language: CSharp
      name:
        CSharp: typewriterPlayerSpeed
        VB: typewriterPlayerSpeed
      nameWithType:
        CSharp: TypewriterCore.typewriterPlayerSpeed
        VB: TypewriterCore.typewriterPlayerSpeed
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.typewriterPlayerSpeed
        VB: Febucci.UI.Core.TypewriterCore.typewriterPlayerSpeed
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: typewriterPlayerSpeed
        path: ''
        startLine: 5724
      syntax:
        content:
          CSharp: >-
            [Obsolete("Please set the speed through 'SetTypewriterSpeed' method instead")]

            protected float typewriterPlayerSpeed { get; set; }
          VB: >-
            <Obsolete("Please set the speed through 'SetTypewriterSpeed' method instead")>

            Protected Property typewriterPlayerSpeed As Single
        parameters: []
        return:
          type: System.Single
      overload: Febucci.UI.Core.TypewriterCore.typewriterPlayerSpeed*
      attributes:
      - type: System.ObsoleteAttribute
        ctor: System.ObsoleteAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Please set the speed through 'SetTypewriterSpeed' method instead
      modifiers:
        CSharp:
        - protected
        - get
        - set
        VB:
        - Protected
    - id: Febucci.UI.Core.TypewriterCore.wantsToSkip
      commentId: P:Febucci.UI.Core.TypewriterCore.wantsToSkip
      language: CSharp
      name:
        CSharp: wantsToSkip
        VB: wantsToSkip
      nameWithType:
        CSharp: TypewriterCore.wantsToSkip
        VB: TypewriterCore.wantsToSkip
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.wantsToSkip
        VB: Febucci.UI.Core.TypewriterCore.wantsToSkip
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: wantsToSkip
        path: ''
        startLine: 5731
      syntax:
        content:
          CSharp: >-
            [Obsolete("Please skip the typewriter via the 'SkipTypewriter' method instead")]

            protected bool wantsToSkip { get; set; }
          VB: >-
            <Obsolete("Please skip the typewriter via the 'SkipTypewriter' method instead")>

            Protected Property wantsToSkip As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Febucci.UI.Core.TypewriterCore.wantsToSkip*
      attributes:
      - type: System.ObsoleteAttribute
        ctor: System.ObsoleteAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Please skip the typewriter via the 'SkipTypewriter' method instead
      modifiers:
        CSharp:
        - protected
        - get
        - set
        VB:
        - Protected
    - id: Febucci.UI.Core.TypewriterCore.isBaseInsideRoutine
      commentId: P:Febucci.UI.Core.TypewriterCore.isBaseInsideRoutine
      language: CSharp
      name:
        CSharp: isBaseInsideRoutine
        VB: isBaseInsideRoutine
      nameWithType:
        CSharp: TypewriterCore.isBaseInsideRoutine
        VB: TypewriterCore.isBaseInsideRoutine
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.isBaseInsideRoutine
        VB: Febucci.UI.Core.TypewriterCore.isBaseInsideRoutine
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: isBaseInsideRoutine
        path: ''
        startLine: 5741
      syntax:
        content:
          CSharp: >-
            [Obsolete("Please use 'isShowingText' instead")]

            protected bool isBaseInsideRoutine { get; }
          VB: >-
            <Obsolete("Please use 'isShowingText' instead")>

            Protected ReadOnly Property isBaseInsideRoutine As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Febucci.UI.Core.TypewriterCore.isBaseInsideRoutine*
      attributes:
      - type: System.ObsoleteAttribute
        ctor: System.ObsoleteAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Please use 'isShowingText' instead
      modifiers:
        CSharp:
        - protected
        - get
        VB:
        - Protected
        - ReadOnly
    - id: Febucci.UI.Core.TypewriterCore.textAnimator
      commentId: P:Febucci.UI.Core.TypewriterCore.textAnimator
      language: CSharp
      name:
        CSharp: textAnimator
        VB: textAnimator
      nameWithType:
        CSharp: TypewriterCore.textAnimator
        VB: TypewriterCore.textAnimator
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.textAnimator
        VB: Febucci.UI.Core.TypewriterCore.textAnimator
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: textAnimator
        path: ''
        startLine: 5745
      syntax:
        content:
          CSharp: >-
            [Obsolete("Please use 'TextAnimator' instead")]

            public TAnimCore textAnimator { get; }
          VB: >-
            <Obsolete("Please use 'TextAnimator' instead")>

            Public ReadOnly Property textAnimator As TAnimCore
        parameters: []
        return:
          type: Febucci.UI.Core.TAnimCore
      overload: Febucci.UI.Core.TypewriterCore.textAnimator*
      attributes:
      - type: System.ObsoleteAttribute
        ctor: System.ObsoleteAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Please use 'TextAnimator' instead
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    references:
      Febucci.UI.TypewriterByCharacter: 
      Febucci.UI.TypewriterByWord: 
  - id: Febucci.UI.Core.TypewriterCore.StartTypewriterMode
    commentId: T:Febucci.UI.Core.TypewriterCore.StartTypewriterMode
    language: CSharp
    name:
      CSharp: TypewriterCore.StartTypewriterMode
      VB: TypewriterCore.StartTypewriterMode
    nameWithType:
      CSharp: TypewriterCore.StartTypewriterMode
      VB: TypewriterCore.StartTypewriterMode
    qualifiedName:
      CSharp: Febucci.UI.Core.TypewriterCore.StartTypewriterMode
      VB: Febucci.UI.Core.TypewriterCore.StartTypewriterMode
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core
    source:
      id: StartTypewriterMode
      path: ''
      startLine: 5058
    syntax:
      content:
        CSharp: >-
          [Flags]

          public enum StartTypewriterMode
        VB: >-
          <Flags>

          Public Enum StartTypewriterMode
    attributes:
    - type: System.FlagsAttribute
      ctor: System.FlagsAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Febucci.UI.Core.TypewriterCore.StartTypewriterMode.FromScriptOnly
      commentId: F:Febucci.UI.Core.TypewriterCore.StartTypewriterMode.FromScriptOnly
      language: CSharp
      name:
        CSharp: FromScriptOnly
        VB: FromScriptOnly
      nameWithType:
        CSharp: TypewriterCore.StartTypewriterMode.FromScriptOnly
        VB: TypewriterCore.StartTypewriterMode.FromScriptOnly
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.StartTypewriterMode.FromScriptOnly
        VB: Febucci.UI.Core.TypewriterCore.StartTypewriterMode.FromScriptOnly
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: FromScriptOnly
        path: ''
        startLine: 5064
      summary: "\nTypewriter starts typing ONLY if you invoke &quot;StartShowingText&quot; from any of your script.\n"
      example: []
      syntax:
        content:
          CSharp: FromScriptOnly = 0
          VB: FromScriptOnly = 0
        return:
          type: Febucci.UI.Core.TypewriterCore.StartTypewriterMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Febucci.UI.Core.TypewriterCore.StartTypewriterMode.OnEnable
      commentId: F:Febucci.UI.Core.TypewriterCore.StartTypewriterMode.OnEnable
      language: CSharp
      name:
        CSharp: OnEnable
        VB: OnEnable
      nameWithType:
        CSharp: TypewriterCore.StartTypewriterMode.OnEnable
        VB: TypewriterCore.StartTypewriterMode.OnEnable
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.StartTypewriterMode.OnEnable
        VB: Febucci.UI.Core.TypewriterCore.StartTypewriterMode.OnEnable
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: OnEnable
        path: ''
        startLine: 5069
      summary: "\nTypewriter automatically starts/resumes from the &quot;OnEnable&quot; method\n"
      example: []
      syntax:
        content:
          CSharp: OnEnable = 1
          VB: OnEnable = 1
        return:
          type: Febucci.UI.Core.TypewriterCore.StartTypewriterMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Febucci.UI.Core.TypewriterCore.StartTypewriterMode.OnShowText
      commentId: F:Febucci.UI.Core.TypewriterCore.StartTypewriterMode.OnShowText
      language: CSharp
      name:
        CSharp: OnShowText
        VB: OnShowText
      nameWithType:
        CSharp: TypewriterCore.StartTypewriterMode.OnShowText
        VB: TypewriterCore.StartTypewriterMode.OnShowText
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.StartTypewriterMode.OnShowText
        VB: Febucci.UI.Core.TypewriterCore.StartTypewriterMode.OnShowText
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: OnShowText
        path: ''
        startLine: 5074
      summary: "\nTypewriter automatically starts once you call &quot;ShowText&quot; method [includes Easy Integration]\n"
      example: []
      syntax:
        content:
          CSharp: OnShowText = 2
          VB: OnShowText = 2
        return:
          type: Febucci.UI.Core.TypewriterCore.StartTypewriterMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Febucci.UI.Core.TypewriterCore.StartTypewriterMode.AutomaticallyFromAllEvents
      commentId: F:Febucci.UI.Core.TypewriterCore.StartTypewriterMode.AutomaticallyFromAllEvents
      language: CSharp
      name:
        CSharp: AutomaticallyFromAllEvents
        VB: AutomaticallyFromAllEvents
      nameWithType:
        CSharp: TypewriterCore.StartTypewriterMode.AutomaticallyFromAllEvents
        VB: TypewriterCore.StartTypewriterMode.AutomaticallyFromAllEvents
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.StartTypewriterMode.AutomaticallyFromAllEvents
        VB: Febucci.UI.Core.TypewriterCore.StartTypewriterMode.AutomaticallyFromAllEvents
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: AutomaticallyFromAllEvents
        path: ''
        startLine: 5076
      syntax:
        content:
          CSharp: AutomaticallyFromAllEvents = 3
          VB: AutomaticallyFromAllEvents = 3
        return:
          type: Febucci.UI.Core.TypewriterCore.StartTypewriterMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Febucci.UI.Core.TypewriterCore.DisappearanceOrientation
    commentId: T:Febucci.UI.Core.TypewriterCore.DisappearanceOrientation
    language: CSharp
    name:
      CSharp: TypewriterCore.DisappearanceOrientation
      VB: TypewriterCore.DisappearanceOrientation
    nameWithType:
      CSharp: TypewriterCore.DisappearanceOrientation
      VB: TypewriterCore.DisappearanceOrientation
    qualifiedName:
      CSharp: Febucci.UI.Core.TypewriterCore.DisappearanceOrientation
      VB: Febucci.UI.Core.TypewriterCore.DisappearanceOrientation
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core
    source:
      id: DisappearanceOrientation
      path: ''
      startLine: 5131
    syntax:
      content:
        CSharp: public enum DisappearanceOrientation
        VB: Public Enum DisappearanceOrientation
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Febucci.UI.Core.TypewriterCore.DisappearanceOrientation.SameAsTypewriter
      commentId: F:Febucci.UI.Core.TypewriterCore.DisappearanceOrientation.SameAsTypewriter
      language: CSharp
      name:
        CSharp: SameAsTypewriter
        VB: SameAsTypewriter
      nameWithType:
        CSharp: TypewriterCore.DisappearanceOrientation.SameAsTypewriter
        VB: TypewriterCore.DisappearanceOrientation.SameAsTypewriter
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.DisappearanceOrientation.SameAsTypewriter
        VB: Febucci.UI.Core.TypewriterCore.DisappearanceOrientation.SameAsTypewriter
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: SameAsTypewriter
        path: ''
        startLine: 5136
      summary: "\nLinear left to right (or right to left based on the text&apos;s direction) \n"
      example: []
      syntax:
        content:
          CSharp: SameAsTypewriter = 0
          VB: SameAsTypewriter = 0
        return:
          type: Febucci.UI.Core.TypewriterCore.DisappearanceOrientation
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Febucci.UI.Core.TypewriterCore.DisappearanceOrientation.Inverted
      commentId: F:Febucci.UI.Core.TypewriterCore.DisappearanceOrientation.Inverted
      language: CSharp
      name:
        CSharp: Inverted
        VB: Inverted
      nameWithType:
        CSharp: TypewriterCore.DisappearanceOrientation.Inverted
        VB: TypewriterCore.DisappearanceOrientation.Inverted
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.DisappearanceOrientation.Inverted
        VB: Febucci.UI.Core.TypewriterCore.DisappearanceOrientation.Inverted
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: Inverted
        path: ''
        startLine: 5141
      summary: "\nOpposite direction of the typewriter\n"
      example: []
      syntax:
        content:
          CSharp: Inverted = 1
          VB: Inverted = 1
        return:
          type: Febucci.UI.Core.TypewriterCore.DisappearanceOrientation
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Febucci.UI.Core.TypewriterCore.DisappearanceOrientation.Random
      commentId: F:Febucci.UI.Core.TypewriterCore.DisappearanceOrientation.Random
      language: CSharp
      name:
        CSharp: Random
        VB: Random
      nameWithType:
        CSharp: TypewriterCore.DisappearanceOrientation.Random
        VB: TypewriterCore.DisappearanceOrientation.Random
      qualifiedName:
        CSharp: Febucci.UI.Core.TypewriterCore.DisappearanceOrientation.Random
        VB: Febucci.UI.Core.TypewriterCore.DisappearanceOrientation.Random
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: Random
        path: ''
        startLine: 5146
      summary: "\nHides letters randomly from start to finish\n"
      example: []
      syntax:
        content:
          CSharp: Random = 2
          VB: Random = 2
        return:
          type: Febucci.UI.Core.TypewriterCore.DisappearanceOrientation
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Febucci.UI.Core.TypingInfo
    commentId: T:Febucci.UI.Core.TypingInfo
    language: CSharp
    name:
      CSharp: TypingInfo
      VB: TypingInfo
    nameWithType:
      CSharp: TypingInfo
      VB: TypingInfo
    qualifiedName:
      CSharp: Febucci.UI.Core.TypingInfo
      VB: Febucci.UI.Core.TypingInfo
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core
    source:
      id: TypingInfo
      path: ''
      startLine: 5759
    summary: "\nA way to store information about the typing progress between coroutines,\nalso allowing to keep track of time between frames and characters/words showed\n"
    example: []
    syntax:
      content:
        CSharp: public class TypingInfo
        VB: Public Class TypingInfo
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Febucci.UI.Core.TypingInfo.speed
      commentId: F:Febucci.UI.Core.TypingInfo.speed
      language: CSharp
      name:
        CSharp: speed
        VB: speed
      nameWithType:
        CSharp: TypingInfo.speed
        VB: TypingInfo.speed
      qualifiedName:
        CSharp: Febucci.UI.Core.TypingInfo.speed
        VB: Febucci.UI.Core.TypingInfo.speed
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: speed
        path: ''
        startLine: 5761
      syntax:
        content:
          CSharp: public float speed
          VB: Public speed As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.TypingInfo.timePassed
      commentId: P:Febucci.UI.Core.TypingInfo.timePassed
      language: CSharp
      name:
        CSharp: timePassed
        VB: timePassed
      nameWithType:
        CSharp: TypingInfo.timePassed
        VB: TypingInfo.timePassed
      qualifiedName:
        CSharp: Febucci.UI.Core.TypingInfo.timePassed
        VB: Febucci.UI.Core.TypingInfo.timePassed
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: timePassed
        path: ''
        startLine: 5762
      syntax:
        content:
          CSharp: public float timePassed { get; }
          VB: Public ReadOnly Property timePassed As Single
        parameters: []
        return:
          type: System.Single
      overload: Febucci.UI.Core.TypingInfo.timePassed*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Febucci.UI.Core.TypingInfo.#ctor
      commentId: M:Febucci.UI.Core.TypingInfo.#ctor
      language: CSharp
      name:
        CSharp: TypingInfo()
        VB: TypingInfo()
      nameWithType:
        CSharp: TypingInfo.TypingInfo()
        VB: TypingInfo.TypingInfo()
      qualifiedName:
        CSharp: Febucci.UI.Core.TypingInfo.TypingInfo()
        VB: Febucci.UI.Core.TypingInfo.TypingInfo()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: .ctor
        path: ''
        startLine: 5764
      syntax:
        content:
          CSharp: public TypingInfo()
          VB: Public Sub New
      overload: Febucci.UI.Core.TypingInfo.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Febucci.UI.Core.CharacterData
    commentId: T:Febucci.UI.Core.CharacterData
    language: CSharp
    name:
      CSharp: CharacterData
      VB: CharacterData
    nameWithType:
      CSharp: CharacterData
      VB: CharacterData
    qualifiedName:
      CSharp: Febucci.UI.Core.CharacterData
      VB: Febucci.UI.Core.CharacterData
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core
    source:
      id: CharacterData
      path: ''
      startLine: 6479
    syntax:
      content:
        CSharp: public struct CharacterData
        VB: Public Structure CharacterData
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Febucci.UI.Core.CharacterData.info
      commentId: F:Febucci.UI.Core.CharacterData.info
      language: CSharp
      name:
        CSharp: info
        VB: info
      nameWithType:
        CSharp: CharacterData.info
        VB: CharacterData.info
      qualifiedName:
        CSharp: Febucci.UI.Core.CharacterData.info
        VB: Febucci.UI.Core.CharacterData.info
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: info
        path: ''
        startLine: 6481
      syntax:
        content:
          CSharp: public CharInfo info
          VB: Public info As CharInfo
        return:
          type: Febucci.UI.Core.CharInfo
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.CharacterData.index
      commentId: F:Febucci.UI.Core.CharacterData.index
      language: CSharp
      name:
        CSharp: index
        VB: index
      nameWithType:
        CSharp: CharacterData.index
        VB: CharacterData.index
      qualifiedName:
        CSharp: Febucci.UI.Core.CharacterData.index
        VB: Febucci.UI.Core.CharacterData.index
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: index
        path: ''
        startLine: 6483
      syntax:
        content:
          CSharp: public int index
          VB: Public index As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.CharacterData.wordIndex
      commentId: F:Febucci.UI.Core.CharacterData.wordIndex
      language: CSharp
      name:
        CSharp: wordIndex
        VB: wordIndex
      nameWithType:
        CSharp: CharacterData.wordIndex
        VB: CharacterData.wordIndex
      qualifiedName:
        CSharp: Febucci.UI.Core.CharacterData.wordIndex
        VB: Febucci.UI.Core.CharacterData.wordIndex
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: wordIndex
        path: ''
        startLine: 6484
      syntax:
        content:
          CSharp: public int wordIndex
          VB: Public wordIndex As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.CharacterData.isVisible
      commentId: F:Febucci.UI.Core.CharacterData.isVisible
      language: CSharp
      name:
        CSharp: isVisible
        VB: isVisible
      nameWithType:
        CSharp: CharacterData.isVisible
        VB: CharacterData.isVisible
      qualifiedName:
        CSharp: Febucci.UI.Core.CharacterData.isVisible
        VB: Febucci.UI.Core.CharacterData.isVisible
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: isVisible
        path: ''
        startLine: 6485
      syntax:
        content:
          CSharp: public bool isVisible
          VB: Public isVisible As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.CharacterData.passedTime
      commentId: F:Febucci.UI.Core.CharacterData.passedTime
      language: CSharp
      name:
        CSharp: passedTime
        VB: passedTime
      nameWithType:
        CSharp: CharacterData.passedTime
        VB: CharacterData.passedTime
      qualifiedName:
        CSharp: Febucci.UI.Core.CharacterData.passedTime
        VB: Febucci.UI.Core.CharacterData.passedTime
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: passedTime
        path: ''
        startLine: 6486
      syntax:
        content:
          CSharp: public float passedTime
          VB: Public passedTime As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.CharacterData.uniformIntensity
      commentId: F:Febucci.UI.Core.CharacterData.uniformIntensity
      language: CSharp
      name:
        CSharp: uniformIntensity
        VB: uniformIntensity
      nameWithType:
        CSharp: CharacterData.uniformIntensity
        VB: CharacterData.uniformIntensity
      qualifiedName:
        CSharp: Febucci.UI.Core.CharacterData.uniformIntensity
        VB: Febucci.UI.Core.CharacterData.uniformIntensity
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: uniformIntensity
        path: ''
        startLine: 6488
      syntax:
        content:
          CSharp: public float uniformIntensity
          VB: Public uniformIntensity As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.CharacterData.source
      commentId: F:Febucci.UI.Core.CharacterData.source
      language: CSharp
      name:
        CSharp: source
        VB: source
      nameWithType:
        CSharp: CharacterData.source
        VB: CharacterData.source
      qualifiedName:
        CSharp: Febucci.UI.Core.CharacterData.source
        VB: Febucci.UI.Core.CharacterData.source
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: source
        path: ''
        startLine: 6490
      syntax:
        content:
          CSharp: public MeshData source
          VB: Public source As MeshData
        return:
          type: Febucci.UI.Core.MeshData
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.CharacterData.current
      commentId: F:Febucci.UI.Core.CharacterData.current
      language: CSharp
      name:
        CSharp: current
        VB: current
      nameWithType:
        CSharp: CharacterData.current
        VB: CharacterData.current
      qualifiedName:
        CSharp: Febucci.UI.Core.CharacterData.current
        VB: Febucci.UI.Core.CharacterData.current
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: current
        path: ''
        startLine: 6491
      syntax:
        content:
          CSharp: public MeshData current
          VB: Public current As MeshData
        return:
          type: Febucci.UI.Core.MeshData
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.CharacterData.ResetInfo(System.Int32,System.Boolean)
      commentId: M:Febucci.UI.Core.CharacterData.ResetInfo(System.Int32,System.Boolean)
      language: CSharp
      name:
        CSharp: ResetInfo(Int32, Boolean)
        VB: ResetInfo(Int32, Boolean)
      nameWithType:
        CSharp: CharacterData.ResetInfo(Int32, Boolean)
        VB: CharacterData.ResetInfo(Int32, Boolean)
      qualifiedName:
        CSharp: Febucci.UI.Core.CharacterData.ResetInfo(System.Int32, System.Boolean)
        VB: Febucci.UI.Core.CharacterData.ResetInfo(System.Int32, System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: ResetInfo
        path: ''
        startLine: 6493
      syntax:
        content:
          CSharp: public void ResetInfo(int i, bool resetVisibility = true)
          VB: Public Sub ResetInfo(i As Integer, resetVisibility As Boolean = True)
        parameters:
        - id: i
          type: System.Int32
        - id: resetVisibility
          type: System.Boolean
      overload: Febucci.UI.Core.CharacterData.ResetInfo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.CharacterData.ResetAnimation
      commentId: M:Febucci.UI.Core.CharacterData.ResetAnimation
      language: CSharp
      name:
        CSharp: ResetAnimation()
        VB: ResetAnimation()
      nameWithType:
        CSharp: CharacterData.ResetAnimation()
        VB: CharacterData.ResetAnimation()
      qualifiedName:
        CSharp: Febucci.UI.Core.CharacterData.ResetAnimation()
        VB: Febucci.UI.Core.CharacterData.ResetAnimation()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: ResetAnimation
        path: ''
        startLine: 6514
      syntax:
        content:
          CSharp: public void ResetAnimation()
          VB: Public Sub ResetAnimation
      overload: Febucci.UI.Core.CharacterData.ResetAnimation*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.CharacterData.Hide
      commentId: M:Febucci.UI.Core.CharacterData.Hide
      language: CSharp
      name:
        CSharp: Hide()
        VB: Hide()
      nameWithType:
        CSharp: CharacterData.Hide()
        VB: CharacterData.Hide()
      qualifiedName:
        CSharp: Febucci.UI.Core.CharacterData.Hide()
        VB: Febucci.UI.Core.CharacterData.Hide()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: Hide
        path: ''
        startLine: 6523
      syntax:
        content:
          CSharp: public void Hide()
          VB: Public Sub Hide
      overload: Febucci.UI.Core.CharacterData.Hide*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.CharacterData.UpdateIntensity(System.Single)
      commentId: M:Febucci.UI.Core.CharacterData.UpdateIntensity(System.Single)
      language: CSharp
      name:
        CSharp: UpdateIntensity(Single)
        VB: UpdateIntensity(Single)
      nameWithType:
        CSharp: CharacterData.UpdateIntensity(Single)
        VB: CharacterData.UpdateIntensity(Single)
      qualifiedName:
        CSharp: Febucci.UI.Core.CharacterData.UpdateIntensity(System.Single)
        VB: Febucci.UI.Core.CharacterData.UpdateIntensity(System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: UpdateIntensity
        path: ''
        startLine: 6531
      syntax:
        content:
          CSharp: public void UpdateIntensity(float referenceFontSize)
          VB: Public Sub UpdateIntensity(referenceFontSize As Single)
        parameters:
        - id: referenceFontSize
          type: System.Single
      overload: Febucci.UI.Core.CharacterData.UpdateIntensity*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Febucci.UI.Core.CharInfo
    commentId: T:Febucci.UI.Core.CharInfo
    language: CSharp
    name:
      CSharp: CharInfo
      VB: CharInfo
    nameWithType:
      CSharp: CharInfo
      VB: CharInfo
    qualifiedName:
      CSharp: Febucci.UI.Core.CharInfo
      VB: Febucci.UI.Core.CharInfo
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core
    source:
      id: CharInfo
      path: ''
      startLine: 6539
    syntax:
      content:
        CSharp: public struct CharInfo
        VB: Public Structure CharInfo
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Febucci.UI.Core.CharInfo.disappearancesMaxDuration
      commentId: F:Febucci.UI.Core.CharInfo.disappearancesMaxDuration
      language: CSharp
      name:
        CSharp: disappearancesMaxDuration
        VB: disappearancesMaxDuration
      nameWithType:
        CSharp: CharInfo.disappearancesMaxDuration
        VB: CharInfo.disappearancesMaxDuration
      qualifiedName:
        CSharp: Febucci.UI.Core.CharInfo.disappearancesMaxDuration
        VB: Febucci.UI.Core.CharInfo.disappearancesMaxDuration
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: disappearancesMaxDuration
        path: ''
        startLine: 6542
      syntax:
        content:
          CSharp: public float disappearancesMaxDuration
          VB: Public disappearancesMaxDuration As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.CharInfo.appearancesMaxDuration
      commentId: F:Febucci.UI.Core.CharInfo.appearancesMaxDuration
      language: CSharp
      name:
        CSharp: appearancesMaxDuration
        VB: appearancesMaxDuration
      nameWithType:
        CSharp: CharInfo.appearancesMaxDuration
        VB: CharInfo.appearancesMaxDuration
      qualifiedName:
        CSharp: Febucci.UI.Core.CharInfo.appearancesMaxDuration
        VB: Febucci.UI.Core.CharInfo.appearancesMaxDuration
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: appearancesMaxDuration
        path: ''
        startLine: 6543
      syntax:
        content:
          CSharp: public float appearancesMaxDuration
          VB: Public appearancesMaxDuration As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.CharInfo.pointSize
      commentId: F:Febucci.UI.Core.CharInfo.pointSize
      language: CSharp
      name:
        CSharp: pointSize
        VB: pointSize
      nameWithType:
        CSharp: CharInfo.pointSize
        VB: CharInfo.pointSize
      qualifiedName:
        CSharp: Febucci.UI.Core.CharInfo.pointSize
        VB: Febucci.UI.Core.CharInfo.pointSize
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: pointSize
        path: ''
        startLine: 6545
      syntax:
        content:
          CSharp: public float pointSize
          VB: Public pointSize As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.CharInfo.character
      commentId: F:Febucci.UI.Core.CharInfo.character
      language: CSharp
      name:
        CSharp: character
        VB: character
      nameWithType:
        CSharp: CharInfo.character
        VB: CharInfo.character
      qualifiedName:
        CSharp: Febucci.UI.Core.CharInfo.character
        VB: Febucci.UI.Core.CharInfo.character
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: character
        path: ''
        startLine: 6547
      syntax:
        content:
          CSharp: public char character
          VB: Public character As Char
        return:
          type: System.Char
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.CharInfo.isRendered
      commentId: F:Febucci.UI.Core.CharInfo.isRendered
      language: CSharp
      name:
        CSharp: isRendered
        VB: isRendered
      nameWithType:
        CSharp: CharInfo.isRendered
        VB: CharInfo.isRendered
      qualifiedName:
        CSharp: Febucci.UI.Core.CharInfo.isRendered
        VB: Febucci.UI.Core.CharInfo.isRendered
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: isRendered
        path: ''
        startLine: 6548
      syntax:
        content:
          CSharp: public bool isRendered
          VB: Public isRendered As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Febucci.UI.Core.Database`1
    commentId: T:Febucci.UI.Core.Database`1
    language: CSharp
    name:
      CSharp: Database<T>
      VB: Database(Of T)
    nameWithType:
      CSharp: Database<T>
      VB: Database(Of T)
    qualifiedName:
      CSharp: Febucci.UI.Core.Database<T>
      VB: Febucci.UI.Core.Database(Of T)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core
    source:
      id: Database
      path: ''
      startLine: 6560
    summary: "\nCaches information about tag providers, so that\nit&apos;s easier to access them\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class Database<T> : UnityEngine.ScriptableObject where T : UnityEngine.ScriptableObject, ITagProvider
        VB: >-
          <Serializable>

          Public Class Database(Of T As {UnityEngine.ScriptableObject, ITagProvider})

              Inherits UnityEngine.ScriptableObject
      typeParameters:
      - id: T
        description: ''
    inheritance:
    - System.Object
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Febucci.UI.Core.Database`1.Data
      commentId: P:Febucci.UI.Core.Database`1.Data
      language: CSharp
      name:
        CSharp: Data
        VB: Data
      nameWithType:
        CSharp: Database<T>.Data
        VB: Database(Of T).Data
      qualifiedName:
        CSharp: Febucci.UI.Core.Database<T>.Data
        VB: Febucci.UI.Core.Database(Of T).Data
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: Data
        path: ''
        startLine: 6573
      syntax:
        content:
          CSharp: public List<T> Data { get; }
          VB: Public ReadOnly Property Data As List(Of T)
        parameters: []
        return:
          type: System.Collections.Generic.List{{T}}
      overload: Febucci.UI.Core.Database`1.Data*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Febucci.UI.Core.Database`1.Add(`0)
      commentId: M:Febucci.UI.Core.Database`1.Add(`0)
      language: CSharp
      name:
        CSharp: Add(T)
        VB: Add(T)
      nameWithType:
        CSharp: Database<T>.Add(T)
        VB: Database(Of T).Add(T)
      qualifiedName:
        CSharp: Febucci.UI.Core.Database<T>.Add(T)
        VB: Febucci.UI.Core.Database(Of T).Add(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: Add
        path: ''
        startLine: 6575
      syntax:
        content:
          CSharp: public void Add(T element)
          VB: Public Sub Add(element As T)
        parameters:
        - id: element
          type: '{T}'
      overload: Febucci.UI.Core.Database`1.Add*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Database`1.ForceBuildRefresh
      commentId: M:Febucci.UI.Core.Database`1.ForceBuildRefresh
      language: CSharp
      name:
        CSharp: ForceBuildRefresh()
        VB: ForceBuildRefresh()
      nameWithType:
        CSharp: Database<T>.ForceBuildRefresh()
        VB: Database(Of T).ForceBuildRefresh()
      qualifiedName:
        CSharp: Febucci.UI.Core.Database<T>.ForceBuildRefresh()
        VB: Febucci.UI.Core.Database(Of T).ForceBuildRefresh()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: ForceBuildRefresh
        path: ''
        startLine: 6597
      syntax:
        content:
          CSharp: public void ForceBuildRefresh()
          VB: Public Sub ForceBuildRefresh
      overload: Febucci.UI.Core.Database`1.ForceBuildRefresh*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Database`1.BuildOnce
      commentId: M:Febucci.UI.Core.Database`1.BuildOnce
      language: CSharp
      name:
        CSharp: BuildOnce()
        VB: BuildOnce()
      nameWithType:
        CSharp: Database<T>.BuildOnce()
        VB: Database(Of T).BuildOnce()
      qualifiedName:
        CSharp: Febucci.UI.Core.Database<T>.BuildOnce()
        VB: Febucci.UI.Core.Database(Of T).BuildOnce()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: BuildOnce
        path: ''
        startLine: 6603
      syntax:
        content:
          CSharp: public void BuildOnce()
          VB: Public Sub BuildOnce
      overload: Febucci.UI.Core.Database`1.BuildOnce*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Database`1.OnBuildOnce
      commentId: M:Febucci.UI.Core.Database`1.OnBuildOnce
      language: CSharp
      name:
        CSharp: OnBuildOnce()
        VB: OnBuildOnce()
      nameWithType:
        CSharp: Database<T>.OnBuildOnce()
        VB: Database(Of T).OnBuildOnce()
      qualifiedName:
        CSharp: Febucci.UI.Core.Database<T>.OnBuildOnce()
        VB: Febucci.UI.Core.Database(Of T).OnBuildOnce()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: OnBuildOnce
        path: ''
        startLine: 6639
      syntax:
        content:
          CSharp: protected virtual void OnBuildOnce()
          VB: Protected Overridable Sub OnBuildOnce
      overload: Febucci.UI.Core.Database`1.OnBuildOnce*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: Febucci.UI.Core.Database`1.ContainsKey(System.String)
      commentId: M:Febucci.UI.Core.Database`1.ContainsKey(System.String)
      language: CSharp
      name:
        CSharp: ContainsKey(String)
        VB: ContainsKey(String)
      nameWithType:
        CSharp: Database<T>.ContainsKey(String)
        VB: Database(Of T).ContainsKey(String)
      qualifiedName:
        CSharp: Febucci.UI.Core.Database<T>.ContainsKey(System.String)
        VB: Febucci.UI.Core.Database(Of T).ContainsKey(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: ContainsKey
        path: ''
        startLine: 6641
      syntax:
        content:
          CSharp: public bool ContainsKey(string key)
          VB: Public Function ContainsKey(key As String) As Boolean
        parameters:
        - id: key
          type: System.String
        return:
          type: System.Boolean
      overload: Febucci.UI.Core.Database`1.ContainsKey*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Database`1.Item(System.String)
      commentId: P:Febucci.UI.Core.Database`1.Item(System.String)
      language: CSharp
      name:
        CSharp: Item[String]
        VB: Item(String)
      nameWithType:
        CSharp: Database<T>.Item[String]
        VB: Database(Of T).Item(String)
      qualifiedName:
        CSharp: Febucci.UI.Core.Database<T>.Item[System.String]
        VB: Febucci.UI.Core.Database(Of T).Item(System.String)
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: this[]
        path: ''
        startLine: 6647
      syntax:
        content:
          CSharp: public T this[string key] { get; }
          VB: Public ReadOnly Property Item(key As String) As T
        parameters:
        - id: key
          type: System.String
        return:
          type: '{T}'
      overload: Febucci.UI.Core.Database`1.Item*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Febucci.UI.Core.Database`1.DestroyImmediate(System.Boolean)
      commentId: M:Febucci.UI.Core.Database`1.DestroyImmediate(System.Boolean)
      language: CSharp
      name:
        CSharp: DestroyImmediate(Boolean)
        VB: DestroyImmediate(Boolean)
      nameWithType:
        CSharp: Database<T>.DestroyImmediate(Boolean)
        VB: Database(Of T).DestroyImmediate(Boolean)
      qualifiedName:
        CSharp: Febucci.UI.Core.Database<T>.DestroyImmediate(System.Boolean)
        VB: Febucci.UI.Core.Database(Of T).DestroyImmediate(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: DestroyImmediate
        path: ''
        startLine: 6656
      syntax:
        content:
          CSharp: public void DestroyImmediate(bool databaseOnly = false)
          VB: Public Sub DestroyImmediate(databaseOnly As Boolean = False)
        parameters:
        - id: databaseOnly
          type: System.Boolean
      overload: Febucci.UI.Core.Database`1.DestroyImmediate*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Febucci.UI.Core.ITagProvider
    commentId: T:Febucci.UI.Core.ITagProvider
    language: CSharp
    name:
      CSharp: ITagProvider
      VB: ITagProvider
    nameWithType:
      CSharp: ITagProvider
      VB: ITagProvider
    qualifiedName:
      CSharp: Febucci.UI.Core.ITagProvider
      VB: Febucci.UI.Core.ITagProvider
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core
    source:
      id: ITagProvider
      path: ''
      startLine: 6672
    syntax:
      content:
        CSharp: public interface ITagProvider
        VB: Public Interface ITagProvider
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: Febucci.UI.Core.ITagProvider.TagID
      commentId: P:Febucci.UI.Core.ITagProvider.TagID
      language: CSharp
      name:
        CSharp: TagID
        VB: TagID
      nameWithType:
        CSharp: ITagProvider.TagID
        VB: ITagProvider.TagID
      qualifiedName:
        CSharp: Febucci.UI.Core.ITagProvider.TagID
        VB: Febucci.UI.Core.ITagProvider.TagID
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: TagID
        path: ''
        startLine: 6674
      syntax:
        content:
          CSharp: string TagID { get; set; }
          VB: Property TagID As String
        parameters: []
        return:
          type: System.String
      overload: Febucci.UI.Core.ITagProvider.TagID*
      modifiers:
        CSharp:
        - get
        - set
        VB: []
  - id: Febucci.UI.Core.MeshData
    commentId: T:Febucci.UI.Core.MeshData
    language: CSharp
    name:
      CSharp: MeshData
      VB: MeshData
    nameWithType:
      CSharp: MeshData
      VB: MeshData
    qualifiedName:
      CSharp: Febucci.UI.Core.MeshData
      VB: Febucci.UI.Core.MeshData
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core
    source:
      id: MeshData
      path: ''
      startLine: 6681
    syntax:
      content:
        CSharp: 'public struct MeshData : IEquatable<MeshData>'
        VB: >-
          Public Structure MeshData

              Implements IEquatable(Of MeshData)
    implements:
    - System.IEquatable{Febucci.UI.Core.MeshData}
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Febucci.UI.Core.MeshData.positions
      commentId: F:Febucci.UI.Core.MeshData.positions
      language: CSharp
      name:
        CSharp: positions
        VB: positions
      nameWithType:
        CSharp: MeshData.positions
        VB: MeshData.positions
      qualifiedName:
        CSharp: Febucci.UI.Core.MeshData.positions
        VB: Febucci.UI.Core.MeshData.positions
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: positions
        path: ''
        startLine: 6683
      syntax:
        content:
          CSharp: public Vector3[] positions
          VB: Public positions As Vector3()
        return:
          type: Vector3[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.MeshData.colors
      commentId: F:Febucci.UI.Core.MeshData.colors
      language: CSharp
      name:
        CSharp: colors
        VB: colors
      nameWithType:
        CSharp: MeshData.colors
        VB: MeshData.colors
      qualifiedName:
        CSharp: Febucci.UI.Core.MeshData.colors
        VB: Febucci.UI.Core.MeshData.colors
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: colors
        path: ''
        startLine: 6684
      syntax:
        content:
          CSharp: public Color32[] colors
          VB: Public colors As Color32()
        return:
          type: Color32[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.MeshData.Equals(Febucci.UI.Core.MeshData)
      commentId: M:Febucci.UI.Core.MeshData.Equals(Febucci.UI.Core.MeshData)
      language: CSharp
      name:
        CSharp: Equals(MeshData)
        VB: Equals(MeshData)
      nameWithType:
        CSharp: MeshData.Equals(MeshData)
        VB: MeshData.Equals(MeshData)
      qualifiedName:
        CSharp: Febucci.UI.Core.MeshData.Equals(Febucci.UI.Core.MeshData)
        VB: Febucci.UI.Core.MeshData.Equals(Febucci.UI.Core.MeshData)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: Equals
        path: ''
        startLine: 6687
      syntax:
        content:
          CSharp: public bool Equals(MeshData other)
          VB: Public Function Equals(other As MeshData) As Boolean
        parameters:
        - id: other
          type: Febucci.UI.Core.MeshData
        return:
          type: System.Boolean
      overload: Febucci.UI.Core.MeshData.Equals*
      implements:
      - System.IEquatable{Febucci.UI.Core.MeshData}.Equals(Febucci.UI.Core.MeshData)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.MeshData.ToString
      commentId: M:Febucci.UI.Core.MeshData.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: MeshData.ToString()
        VB: MeshData.ToString()
      qualifiedName:
        CSharp: Febucci.UI.Core.MeshData.ToString()
        VB: Febucci.UI.Core.MeshData.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: ToString
        path: ''
        startLine: 6706
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: Febucci.UI.Core.MeshData.ToString*
      overridden: System.ValueType.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Core.WordInfo
    commentId: T:Febucci.UI.Core.WordInfo
    language: CSharp
    name:
      CSharp: WordInfo
      VB: WordInfo
    nameWithType:
      CSharp: WordInfo
      VB: WordInfo
    qualifiedName:
      CSharp: Febucci.UI.Core.WordInfo
      VB: Febucci.UI.Core.WordInfo
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core
    source:
      id: WordInfo
      path: ''
      startLine: 6805
    syntax:
      content:
        CSharp: public struct WordInfo
        VB: Public Structure WordInfo
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Febucci.UI.Core.WordInfo.firstCharacterIndex
      commentId: F:Febucci.UI.Core.WordInfo.firstCharacterIndex
      language: CSharp
      name:
        CSharp: firstCharacterIndex
        VB: firstCharacterIndex
      nameWithType:
        CSharp: WordInfo.firstCharacterIndex
        VB: WordInfo.firstCharacterIndex
      qualifiedName:
        CSharp: Febucci.UI.Core.WordInfo.firstCharacterIndex
        VB: Febucci.UI.Core.WordInfo.firstCharacterIndex
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: firstCharacterIndex
        path: ''
        startLine: 6807
      syntax:
        content:
          CSharp: public readonly int firstCharacterIndex
          VB: Public ReadOnly firstCharacterIndex As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - readonly
        VB:
        - Public
        - ReadOnly
    - id: Febucci.UI.Core.WordInfo.lastCharacterIndex
      commentId: F:Febucci.UI.Core.WordInfo.lastCharacterIndex
      language: CSharp
      name:
        CSharp: lastCharacterIndex
        VB: lastCharacterIndex
      nameWithType:
        CSharp: WordInfo.lastCharacterIndex
        VB: WordInfo.lastCharacterIndex
      qualifiedName:
        CSharp: Febucci.UI.Core.WordInfo.lastCharacterIndex
        VB: Febucci.UI.Core.WordInfo.lastCharacterIndex
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: lastCharacterIndex
        path: ''
        startLine: 6808
      syntax:
        content:
          CSharp: public readonly int lastCharacterIndex
          VB: Public ReadOnly lastCharacterIndex As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - readonly
        VB:
        - Public
        - ReadOnly
    - id: Febucci.UI.Core.WordInfo.text
      commentId: F:Febucci.UI.Core.WordInfo.text
      language: CSharp
      name:
        CSharp: text
        VB: text
      nameWithType:
        CSharp: WordInfo.text
        VB: WordInfo.text
      qualifiedName:
        CSharp: Febucci.UI.Core.WordInfo.text
        VB: Febucci.UI.Core.WordInfo.text
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: text
        path: ''
        startLine: 6809
      syntax:
        content:
          CSharp: public readonly string text
          VB: Public ReadOnly text As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        - readonly
        VB:
        - Public
        - ReadOnly
    - id: Febucci.UI.Core.WordInfo.#ctor(System.Int32,System.Int32,System.String)
      commentId: M:Febucci.UI.Core.WordInfo.#ctor(System.Int32,System.Int32,System.String)
      language: CSharp
      name:
        CSharp: WordInfo(Int32, Int32, String)
        VB: WordInfo(Int32, Int32, String)
      nameWithType:
        CSharp: WordInfo.WordInfo(Int32, Int32, String)
        VB: WordInfo.WordInfo(Int32, Int32, String)
      qualifiedName:
        CSharp: Febucci.UI.Core.WordInfo.WordInfo(System.Int32, System.Int32, System.String)
        VB: Febucci.UI.Core.WordInfo.WordInfo(System.Int32, System.Int32, System.String)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: .ctor
        path: ''
        startLine: 6811
      syntax:
        content:
          CSharp: public WordInfo(int firstCharacterIndex, int lastCharacterIndex, string text)
          VB: Public Sub New(firstCharacterIndex As Integer, lastCharacterIndex As Integer, text As String)
        parameters:
        - id: firstCharacterIndex
          type: System.Int32
        - id: lastCharacterIndex
          type: System.Int32
        - id: text
          type: System.String
      overload: Febucci.UI.Core.WordInfo.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Febucci.UI.Core.DefaultValueAttribute
    commentId: T:Febucci.UI.Core.DefaultValueAttribute
    language: CSharp
    name:
      CSharp: DefaultValueAttribute
      VB: DefaultValueAttribute
    nameWithType:
      CSharp: DefaultValueAttribute
      VB: DefaultValueAttribute
    qualifiedName:
      CSharp: Febucci.UI.Core.DefaultValueAttribute
      VB: Febucci.UI.Core.DefaultValueAttribute
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core
    source:
      id: DefaultValueAttribute
      path: ''
      startLine: 8644
    syntax:
      content:
        CSharp: 'public class DefaultValueAttribute : Attribute'
        VB: >-
          Public Class DefaultValueAttribute

              Inherits Attribute
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Febucci.UI.Core.DefaultValueAttribute.variableName
      commentId: F:Febucci.UI.Core.DefaultValueAttribute.variableName
      language: CSharp
      name:
        CSharp: variableName
        VB: variableName
      nameWithType:
        CSharp: DefaultValueAttribute.variableName
        VB: DefaultValueAttribute.variableName
      qualifiedName:
        CSharp: Febucci.UI.Core.DefaultValueAttribute.variableName
        VB: Febucci.UI.Core.DefaultValueAttribute.variableName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: variableName
        path: ''
        startLine: 8647
      syntax:
        content:
          CSharp: public readonly string variableName
          VB: Public ReadOnly variableName As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        - readonly
        VB:
        - Public
        - ReadOnly
    - id: Febucci.UI.Core.DefaultValueAttribute.variableValue
      commentId: F:Febucci.UI.Core.DefaultValueAttribute.variableValue
      language: CSharp
      name:
        CSharp: variableValue
        VB: variableValue
      nameWithType:
        CSharp: DefaultValueAttribute.variableValue
        VB: DefaultValueAttribute.variableValue
      qualifiedName:
        CSharp: Febucci.UI.Core.DefaultValueAttribute.variableValue
        VB: Febucci.UI.Core.DefaultValueAttribute.variableValue
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: variableValue
        path: ''
        startLine: 8648
      syntax:
        content:
          CSharp: public readonly float variableValue
          VB: Public ReadOnly variableValue As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        - readonly
        VB:
        - Public
        - ReadOnly
    - id: Febucci.UI.Core.DefaultValueAttribute.#ctor(System.String,System.Single)
      commentId: M:Febucci.UI.Core.DefaultValueAttribute.#ctor(System.String,System.Single)
      language: CSharp
      name:
        CSharp: DefaultValueAttribute(String, Single)
        VB: DefaultValueAttribute(String, Single)
      nameWithType:
        CSharp: DefaultValueAttribute.DefaultValueAttribute(String, Single)
        VB: DefaultValueAttribute.DefaultValueAttribute(String, Single)
      qualifiedName:
        CSharp: Febucci.UI.Core.DefaultValueAttribute.DefaultValueAttribute(System.String, System.Single)
        VB: Febucci.UI.Core.DefaultValueAttribute.DefaultValueAttribute(System.String, System.Single)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: .ctor
        path: ''
        startLine: 8650
      syntax:
        content:
          CSharp: public DefaultValueAttribute(string variableName, float variableValue)
          VB: Public Sub New(variableName As String, variableValue As Single)
        parameters:
        - id: variableName
          type: System.String
        - id: variableValue
          type: System.Single
      overload: Febucci.UI.Core.DefaultValueAttribute.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Febucci.UI.Core.EffectCategory
    commentId: T:Febucci.UI.Core.EffectCategory
    language: CSharp
    name:
      CSharp: EffectCategory
      VB: EffectCategory
    nameWithType:
      CSharp: EffectCategory
      VB: EffectCategory
    qualifiedName:
      CSharp: Febucci.UI.Core.EffectCategory
      VB: Febucci.UI.Core.EffectCategory
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core
    source:
      id: EffectCategory
      path: ''
      startLine: 8661
    syntax:
      content:
        CSharp: public enum EffectCategory
        VB: Public Enum EffectCategory
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Febucci.UI.Core.EffectCategory.None
      commentId: F:Febucci.UI.Core.EffectCategory.None
      language: CSharp
      name:
        CSharp: None
        VB: None
      nameWithType:
        CSharp: EffectCategory.None
        VB: EffectCategory.None
      qualifiedName:
        CSharp: Febucci.UI.Core.EffectCategory.None
        VB: Febucci.UI.Core.EffectCategory.None
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: None
        path: ''
        startLine: 8664
      syntax:
        content:
          CSharp: None = 0
          VB: None = 0
        return:
          type: Febucci.UI.Core.EffectCategory
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Febucci.UI.Core.EffectCategory.Behaviors
      commentId: F:Febucci.UI.Core.EffectCategory.Behaviors
      language: CSharp
      name:
        CSharp: Behaviors
        VB: Behaviors
      nameWithType:
        CSharp: EffectCategory.Behaviors
        VB: EffectCategory.Behaviors
      qualifiedName:
        CSharp: Febucci.UI.Core.EffectCategory.Behaviors
        VB: Febucci.UI.Core.EffectCategory.Behaviors
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: Behaviors
        path: ''
        startLine: 8665
      syntax:
        content:
          CSharp: Behaviors = 1
          VB: Behaviors = 1
        return:
          type: Febucci.UI.Core.EffectCategory
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Febucci.UI.Core.EffectCategory.Appearances
      commentId: F:Febucci.UI.Core.EffectCategory.Appearances
      language: CSharp
      name:
        CSharp: Appearances
        VB: Appearances
      nameWithType:
        CSharp: EffectCategory.Appearances
        VB: EffectCategory.Appearances
      qualifiedName:
        CSharp: Febucci.UI.Core.EffectCategory.Appearances
        VB: Febucci.UI.Core.EffectCategory.Appearances
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: Appearances
        path: ''
        startLine: 8666
      syntax:
        content:
          CSharp: Appearances = 2
          VB: Appearances = 2
        return:
          type: Febucci.UI.Core.EffectCategory
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Febucci.UI.Core.EffectCategory.All
      commentId: F:Febucci.UI.Core.EffectCategory.All
      language: CSharp
      name:
        CSharp: All
        VB: All
      nameWithType:
        CSharp: EffectCategory.All
        VB: EffectCategory.All
      qualifiedName:
        CSharp: Febucci.UI.Core.EffectCategory.All
        VB: Febucci.UI.Core.EffectCategory.All
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: All
        path: ''
        startLine: 8667
      syntax:
        content:
          CSharp: All = 3
          VB: All = 3
        return:
          type: Febucci.UI.Core.EffectCategory
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Febucci.UI.Core.TagInfoAttribute
    commentId: T:Febucci.UI.Core.TagInfoAttribute
    language: CSharp
    name:
      CSharp: TagInfoAttribute
      VB: TagInfoAttribute
    nameWithType:
      CSharp: TagInfoAttribute
      VB: TagInfoAttribute
    qualifiedName:
      CSharp: Febucci.UI.Core.TagInfoAttribute
      VB: Febucci.UI.Core.TagInfoAttribute
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core
    source:
      id: TagInfoAttribute
      path: ''
      startLine: 8670
    syntax:
      content:
        CSharp: 'public class TagInfoAttribute : Attribute'
        VB: >-
          Public Class TagInfoAttribute

              Inherits Attribute
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Febucci.UI.Core.TagInfoAttribute.tagID
      commentId: F:Febucci.UI.Core.TagInfoAttribute.tagID
      language: CSharp
      name:
        CSharp: tagID
        VB: tagID
      nameWithType:
        CSharp: TagInfoAttribute.tagID
        VB: TagInfoAttribute.tagID
      qualifiedName:
        CSharp: Febucci.UI.Core.TagInfoAttribute.tagID
        VB: Febucci.UI.Core.TagInfoAttribute.tagID
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: tagID
        path: ''
        startLine: 8673
      syntax:
        content:
          CSharp: public readonly string tagID
          VB: Public ReadOnly tagID As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        - readonly
        VB:
        - Public
        - ReadOnly
    - id: Febucci.UI.Core.TagInfoAttribute.#ctor(System.String)
      commentId: M:Febucci.UI.Core.TagInfoAttribute.#ctor(System.String)
      language: CSharp
      name:
        CSharp: TagInfoAttribute(String)
        VB: TagInfoAttribute(String)
      nameWithType:
        CSharp: TagInfoAttribute.TagInfoAttribute(String)
        VB: TagInfoAttribute.TagInfoAttribute(String)
      qualifiedName:
        CSharp: Febucci.UI.Core.TagInfoAttribute.TagInfoAttribute(System.String)
        VB: Febucci.UI.Core.TagInfoAttribute.TagInfoAttribute(System.String)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: .ctor
        path: ''
        startLine: 8674
      syntax:
        content:
          CSharp: public TagInfoAttribute(string tagID)
          VB: Public Sub New(tagID As String)
        parameters:
        - id: tagID
          type: System.String
      overload: Febucci.UI.Core.TagInfoAttribute.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Febucci.UI.Core.EffectInfoAttribute
    commentId: T:Febucci.UI.Core.EffectInfoAttribute
    language: CSharp
    name:
      CSharp: EffectInfoAttribute
      VB: EffectInfoAttribute
    nameWithType:
      CSharp: EffectInfoAttribute
      VB: EffectInfoAttribute
    qualifiedName:
      CSharp: Febucci.UI.Core.EffectInfoAttribute
      VB: Febucci.UI.Core.EffectInfoAttribute
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core
    source:
      id: EffectInfoAttribute
      path: ''
      startLine: 8680
    syntax:
      content:
        CSharp: 'public class EffectInfoAttribute : TagInfoAttribute'
        VB: >-
          Public Class EffectInfoAttribute

              Inherits TagInfoAttribute
    inheritance:
    - System.Object
    - Febucci.UI.Core.TagInfoAttribute
    inheritedMembers:
    - Febucci.UI.Core.TagInfoAttribute.tagID
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Febucci.UI.Core.EffectInfoAttribute.category
      commentId: F:Febucci.UI.Core.EffectInfoAttribute.category
      language: CSharp
      name:
        CSharp: category
        VB: category
      nameWithType:
        CSharp: EffectInfoAttribute.category
        VB: EffectInfoAttribute.category
      qualifiedName:
        CSharp: Febucci.UI.Core.EffectInfoAttribute.category
        VB: Febucci.UI.Core.EffectInfoAttribute.category
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: category
        path: ''
        startLine: 8683
      syntax:
        content:
          CSharp: public readonly EffectCategory category
          VB: Public ReadOnly category As EffectCategory
        return:
          type: Febucci.UI.Core.EffectCategory
      modifiers:
        CSharp:
        - public
        - readonly
        VB:
        - Public
        - ReadOnly
    - id: Febucci.UI.Core.EffectInfoAttribute.#ctor(System.String,Febucci.UI.Core.EffectCategory)
      commentId: M:Febucci.UI.Core.EffectInfoAttribute.#ctor(System.String,Febucci.UI.Core.EffectCategory)
      language: CSharp
      name:
        CSharp: EffectInfoAttribute(String, EffectCategory)
        VB: EffectInfoAttribute(String, EffectCategory)
      nameWithType:
        CSharp: EffectInfoAttribute.EffectInfoAttribute(String, EffectCategory)
        VB: EffectInfoAttribute.EffectInfoAttribute(String, EffectCategory)
      qualifiedName:
        CSharp: Febucci.UI.Core.EffectInfoAttribute.EffectInfoAttribute(System.String, Febucci.UI.Core.EffectCategory)
        VB: Febucci.UI.Core.EffectInfoAttribute.EffectInfoAttribute(System.String, Febucci.UI.Core.EffectCategory)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: .ctor
        path: ''
        startLine: 8685
      syntax:
        content:
          CSharp: public EffectInfoAttribute(string tagID, EffectCategory category)
          VB: Public Sub New(tagID As String, category As EffectCategory)
        parameters:
        - id: tagID
          type: System.String
        - id: category
          type: Febucci.UI.Core.EffectCategory
      overload: Febucci.UI.Core.EffectInfoAttribute.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Febucci.UI.Core.FormatUtils
    commentId: T:Febucci.UI.Core.FormatUtils
    language: CSharp
    name:
      CSharp: FormatUtils
      VB: FormatUtils
    nameWithType:
      CSharp: FormatUtils
      VB: FormatUtils
    qualifiedName:
      CSharp: Febucci.UI.Core.FormatUtils
      VB: Febucci.UI.Core.FormatUtils
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core
    source:
      id: FormatUtils
      path: ''
      startLine: 8902
    summary: "\nHelper class. Contains methods to parse attributes/values from strings.\n"
    example: []
    syntax:
      content:
        CSharp: public static class FormatUtils
        VB: Public Module FormatUtils
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: Febucci.UI.Core.FormatUtils.TryGetFloat(System.Collections.Generic.List{System.String},System.Int32,System.Single,System.Single@)
      commentId: M:Febucci.UI.Core.FormatUtils.TryGetFloat(System.Collections.Generic.List{System.String},System.Int32,System.Single,System.Single@)
      language: CSharp
      name:
        CSharp: TryGetFloat(List<String>, Int32, Single, out Single)
        VB: TryGetFloat(List(Of String), Int32, Single, ByRef Single)
      nameWithType:
        CSharp: FormatUtils.TryGetFloat(List<String>, Int32, Single, out Single)
        VB: FormatUtils.TryGetFloat(List(Of String), Int32, Single, ByRef Single)
      qualifiedName:
        CSharp: Febucci.UI.Core.FormatUtils.TryGetFloat(System.Collections.Generic.List<System.String>, System.Int32, System.Single, out System.Single)
        VB: Febucci.UI.Core.FormatUtils.TryGetFloat(System.Collections.Generic.List(Of System.String), System.Int32, System.Single, ByRef System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: TryGetFloat
        path: ''
        startLine: 8915
      summary: "\nTries to parse a rich text tag parameter.\n"
      remarks: "\nMostly used in combination with custom typewriter actions. (Manual: <a href=\"https://www.febucci.com/text-animator-unity/docs/writing-custom-actions-c-sharp/\">Writing Custom actions C#</a>)\n"
      example: []
      syntax:
        content:
          CSharp: public static bool TryGetFloat(List<string> attributes, int index, float defValue, out float result)
          VB: Public Shared Function TryGetFloat(attributes As List(Of String), index As Integer, defValue As Single, ByRef result As Single) As Boolean
        parameters:
        - id: attributes
          type: System.Collections.Generic.List{System.String}
          description: list of all the attributesi in the rich text tag
        - id: index
          type: System.Int32
          description: the parameter&apos;s index in the list
        - id: defValue
          type: System.Single
          description: default value, assigned if the parsing is not successful
        - id: result
          type: System.Single
          description: result from the parsing
        return:
          type: System.Boolean
          description: <code>true</code> if successful
      overload: Febucci.UI.Core.FormatUtils.TryGetFloat*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Febucci.UI.Core.FormatUtils.TryGetFloat(System.String,System.Single,System.Single@)
      commentId: M:Febucci.UI.Core.FormatUtils.TryGetFloat(System.String,System.Single,System.Single@)
      language: CSharp
      name:
        CSharp: TryGetFloat(String, Single, out Single)
        VB: TryGetFloat(String, Single, ByRef Single)
      nameWithType:
        CSharp: FormatUtils.TryGetFloat(String, Single, out Single)
        VB: FormatUtils.TryGetFloat(String, Single, ByRef Single)
      qualifiedName:
        CSharp: Febucci.UI.Core.FormatUtils.TryGetFloat(System.String, System.Single, out System.Single)
        VB: Febucci.UI.Core.FormatUtils.TryGetFloat(System.String, System.Single, ByRef System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: TryGetFloat
        path: ''
        startLine: 8927
      syntax:
        content:
          CSharp: public static bool TryGetFloat(string attribute, float defValue, out float result)
          VB: Public Shared Function TryGetFloat(attribute As String, defValue As Single, ByRef result As Single) As Boolean
        parameters:
        - id: attribute
          type: System.String
        - id: defValue
          type: System.Single
        - id: result
          type: System.Single
        return:
          type: System.Boolean
      overload: Febucci.UI.Core.FormatUtils.TryGetFloat*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Febucci.UI.Core.FormatUtils.ParseFloat(System.String,System.Single@)
      commentId: M:Febucci.UI.Core.FormatUtils.ParseFloat(System.String,System.Single@)
      language: CSharp
      name:
        CSharp: ParseFloat(String, out Single)
        VB: ParseFloat(String, ByRef Single)
      nameWithType:
        CSharp: FormatUtils.ParseFloat(String, out Single)
        VB: FormatUtils.ParseFloat(String, ByRef Single)
      qualifiedName:
        CSharp: Febucci.UI.Core.FormatUtils.ParseFloat(System.String, out System.Single)
        VB: Febucci.UI.Core.FormatUtils.ParseFloat(System.String, ByRef System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: ParseFloat
        path: ''
        startLine: 8942
      summary: "\nTries parsing a float given a string, independently of the system&apos;s culture\n"
      example: []
      syntax:
        content:
          CSharp: public static bool ParseFloat(string value, out float result)
          VB: Public Shared Function ParseFloat(value As String, ByRef result As Single) As Boolean
        parameters:
        - id: value
          type: System.String
          description: ''
        - id: result
          type: System.Single
          description: ''
        return:
          type: System.Boolean
          description: ''
      overload: Febucci.UI.Core.FormatUtils.ParseFloat*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Febucci.UI.Core.TextUtilities
    commentId: T:Febucci.UI.Core.TextUtilities
    language: CSharp
    name:
      CSharp: TextUtilities
      VB: TextUtilities
    nameWithType:
      CSharp: TextUtilities
      VB: TextUtilities
    qualifiedName:
      CSharp: Febucci.UI.Core.TextUtilities
      VB: Febucci.UI.Core.TextUtilities
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core
    source:
      id: TextUtilities
      path: ''
      startLine: 8956
    summary: "\nHelper class. Contains methods (including extensions) that modify your letters positions and colors.\n"
    example: []
    syntax:
      content:
        CSharp: public static class TextUtilities
        VB: Public Module TextUtilities
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: Febucci.UI.Core.TextUtilities.verticesPerChar
      commentId: F:Febucci.UI.Core.TextUtilities.verticesPerChar
      language: CSharp
      name:
        CSharp: verticesPerChar
        VB: verticesPerChar
      nameWithType:
        CSharp: TextUtilities.verticesPerChar
        VB: TextUtilities.verticesPerChar
      qualifiedName:
        CSharp: Febucci.UI.Core.TextUtilities.verticesPerChar
        VB: Febucci.UI.Core.TextUtilities.verticesPerChar
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: verticesPerChar
        path: ''
        startLine: 8966
      summary: "\nRepresents the number of vertices per character/letter.\n"
      remarks: "\nP.S. bars/underlines have a different vertices number, but are not animated by TextAnimator.\n"
      example: []
      syntax:
        content:
          CSharp: public const int verticesPerChar = 4
          VB: Public Const verticesPerChar As Integer = 4
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Febucci.UI.Core.TextUtilities.fakeRandomsCount
      commentId: F:Febucci.UI.Core.TextUtilities.fakeRandomsCount
      language: CSharp
      name:
        CSharp: fakeRandomsCount
        VB: fakeRandomsCount
      nameWithType:
        CSharp: TextUtilities.fakeRandomsCount
        VB: TextUtilities.fakeRandomsCount
      qualifiedName:
        CSharp: Febucci.UI.Core.TextUtilities.fakeRandomsCount
        VB: Febucci.UI.Core.TextUtilities.fakeRandomsCount
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: fakeRandomsCount
        path: ''
        startLine: 8972
      syntax:
        content:
          CSharp: public const int fakeRandomsCount = 25
          VB: Public Const fakeRandomsCount As Integer = 25
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Febucci.UI.Core.TextUtilities.FakeRandoms
      commentId: P:Febucci.UI.Core.TextUtilities.FakeRandoms
      language: CSharp
      name:
        CSharp: FakeRandoms
        VB: FakeRandoms
      nameWithType:
        CSharp: TextUtilities.FakeRandoms
        VB: TextUtilities.FakeRandoms
      qualifiedName:
        CSharp: Febucci.UI.Core.TextUtilities.FakeRandoms
        VB: Febucci.UI.Core.TextUtilities.FakeRandoms
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: FakeRandoms
        path: ''
        startLine: 8974
      syntax:
        content:
          CSharp: public static Vector3[] FakeRandoms { get; }
          VB: Public Shared ReadOnly Property FakeRandoms As Vector3()
        parameters: []
        return:
          type: Vector3[]
      overload: Febucci.UI.Core.TextUtilities.FakeRandoms*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - isExtensionMethod: true
      id: Febucci.UI.Core.TextUtilities.RotateAround(Vector3,Vector2,System.Single)
      commentId: M:Febucci.UI.Core.TextUtilities.RotateAround(Vector3,Vector2,System.Single)
      language: CSharp
      name:
        CSharp: RotateAround(Vector3, Vector2, Single)
        VB: RotateAround(Vector3, Vector2, Single)
      nameWithType:
        CSharp: TextUtilities.RotateAround(Vector3, Vector2, Single)
        VB: TextUtilities.RotateAround(Vector3, Vector2, Single)
      qualifiedName:
        CSharp: Febucci.UI.Core.TextUtilities.RotateAround(Vector3, Vector2, System.Single)
        VB: Febucci.UI.Core.TextUtilities.RotateAround(Vector3, Vector2, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: RotateAround
        path: ''
        startLine: 9015
      summary: "\nRotates a point around a 2D center by X degrees\n"
      example:
      - "\nletterVertex.RotateAround(letterMiddlePoint, angle);\n"
      syntax:
        content:
          CSharp: public static Vector3 RotateAround(this Vector3 vec, Vector2 center, float rotDegrees)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function RotateAround(vec As Vector3, center As Vector2, rotDegrees As Single) As Vector3
        parameters:
        - id: vec
          type: Vector3
          description: point to rotate
        - id: center
          type: Vector2
          description: rotation&apos;s center
        - id: rotDegrees
          type: System.Single
          description: rotation degrees
        return:
          type: Vector3
          description: ''
      overload: Febucci.UI.Core.TextUtilities.RotateAround*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Febucci.UI.Core.TextUtilities.MoveChar(Vector3[],Vector3)
      commentId: M:Febucci.UI.Core.TextUtilities.MoveChar(Vector3[],Vector3)
      language: CSharp
      name:
        CSharp: MoveChar(Vector3[], Vector3)
        VB: MoveChar(Vector3(), Vector3)
      nameWithType:
        CSharp: TextUtilities.MoveChar(Vector3[], Vector3)
        VB: TextUtilities.MoveChar(Vector3(), Vector3)
      qualifiedName:
        CSharp: Febucci.UI.Core.TextUtilities.MoveChar(Vector3[], Vector3)
        VB: Febucci.UI.Core.TextUtilities.MoveChar(Vector3(), Vector3)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: MoveChar
        path: ''
        startLine: 9039
      summary: "\nMoves a char towards a direction. Equivalent to adding a vector to all the vertices.\n"
      example: []
      syntax:
        content:
          CSharp: public static void MoveChar(this Vector3[] vec, Vector3 dir)
          VB: >-
            <ExtensionAttribute>

            Public Shared Sub MoveChar(vec As Vector3(), dir As Vector3)
        parameters:
        - id: vec
          type: Vector3[]
          description: ''
        - id: dir
          type: Vector3
          description: ''
      overload: Febucci.UI.Core.TextUtilities.MoveChar*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Febucci.UI.Core.TextUtilities.SetChar(Vector3[],Vector3)
      commentId: M:Febucci.UI.Core.TextUtilities.SetChar(Vector3[],Vector3)
      language: CSharp
      name:
        CSharp: SetChar(Vector3[], Vector3)
        VB: SetChar(Vector3(), Vector3)
      nameWithType:
        CSharp: TextUtilities.SetChar(Vector3[], Vector3)
        VB: TextUtilities.SetChar(Vector3(), Vector3)
      qualifiedName:
        CSharp: Febucci.UI.Core.TextUtilities.SetChar(Vector3[], Vector3)
        VB: Febucci.UI.Core.TextUtilities.SetChar(Vector3(), Vector3)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: SetChar
        path: ''
        startLine: 9053
      summary: "\nSets all the vertices of character to the given position.\n"
      example: []
      syntax:
        content:
          CSharp: public static void SetChar(this Vector3[] vec, Vector3 pos)
          VB: >-
            <ExtensionAttribute>

            Public Shared Sub SetChar(vec As Vector3(), pos As Vector3)
        parameters:
        - id: vec
          type: Vector3[]
          description: ''
        - id: pos
          type: Vector3
          description: ''
      overload: Febucci.UI.Core.TextUtilities.SetChar*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Febucci.UI.Core.TextUtilities.LerpUnclamped(Vector3[],Vector3,System.Single)
      commentId: M:Febucci.UI.Core.TextUtilities.LerpUnclamped(Vector3[],Vector3,System.Single)
      language: CSharp
      name:
        CSharp: LerpUnclamped(Vector3[], Vector3, Single)
        VB: LerpUnclamped(Vector3(), Vector3, Single)
      nameWithType:
        CSharp: TextUtilities.LerpUnclamped(Vector3[], Vector3, Single)
        VB: TextUtilities.LerpUnclamped(Vector3(), Vector3, Single)
      qualifiedName:
        CSharp: Febucci.UI.Core.TextUtilities.LerpUnclamped(Vector3[], Vector3, System.Single)
        VB: Febucci.UI.Core.TextUtilities.LerpUnclamped(Vector3(), Vector3, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: LerpUnclamped
        path: ''
        startLine: 9068
      summary: "\nLerps all the character&apos;s vertices (without checking if pct is between 0 and 1)\n"
      example: []
      syntax:
        content:
          CSharp: public static void LerpUnclamped(this Vector3[] vec, Vector3 target, float pct)
          VB: >-
            <ExtensionAttribute>

            Public Shared Sub LerpUnclamped(vec As Vector3(), target As Vector3, pct As Single)
        parameters:
        - id: vec
          type: Vector3[]
          description: ''
        - id: target
          type: Vector3
          description: ''
        - id: pct
          type: System.Single
          description: ''
      overload: Febucci.UI.Core.TextUtilities.LerpUnclamped*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Febucci.UI.Core.TextUtilities.GetMiddlePos(Vector3[])
      commentId: M:Febucci.UI.Core.TextUtilities.GetMiddlePos(Vector3[])
      language: CSharp
      name:
        CSharp: GetMiddlePos(Vector3[])
        VB: GetMiddlePos(Vector3())
      nameWithType:
        CSharp: TextUtilities.GetMiddlePos(Vector3[])
        VB: TextUtilities.GetMiddlePos(Vector3())
      qualifiedName:
        CSharp: Febucci.UI.Core.TextUtilities.GetMiddlePos(Vector3[])
        VB: Febucci.UI.Core.TextUtilities.GetMiddlePos(Vector3())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: GetMiddlePos
        path: ''
        startLine: 9081
      summary: "\nReturns the middle position of the given array\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector3 GetMiddlePos(this Vector3[] vec)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function GetMiddlePos(vec As Vector3()) As Vector3
        parameters:
        - id: vec
          type: Vector3[]
          description: ''
        return:
          type: Vector3
          description: ''
      overload: Febucci.UI.Core.TextUtilities.GetMiddlePos*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Febucci.UI.Core.TextUtilities.RotateChar(Vector3[],System.Single)
      commentId: M:Febucci.UI.Core.TextUtilities.RotateChar(Vector3[],System.Single)
      language: CSharp
      name:
        CSharp: RotateChar(Vector3[], Single)
        VB: RotateChar(Vector3(), Single)
      nameWithType:
        CSharp: TextUtilities.RotateChar(Vector3[], Single)
        VB: TextUtilities.RotateChar(Vector3(), Single)
      qualifiedName:
        CSharp: Febucci.UI.Core.TextUtilities.RotateChar(Vector3[], System.Single)
        VB: Febucci.UI.Core.TextUtilities.RotateChar(Vector3(), System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: RotateChar
        path: ''
        startLine: 9104
      summary: "\nRotates all the vertices towards an angle, with their center as the rotation pivot\n"
      example: []
      syntax:
        content:
          CSharp: public static void RotateChar(this Vector3[] vec, float angle)
          VB: >-
            <ExtensionAttribute>

            Public Shared Sub RotateChar(vec As Vector3(), angle As Single)
        parameters:
        - id: vec
          type: Vector3[]
          description: ''
        - id: angle
          type: System.Single
          description: ''
      overload: Febucci.UI.Core.TextUtilities.RotateChar*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Febucci.UI.Core.TextUtilities.RotateChar(Vector3[],System.Single,Vector3)
      commentId: M:Febucci.UI.Core.TextUtilities.RotateChar(Vector3[],System.Single,Vector3)
      language: CSharp
      name:
        CSharp: RotateChar(Vector3[], Single, Vector3)
        VB: RotateChar(Vector3(), Single, Vector3)
      nameWithType:
        CSharp: TextUtilities.RotateChar(Vector3[], Single, Vector3)
        VB: TextUtilities.RotateChar(Vector3(), Single, Vector3)
      qualifiedName:
        CSharp: Febucci.UI.Core.TextUtilities.RotateChar(Vector3[], System.Single, Vector3)
        VB: Febucci.UI.Core.TextUtilities.RotateChar(Vector3(), System.Single, Vector3)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: RotateChar
        path: ''
        startLine: 9113
      syntax:
        content:
          CSharp: public static void RotateChar(this Vector3[] vec, float angle, Vector3 pivot)
          VB: >-
            <ExtensionAttribute>

            Public Shared Sub RotateChar(vec As Vector3(), angle As Single, pivot As Vector3)
        parameters:
        - id: vec
          type: Vector3[]
        - id: angle
          type: System.Single
        - id: pivot
          type: Vector3
      overload: Febucci.UI.Core.TextUtilities.RotateChar*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Febucci.UI.Core.TextUtilities.SetColor(Color32[],Color32)
      commentId: M:Febucci.UI.Core.TextUtilities.SetColor(Color32[],Color32)
      language: CSharp
      name:
        CSharp: SetColor(Color32[], Color32)
        VB: SetColor(Color32(), Color32)
      nameWithType:
        CSharp: TextUtilities.SetColor(Color32[], Color32)
        VB: TextUtilities.SetColor(Color32(), Color32)
      qualifiedName:
        CSharp: Febucci.UI.Core.TextUtilities.SetColor(Color32[], Color32)
        VB: Febucci.UI.Core.TextUtilities.SetColor(Color32(), Color32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: SetColor
        path: ''
        startLine: 9127
      summary: "\nSets the color of all the vertices of the character.\n"
      example: []
      syntax:
        content:
          CSharp: public static void SetColor(this Color32[] col, Color32 target)
          VB: >-
            <ExtensionAttribute>

            Public Shared Sub SetColor(col As Color32(), target As Color32)
        parameters:
        - id: col
          type: Color32[]
          description: ''
        - id: target
          type: Color32
          description: ''
      overload: Febucci.UI.Core.TextUtilities.SetColor*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Febucci.UI.Core.TextUtilities.LerpUnclamped(Color32[],Color32,System.Single)
      commentId: M:Febucci.UI.Core.TextUtilities.LerpUnclamped(Color32[],Color32,System.Single)
      language: CSharp
      name:
        CSharp: LerpUnclamped(Color32[], Color32, Single)
        VB: LerpUnclamped(Color32(), Color32, Single)
      nameWithType:
        CSharp: TextUtilities.LerpUnclamped(Color32[], Color32, Single)
        VB: TextUtilities.LerpUnclamped(Color32(), Color32, Single)
      qualifiedName:
        CSharp: Febucci.UI.Core.TextUtilities.LerpUnclamped(Color32[], Color32, System.Single)
        VB: Febucci.UI.Core.TextUtilities.LerpUnclamped(Color32(), Color32, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: LerpUnclamped
        path: ''
        startLine: 9142
      summary: "\nLerps all the colors of the characters towards a given target\n"
      example: []
      syntax:
        content:
          CSharp: public static void LerpUnclamped(this Color32[] col, Color32 target, float pct)
          VB: >-
            <ExtensionAttribute>

            Public Shared Sub LerpUnclamped(col As Color32(), target As Color32, pct As Single)
        parameters:
        - id: col
          type: Color32[]
          description: ''
        - id: target
          type: Color32
          description: ''
        - id: pct
          type: System.Single
          description: ''
      overload: Febucci.UI.Core.TextUtilities.LerpUnclamped*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Febucci.UI.Core.TextUtilities.CalculateCurveDuration(AnimationCurve)
      commentId: M:Febucci.UI.Core.TextUtilities.CalculateCurveDuration(AnimationCurve)
      language: CSharp
      name:
        CSharp: CalculateCurveDuration(AnimationCurve)
        VB: CalculateCurveDuration(AnimationCurve)
      nameWithType:
        CSharp: TextUtilities.CalculateCurveDuration(AnimationCurve)
        VB: TextUtilities.CalculateCurveDuration(AnimationCurve)
      qualifiedName:
        CSharp: Febucci.UI.Core.TextUtilities.CalculateCurveDuration(AnimationCurve)
        VB: Febucci.UI.Core.TextUtilities.CalculateCurveDuration(AnimationCurve)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core
      source:
        id: CalculateCurveDuration
        path: ''
        startLine: 9156
      summary: "\nCalculates the animation curve duration\n"
      example: []
      syntax:
        content:
          CSharp: public static float CalculateCurveDuration(this AnimationCurve curve)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function CalculateCurveDuration(curve As AnimationCurve) As Single
        parameters:
        - id: curve
          type: AnimationCurve
          description: ''
        return:
          type: System.Single
          description: ''
      overload: Febucci.UI.Core.TextUtilities.CalculateCurveDuration*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
- id: Febucci.UI.Core.Parsing
  commentId: N:Febucci.UI.Core.Parsing
  language: CSharp
  name:
    CSharp: Febucci.UI.Core.Parsing
    VB: Febucci.UI.Core.Parsing
  nameWithType:
    CSharp: Febucci.UI.Core.Parsing
    VB: Febucci.UI.Core.Parsing
  qualifiedName:
    CSharp: Febucci.UI.Core.Parsing
    VB: Febucci.UI.Core.Parsing
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: Febucci.UI.Core.Parsing.TMPTagParser
    commentId: T:Febucci.UI.Core.Parsing.TMPTagParser
    language: CSharp
    name:
      CSharp: TMPTagParser
      VB: TMPTagParser
    nameWithType:
      CSharp: TMPTagParser
      VB: TMPTagParser
    qualifiedName:
      CSharp: Febucci.UI.Core.Parsing.TMPTagParser
      VB: Febucci.UI.Core.Parsing.TMPTagParser
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core.Parsing
    source:
      id: TMPTagParser
      path: ''
      startLine: 3297
    syntax:
      content:
        CSharp: 'public class TMPTagParser : TagParserBase'
        VB: >-
          Public Class TMPTagParser

              Inherits TagParserBase
    inheritance:
    - System.Object
    - Febucci.UI.Core.Parsing.TagParserBase
    inheritedMembers:
    - Febucci.UI.Core.Parsing.TagParserBase.startSymbol
    - Febucci.UI.Core.Parsing.TagParserBase.endSymbol
    - Febucci.UI.Core.Parsing.TagParserBase.closingSymbol
    - Febucci.UI.Core.Parsing.TagParserBase.Initialize
    - Febucci.UI.Core.Parsing.TagParserBase.OnInitialize
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Febucci.UI.Core.Parsing.TMPTagParser.#ctor(System.Boolean,System.Char,System.Char,System.Char)
      commentId: M:Febucci.UI.Core.Parsing.TMPTagParser.#ctor(System.Boolean,System.Char,System.Char,System.Char)
      language: CSharp
      name:
        CSharp: TMPTagParser(Boolean, Char, Char, Char)
        VB: TMPTagParser(Boolean, Char, Char, Char)
      nameWithType:
        CSharp: TMPTagParser.TMPTagParser(Boolean, Char, Char, Char)
        VB: TMPTagParser.TMPTagParser(Boolean, Char, Char, Char)
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.TMPTagParser.TMPTagParser(System.Boolean, System.Char, System.Char, System.Char)
        VB: Febucci.UI.Core.Parsing.TMPTagParser.TMPTagParser(System.Boolean, System.Char, System.Char, System.Char)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: .ctor
        path: ''
        startLine: 3354
      syntax:
        content:
          CSharp: public TMPTagParser(bool richTagsEnabled, char openingBracket, char closingBracket, char closingTagSymbol)
          VB: Public Sub New(richTagsEnabled As Boolean, openingBracket As Char, closingBracket As Char, closingTagSymbol As Char)
        parameters:
        - id: richTagsEnabled
          type: System.Boolean
        - id: openingBracket
          type: System.Char
        - id: closingBracket
          type: System.Char
        - id: closingTagSymbol
          type: System.Char
      overload: Febucci.UI.Core.Parsing.TMPTagParser.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Parsing.TMPTagParser.TryProcessingTag(System.String,System.Int32,System.Int32@,StringBuilder,System.Int32)
      commentId: M:Febucci.UI.Core.Parsing.TMPTagParser.TryProcessingTag(System.String,System.Int32,System.Int32@,StringBuilder,System.Int32)
      language: CSharp
      name:
        CSharp: TryProcessingTag(String, Int32, ref Int32, StringBuilder, Int32)
        VB: TryProcessingTag(String, Int32, ByRef Int32, StringBuilder, Int32)
      nameWithType:
        CSharp: TMPTagParser.TryProcessingTag(String, Int32, ref Int32, StringBuilder, Int32)
        VB: TMPTagParser.TryProcessingTag(String, Int32, ByRef Int32, StringBuilder, Int32)
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.TMPTagParser.TryProcessingTag(System.String, System.Int32, ref System.Int32, StringBuilder, System.Int32)
        VB: Febucci.UI.Core.Parsing.TMPTagParser.TryProcessingTag(System.String, System.Int32, ByRef System.Int32, StringBuilder, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: TryProcessingTag
        path: ''
        startLine: 3360
      syntax:
        content:
          CSharp: public override bool TryProcessingTag(string textInsideBrackets, int tagLength, ref int realTextIndex, StringBuilder finalTextBuilder, int internalOrder)
          VB: Public Overrides Function TryProcessingTag(textInsideBrackets As String, tagLength As Integer, ByRef realTextIndex As Integer, finalTextBuilder As StringBuilder, internalOrder As Integer) As Boolean
        parameters:
        - id: textInsideBrackets
          type: System.String
        - id: tagLength
          type: System.Int32
        - id: realTextIndex
          type: System.Int32
        - id: finalTextBuilder
          type: StringBuilder
        - id: internalOrder
          type: System.Int32
        return:
          type: System.Boolean
      overload: Febucci.UI.Core.Parsing.TMPTagParser.TryProcessingTag*
      overridden: Febucci.UI.Core.Parsing.TagParserBase.TryProcessingTag(System.String,System.Int32,System.Int32@,StringBuilder,System.Int32)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Core.Parsing.TextParser
    commentId: T:Febucci.UI.Core.Parsing.TextParser
    language: CSharp
    name:
      CSharp: TextParser
      VB: TextParser
    nameWithType:
      CSharp: TextParser
      VB: TextParser
    qualifiedName:
      CSharp: Febucci.UI.Core.Parsing.TextParser
      VB: Febucci.UI.Core.Parsing.TextParser
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core.Parsing
    source:
      id: TextParser
      path: ''
      startLine: 5778
    summary: "\nHandles text parsing and rich text tags recognition\n"
    example: []
    syntax:
      content:
        CSharp: public static class TextParser
        VB: Public Module TextParser
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: Febucci.UI.Core.Parsing.TextParser.ParseText(System.String,Febucci.UI.Core.Parsing.TagParserBase[])
      commentId: M:Febucci.UI.Core.Parsing.TextParser.ParseText(System.String,Febucci.UI.Core.Parsing.TagParserBase[])
      language: CSharp
      name:
        CSharp: ParseText(String, TagParserBase[])
        VB: ParseText(String, TagParserBase())
      nameWithType:
        CSharp: TextParser.ParseText(String, TagParserBase[])
        VB: TextParser.ParseText(String, TagParserBase())
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.TextParser.ParseText(System.String, Febucci.UI.Core.Parsing.TagParserBase[])
        VB: Febucci.UI.Core.Parsing.TextParser.ParseText(System.String, Febucci.UI.Core.Parsing.TagParserBase())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: ParseText
        path: ''
        startLine: 5780
      syntax:
        content:
          CSharp: public static string ParseText(string text, params TagParserBase[] rules)
          VB: Public Shared Function ParseText(text As String, ParamArray rules As TagParserBase()) As String
        parameters:
        - id: text
          type: System.String
        - id: rules
          type: Febucci.UI.Core.Parsing.TagParserBase[]
        return:
          type: System.String
      overload: Febucci.UI.Core.Parsing.TextParser.ParseText*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Febucci.UI.Core.Parsing.ActionMarker
    commentId: T:Febucci.UI.Core.Parsing.ActionMarker
    language: CSharp
    name:
      CSharp: ActionMarker
      VB: ActionMarker
    nameWithType:
      CSharp: ActionMarker
      VB: ActionMarker
    qualifiedName:
      CSharp: Febucci.UI.Core.Parsing.ActionMarker
      VB: Febucci.UI.Core.Parsing.ActionMarker
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core.Parsing
    source:
      id: ActionMarker
      path: ''
      startLine: 5906
    summary: "\nContains information about an action tag in text.\n"
    example: []
    syntax:
      content:
        CSharp: 'public sealed class ActionMarker : MarkerBase, IComparable<MarkerBase>'
        VB: >-
          Public NotInheritable Class ActionMarker

              Inherits MarkerBase

              Implements IComparable(Of MarkerBase)
    inheritance:
    - System.Object
    - Febucci.UI.Core.Parsing.MarkerBase
    implements:
    - System.IComparable{Febucci.UI.Core.Parsing.MarkerBase}
    inheritedMembers:
    - Febucci.UI.Core.Parsing.MarkerBase.name
    - Febucci.UI.Core.Parsing.MarkerBase.index
    - Febucci.UI.Core.Parsing.MarkerBase.parameters
    - Febucci.UI.Core.Parsing.MarkerBase.CompareTo(Febucci.UI.Core.Parsing.MarkerBase)
    - Febucci.UI.Core.Parsing.MarkerBase.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Febucci.UI.Core.Parsing.ActionMarker.#ctor(System.String,System.Int32,System.Int32,System.String[])
      commentId: M:Febucci.UI.Core.Parsing.ActionMarker.#ctor(System.String,System.Int32,System.Int32,System.String[])
      language: CSharp
      name:
        CSharp: ActionMarker(String, Int32, Int32, String[])
        VB: ActionMarker(String, Int32, Int32, String())
      nameWithType:
        CSharp: ActionMarker.ActionMarker(String, Int32, Int32, String[])
        VB: ActionMarker.ActionMarker(String, Int32, Int32, String())
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.ActionMarker.ActionMarker(System.String, System.Int32, System.Int32, System.String[])
        VB: Febucci.UI.Core.Parsing.ActionMarker.ActionMarker(System.String, System.Int32, System.Int32, System.String())
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: .ctor
        path: ''
        startLine: 5908
      syntax:
        content:
          CSharp: public ActionMarker(string name, int index, int internalOrder, string[] parameters)
          VB: Public Sub New(name As String, index As Integer, internalOrder As Integer, parameters As String())
        parameters:
        - id: name
          type: System.String
        - id: index
          type: System.Int32
        - id: internalOrder
          type: System.Int32
        - id: parameters
          type: System.String[]
      overload: Febucci.UI.Core.Parsing.ActionMarker.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Febucci.UI.Core.Parsing.ActionParser
    commentId: T:Febucci.UI.Core.Parsing.ActionParser
    language: CSharp
    name:
      CSharp: ActionParser
      VB: ActionParser
    nameWithType:
      CSharp: ActionParser
      VB: ActionParser
    qualifiedName:
      CSharp: Febucci.UI.Core.Parsing.ActionParser
      VB: Febucci.UI.Core.Parsing.ActionParser
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core.Parsing
    source:
      id: ActionParser
      path: ''
      startLine: 5916
    syntax:
      content:
        CSharp: 'public sealed class ActionParser : TagParserBase'
        VB: >-
          Public NotInheritable Class ActionParser

              Inherits TagParserBase
    inheritance:
    - System.Object
    - Febucci.UI.Core.Parsing.TagParserBase
    inheritedMembers:
    - Febucci.UI.Core.Parsing.TagParserBase.startSymbol
    - Febucci.UI.Core.Parsing.TagParserBase.endSymbol
    - Febucci.UI.Core.Parsing.TagParserBase.closingSymbol
    - Febucci.UI.Core.Parsing.TagParserBase.Initialize
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Febucci.UI.Core.Parsing.ActionParser.database
      commentId: F:Febucci.UI.Core.Parsing.ActionParser.database
      language: CSharp
      name:
        CSharp: database
        VB: database
      nameWithType:
        CSharp: ActionParser.database
        VB: ActionParser.database
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.ActionParser.database
        VB: Febucci.UI.Core.Parsing.ActionParser.database
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: database
        path: ''
        startLine: 5918
      syntax:
        content:
          CSharp: public ActionDatabase database
          VB: Public database As ActionDatabase
        return:
          type: ActionDatabase
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Parsing.ActionParser.results
      commentId: P:Febucci.UI.Core.Parsing.ActionParser.results
      language: CSharp
      name:
        CSharp: results
        VB: results
      nameWithType:
        CSharp: ActionParser.results
        VB: ActionParser.results
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.ActionParser.results
        VB: Febucci.UI.Core.Parsing.ActionParser.results
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: results
        path: ''
        startLine: 5922
      syntax:
        content:
          CSharp: public ActionMarker[] results { get; }
          VB: Public ReadOnly Property results As ActionMarker()
        parameters: []
        return:
          type: Febucci.UI.Core.Parsing.ActionMarker[]
      overload: Febucci.UI.Core.Parsing.ActionParser.results*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Febucci.UI.Core.Parsing.ActionParser.#ctor(System.Char,System.Char,System.Char,ActionDatabase)
      commentId: M:Febucci.UI.Core.Parsing.ActionParser.#ctor(System.Char,System.Char,System.Char,ActionDatabase)
      language: CSharp
      name:
        CSharp: ActionParser(Char, Char, Char, ActionDatabase)
        VB: ActionParser(Char, Char, Char, ActionDatabase)
      nameWithType:
        CSharp: ActionParser.ActionParser(Char, Char, Char, ActionDatabase)
        VB: ActionParser.ActionParser(Char, Char, Char, ActionDatabase)
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.ActionParser.ActionParser(System.Char, System.Char, System.Char, ActionDatabase)
        VB: Febucci.UI.Core.Parsing.ActionParser.ActionParser(System.Char, System.Char, System.Char, ActionDatabase)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: .ctor
        path: ''
        startLine: 5924
      syntax:
        content:
          CSharp: public ActionParser(char startSymbol, char closingSymbol, char endSymbol, ActionDatabase actionDatabase)
          VB: Public Sub New(startSymbol As Char, closingSymbol As Char, endSymbol As Char, actionDatabase As ActionDatabase)
        parameters:
        - id: startSymbol
          type: System.Char
        - id: closingSymbol
          type: System.Char
        - id: endSymbol
          type: System.Char
        - id: actionDatabase
          type: ActionDatabase
      overload: Febucci.UI.Core.Parsing.ActionParser.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Parsing.ActionParser.OnInitialize
      commentId: M:Febucci.UI.Core.Parsing.ActionParser.OnInitialize
      language: CSharp
      name:
        CSharp: OnInitialize()
        VB: OnInitialize()
      nameWithType:
        CSharp: ActionParser.OnInitialize()
        VB: ActionParser.OnInitialize()
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.ActionParser.OnInitialize()
        VB: Febucci.UI.Core.Parsing.ActionParser.OnInitialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: OnInitialize
        path: ''
        startLine: 5930
      syntax:
        content:
          CSharp: protected override void OnInitialize()
          VB: Protected Overrides Sub OnInitialize
      overload: Febucci.UI.Core.Parsing.ActionParser.OnInitialize*
      overridden: Febucci.UI.Core.Parsing.TagParserBase.OnInitialize
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: Febucci.UI.Core.Parsing.ActionParser.TryProcessingTag(System.String,System.Int32,System.Int32@,StringBuilder,System.Int32)
      commentId: M:Febucci.UI.Core.Parsing.ActionParser.TryProcessingTag(System.String,System.Int32,System.Int32@,StringBuilder,System.Int32)
      language: CSharp
      name:
        CSharp: TryProcessingTag(String, Int32, ref Int32, StringBuilder, Int32)
        VB: TryProcessingTag(String, Int32, ByRef Int32, StringBuilder, Int32)
      nameWithType:
        CSharp: ActionParser.TryProcessingTag(String, Int32, ref Int32, StringBuilder, Int32)
        VB: ActionParser.TryProcessingTag(String, Int32, ByRef Int32, StringBuilder, Int32)
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.ActionParser.TryProcessingTag(System.String, System.Int32, ref System.Int32, StringBuilder, System.Int32)
        VB: Febucci.UI.Core.Parsing.ActionParser.TryProcessingTag(System.String, System.Int32, ByRef System.Int32, StringBuilder, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: TryProcessingTag
        path: ''
        startLine: 5937
      syntax:
        content:
          CSharp: public override bool TryProcessingTag(string textInsideBrackets, int tagLength, ref int realTextIndex, StringBuilder finalTextBuilder, int internalOrder)
          VB: Public Overrides Function TryProcessingTag(textInsideBrackets As String, tagLength As Integer, ByRef realTextIndex As Integer, finalTextBuilder As StringBuilder, internalOrder As Integer) As Boolean
        parameters:
        - id: textInsideBrackets
          type: System.String
        - id: tagLength
          type: System.Int32
        - id: realTextIndex
          type: System.Int32
        - id: finalTextBuilder
          type: StringBuilder
        - id: internalOrder
          type: System.Int32
        return:
          type: System.Boolean
      overload: Febucci.UI.Core.Parsing.ActionParser.TryProcessingTag*
      overridden: Febucci.UI.Core.Parsing.TagParserBase.TryProcessingTag(System.String,System.Int32,System.Int32@,StringBuilder,System.Int32)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Core.Parsing.EventMarker
    commentId: T:Febucci.UI.Core.Parsing.EventMarker
    language: CSharp
    name:
      CSharp: EventMarker
      VB: EventMarker
    nameWithType:
      CSharp: EventMarker
      VB: EventMarker
    qualifiedName:
      CSharp: Febucci.UI.Core.Parsing.EventMarker
      VB: Febucci.UI.Core.Parsing.EventMarker
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core.Parsing
    source:
      id: EventMarker
      path: ''
      startLine: 5978
    summary: "\nContains information about an event called in text\n"
    example: []
    syntax:
      content:
        CSharp: 'public class EventMarker : MarkerBase, IComparable<MarkerBase>'
        VB: >-
          Public Class EventMarker

              Inherits MarkerBase

              Implements IComparable(Of MarkerBase)
    inheritance:
    - System.Object
    - Febucci.UI.Core.Parsing.MarkerBase
    implements:
    - System.IComparable{Febucci.UI.Core.Parsing.MarkerBase}
    inheritedMembers:
    - Febucci.UI.Core.Parsing.MarkerBase.name
    - Febucci.UI.Core.Parsing.MarkerBase.index
    - Febucci.UI.Core.Parsing.MarkerBase.parameters
    - Febucci.UI.Core.Parsing.MarkerBase.CompareTo(Febucci.UI.Core.Parsing.MarkerBase)
    - Febucci.UI.Core.Parsing.MarkerBase.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Febucci.UI.Core.Parsing.EventMarker.#ctor(System.String,System.Int32,System.Int32,System.String[])
      commentId: M:Febucci.UI.Core.Parsing.EventMarker.#ctor(System.String,System.Int32,System.Int32,System.String[])
      language: CSharp
      name:
        CSharp: EventMarker(String, Int32, Int32, String[])
        VB: EventMarker(String, Int32, Int32, String())
      nameWithType:
        CSharp: EventMarker.EventMarker(String, Int32, Int32, String[])
        VB: EventMarker.EventMarker(String, Int32, Int32, String())
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.EventMarker.EventMarker(System.String, System.Int32, System.Int32, System.String[])
        VB: Febucci.UI.Core.Parsing.EventMarker.EventMarker(System.String, System.Int32, System.Int32, System.String())
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: .ctor
        path: ''
        startLine: 5980
      syntax:
        content:
          CSharp: public EventMarker(string name, int index, int internalOrder, string[] parameters)
          VB: Public Sub New(name As String, index As Integer, internalOrder As Integer, parameters As String())
        parameters:
        - id: name
          type: System.String
        - id: index
          type: System.Int32
        - id: internalOrder
          type: System.Int32
        - id: parameters
          type: System.String[]
      overload: Febucci.UI.Core.Parsing.EventMarker.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Febucci.UI.Core.Parsing.EventParser
    commentId: T:Febucci.UI.Core.Parsing.EventParser
    language: CSharp
    name:
      CSharp: EventParser
      VB: EventParser
    nameWithType:
      CSharp: EventParser
      VB: EventParser
    qualifiedName:
      CSharp: Febucci.UI.Core.Parsing.EventParser
      VB: Febucci.UI.Core.Parsing.EventParser
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core.Parsing
    source:
      id: EventParser
      path: ''
      startLine: 5987
    syntax:
      content:
        CSharp: 'public class EventParser : TagParserBase'
        VB: >-
          Public Class EventParser

              Inherits TagParserBase
    inheritance:
    - System.Object
    - Febucci.UI.Core.Parsing.TagParserBase
    inheritedMembers:
    - Febucci.UI.Core.Parsing.TagParserBase.startSymbol
    - Febucci.UI.Core.Parsing.TagParserBase.endSymbol
    - Febucci.UI.Core.Parsing.TagParserBase.closingSymbol
    - Febucci.UI.Core.Parsing.TagParserBase.Initialize
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Febucci.UI.Core.Parsing.EventParser.#ctor(System.Char,System.Char,System.Char)
      commentId: M:Febucci.UI.Core.Parsing.EventParser.#ctor(System.Char,System.Char,System.Char)
      language: CSharp
      name:
        CSharp: EventParser(Char, Char, Char)
        VB: EventParser(Char, Char, Char)
      nameWithType:
        CSharp: EventParser.EventParser(Char, Char, Char)
        VB: EventParser.EventParser(Char, Char, Char)
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.EventParser.EventParser(System.Char, System.Char, System.Char)
        VB: Febucci.UI.Core.Parsing.EventParser.EventParser(System.Char, System.Char, System.Char)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: .ctor
        path: ''
        startLine: 5991
      syntax:
        content:
          CSharp: public EventParser(char openingBracket, char closingBracket, char closingTagSymbol)
          VB: Public Sub New(openingBracket As Char, closingBracket As Char, closingTagSymbol As Char)
        parameters:
        - id: openingBracket
          type: System.Char
        - id: closingBracket
          type: System.Char
        - id: closingTagSymbol
          type: System.Char
      overload: Febucci.UI.Core.Parsing.EventParser.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Parsing.EventParser.results
      commentId: P:Febucci.UI.Core.Parsing.EventParser.results
      language: CSharp
      name:
        CSharp: results
        VB: results
      nameWithType:
        CSharp: EventParser.results
        VB: EventParser.results
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.EventParser.results
        VB: Febucci.UI.Core.Parsing.EventParser.results
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: results
        path: ''
        startLine: 5996
      syntax:
        content:
          CSharp: public EventMarker[] results { get; }
          VB: Public ReadOnly Property results As EventMarker()
        parameters: []
        return:
          type: Febucci.UI.Core.Parsing.EventMarker[]
      overload: Febucci.UI.Core.Parsing.EventParser.results*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Febucci.UI.Core.Parsing.EventParser.OnInitialize
      commentId: M:Febucci.UI.Core.Parsing.EventParser.OnInitialize
      language: CSharp
      name:
        CSharp: OnInitialize()
        VB: OnInitialize()
      nameWithType:
        CSharp: EventParser.OnInitialize()
        VB: EventParser.OnInitialize()
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.EventParser.OnInitialize()
        VB: Febucci.UI.Core.Parsing.EventParser.OnInitialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: OnInitialize
        path: ''
        startLine: 5998
      syntax:
        content:
          CSharp: protected override void OnInitialize()
          VB: Protected Overrides Sub OnInitialize
      overload: Febucci.UI.Core.Parsing.EventParser.OnInitialize*
      overridden: Febucci.UI.Core.Parsing.TagParserBase.OnInitialize
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: Febucci.UI.Core.Parsing.EventParser.TryProcessingTag(System.String,System.Int32,System.Int32@,StringBuilder,System.Int32)
      commentId: M:Febucci.UI.Core.Parsing.EventParser.TryProcessingTag(System.String,System.Int32,System.Int32@,StringBuilder,System.Int32)
      language: CSharp
      name:
        CSharp: TryProcessingTag(String, Int32, ref Int32, StringBuilder, Int32)
        VB: TryProcessingTag(String, Int32, ByRef Int32, StringBuilder, Int32)
      nameWithType:
        CSharp: EventParser.TryProcessingTag(String, Int32, ref Int32, StringBuilder, Int32)
        VB: EventParser.TryProcessingTag(String, Int32, ByRef Int32, StringBuilder, Int32)
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.EventParser.TryProcessingTag(System.String, System.Int32, ref System.Int32, StringBuilder, System.Int32)
        VB: Febucci.UI.Core.Parsing.EventParser.TryProcessingTag(System.String, System.Int32, ByRef System.Int32, StringBuilder, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: TryProcessingTag
        path: ''
        startLine: 6004
      syntax:
        content:
          CSharp: public override bool TryProcessingTag(string textInsideBrackets, int tagLength, ref int realTextIndex, StringBuilder finalTextBuilder, int internalOrder)
          VB: Public Overrides Function TryProcessingTag(textInsideBrackets As String, tagLength As Integer, ByRef realTextIndex As Integer, finalTextBuilder As StringBuilder, internalOrder As Integer) As Boolean
        parameters:
        - id: textInsideBrackets
          type: System.String
        - id: tagLength
          type: System.Int32
        - id: realTextIndex
          type: System.Int32
        - id: finalTextBuilder
          type: StringBuilder
        - id: internalOrder
          type: System.Int32
        return:
          type: System.Boolean
      overload: Febucci.UI.Core.Parsing.EventParser.TryProcessingTag*
      overridden: Febucci.UI.Core.Parsing.TagParserBase.TryProcessingTag(System.String,System.Int32,System.Int32@,StringBuilder,System.Int32)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Core.Parsing.MarkerBase
    commentId: T:Febucci.UI.Core.Parsing.MarkerBase
    language: CSharp
    name:
      CSharp: MarkerBase
      VB: MarkerBase
    nameWithType:
      CSharp: MarkerBase
      VB: MarkerBase
    qualifiedName:
      CSharp: Febucci.UI.Core.Parsing.MarkerBase
      VB: Febucci.UI.Core.Parsing.MarkerBase
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core.Parsing
    source:
      id: MarkerBase
      path: ''
      startLine: 6036
    syntax:
      content:
        CSharp: 'public abstract class MarkerBase : IComparable<MarkerBase>'
        VB: >-
          Public MustInherit Class MarkerBase

              Implements IComparable(Of MarkerBase)
    inheritance:
    - System.Object
    implements:
    - System.IComparable{Febucci.UI.Core.Parsing.MarkerBase}
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: Febucci.UI.Core.Parsing.MarkerBase.name
      commentId: F:Febucci.UI.Core.Parsing.MarkerBase.name
      language: CSharp
      name:
        CSharp: name
        VB: name
      nameWithType:
        CSharp: MarkerBase.name
        VB: MarkerBase.name
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.MarkerBase.name
        VB: Febucci.UI.Core.Parsing.MarkerBase.name
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: name
        path: ''
        startLine: 6038
      syntax:
        content:
          CSharp: public readonly string name
          VB: Public ReadOnly name As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        - readonly
        VB:
        - Public
        - ReadOnly
    - id: Febucci.UI.Core.Parsing.MarkerBase.index
      commentId: F:Febucci.UI.Core.Parsing.MarkerBase.index
      language: CSharp
      name:
        CSharp: index
        VB: index
      nameWithType:
        CSharp: MarkerBase.index
        VB: MarkerBase.index
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.MarkerBase.index
        VB: Febucci.UI.Core.Parsing.MarkerBase.index
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: index
        path: ''
        startLine: 6039
      syntax:
        content:
          CSharp: public readonly int index
          VB: Public ReadOnly index As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - readonly
        VB:
        - Public
        - ReadOnly
    - id: Febucci.UI.Core.Parsing.MarkerBase.parameters
      commentId: F:Febucci.UI.Core.Parsing.MarkerBase.parameters
      language: CSharp
      name:
        CSharp: parameters
        VB: parameters
      nameWithType:
        CSharp: MarkerBase.parameters
        VB: MarkerBase.parameters
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.MarkerBase.parameters
        VB: Febucci.UI.Core.Parsing.MarkerBase.parameters
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: parameters
        path: ''
        startLine: 6041
      syntax:
        content:
          CSharp: public string[] parameters
          VB: Public parameters As String()
        return:
          type: System.String[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Parsing.MarkerBase.#ctor(System.String,System.Int32,System.Int32,System.String[])
      commentId: M:Febucci.UI.Core.Parsing.MarkerBase.#ctor(System.String,System.Int32,System.Int32,System.String[])
      language: CSharp
      name:
        CSharp: MarkerBase(String, Int32, Int32, String[])
        VB: MarkerBase(String, Int32, Int32, String())
      nameWithType:
        CSharp: MarkerBase.MarkerBase(String, Int32, Int32, String[])
        VB: MarkerBase.MarkerBase(String, Int32, Int32, String())
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.MarkerBase.MarkerBase(System.String, System.Int32, System.Int32, System.String[])
        VB: Febucci.UI.Core.Parsing.MarkerBase.MarkerBase(System.String, System.Int32, System.Int32, System.String())
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: .ctor
        path: ''
        startLine: 6043
      syntax:
        content:
          CSharp: public MarkerBase(string name, int index, int internalOrder, string[] parameters)
          VB: Public Sub New(name As String, index As Integer, internalOrder As Integer, parameters As String())
        parameters:
        - id: name
          type: System.String
        - id: index
          type: System.Int32
        - id: internalOrder
          type: System.Int32
        - id: parameters
          type: System.String[]
      overload: Febucci.UI.Core.Parsing.MarkerBase.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Parsing.MarkerBase.CompareTo(Febucci.UI.Core.Parsing.MarkerBase)
      commentId: M:Febucci.UI.Core.Parsing.MarkerBase.CompareTo(Febucci.UI.Core.Parsing.MarkerBase)
      language: CSharp
      name:
        CSharp: CompareTo(MarkerBase)
        VB: CompareTo(MarkerBase)
      nameWithType:
        CSharp: MarkerBase.CompareTo(MarkerBase)
        VB: MarkerBase.CompareTo(MarkerBase)
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.MarkerBase.CompareTo(Febucci.UI.Core.Parsing.MarkerBase)
        VB: Febucci.UI.Core.Parsing.MarkerBase.CompareTo(Febucci.UI.Core.Parsing.MarkerBase)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: CompareTo
        path: ''
        startLine: 6058
      summary: "\nChecks if a marker is placed before another in text.\nPS. Checks for internal order, since when a letter is shown (character index)\nthere might be multiple events happening\n"
      example: []
      syntax:
        content:
          CSharp: public int CompareTo(MarkerBase other)
          VB: Public Function CompareTo(other As MarkerBase) As Integer
        parameters:
        - id: other
          type: Febucci.UI.Core.Parsing.MarkerBase
          description: ''
        return:
          type: System.Int32
          description: ''
      overload: Febucci.UI.Core.Parsing.MarkerBase.CompareTo*
      implements:
      - System.IComparable{Febucci.UI.Core.Parsing.MarkerBase}.CompareTo(Febucci.UI.Core.Parsing.MarkerBase)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Parsing.MarkerBase.ToString
      commentId: M:Febucci.UI.Core.Parsing.MarkerBase.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: MarkerBase.ToString()
        VB: MarkerBase.ToString()
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.MarkerBase.ToString()
        VB: Febucci.UI.Core.Parsing.MarkerBase.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: ToString
        path: ''
        startLine: 6063
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: Febucci.UI.Core.Parsing.MarkerBase.ToString*
      overridden: System.Object.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Core.Parsing.AnimationParser`1
    commentId: T:Febucci.UI.Core.Parsing.AnimationParser`1
    language: CSharp
    name:
      CSharp: AnimationParser<T>
      VB: AnimationParser(Of T)
    nameWithType:
      CSharp: AnimationParser<T>
      VB: AnimationParser(Of T)
    qualifiedName:
      CSharp: Febucci.UI.Core.Parsing.AnimationParser<T>
      VB: Febucci.UI.Core.Parsing.AnimationParser(Of T)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core.Parsing
    source:
      id: AnimationParser
      path: ''
      startLine: 6091
    summary: "\nRules how to parse a rich text tag that has an opening and ending\n"
    example: []
    syntax:
      content:
        CSharp: 'public class AnimationParser<T> : TagParserBase where T : AnimationScriptableBase'
        VB: >-
          Public Class AnimationParser(Of T As AnimationScriptableBase)

              Inherits TagParserBase
      typeParameters:
      - id: T
    inheritance:
    - System.Object
    - Febucci.UI.Core.Parsing.TagParserBase
    inheritedMembers:
    - Febucci.UI.Core.Parsing.TagParserBase.startSymbol
    - Febucci.UI.Core.Parsing.TagParserBase.endSymbol
    - Febucci.UI.Core.Parsing.TagParserBase.closingSymbol
    - Febucci.UI.Core.Parsing.TagParserBase.Initialize
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Febucci.UI.Core.Parsing.AnimationParser`1.database
      commentId: F:Febucci.UI.Core.Parsing.AnimationParser`1.database
      language: CSharp
      name:
        CSharp: database
        VB: database
      nameWithType:
        CSharp: AnimationParser<T>.database
        VB: AnimationParser(Of T).database
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.AnimationParser<T>.database
        VB: Febucci.UI.Core.Parsing.AnimationParser(Of T).database
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: database
        path: ''
        startLine: 6094
      syntax:
        content:
          CSharp: public Database<T> database
          VB: Public database As Database(Of T)
        return:
          type: Febucci.UI.Core.Database{{T}}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Parsing.AnimationParser`1.#ctor(System.Char,System.Char,System.Char,Febucci.UI.Core.Parsing.VisibilityMode,Febucci.UI.Core.Database{`0})
      commentId: M:Febucci.UI.Core.Parsing.AnimationParser`1.#ctor(System.Char,System.Char,System.Char,Febucci.UI.Core.Parsing.VisibilityMode,Febucci.UI.Core.Database{`0})
      language: CSharp
      name:
        CSharp: AnimationParser(Char, Char, Char, VisibilityMode, Database<T>)
        VB: AnimationParser(Char, Char, Char, VisibilityMode, Database(Of T))
      nameWithType:
        CSharp: AnimationParser<T>.AnimationParser(Char, Char, Char, VisibilityMode, Database<T>)
        VB: AnimationParser(Of T).AnimationParser(Char, Char, Char, VisibilityMode, Database(Of T))
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.AnimationParser<T>.AnimationParser(System.Char, System.Char, System.Char, Febucci.UI.Core.Parsing.VisibilityMode, Febucci.UI.Core.Database<T>)
        VB: Febucci.UI.Core.Parsing.AnimationParser(Of T).AnimationParser(System.Char, System.Char, System.Char, Febucci.UI.Core.Parsing.VisibilityMode, Febucci.UI.Core.Database(Of T))
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: .ctor
        path: ''
        startLine: 6100
      syntax:
        content:
          CSharp: public AnimationParser(char startSymbol, char closingSymbol, char endSymbol, VisibilityMode visibilityMode, Database<T> database)
          VB: Public Sub New(startSymbol As Char, closingSymbol As Char, endSymbol As Char, visibilityMode As VisibilityMode, database As Database(Of T))
        parameters:
        - id: startSymbol
          type: System.Char
        - id: closingSymbol
          type: System.Char
        - id: endSymbol
          type: System.Char
        - id: visibilityMode
          type: Febucci.UI.Core.Parsing.VisibilityMode
        - id: database
          type: Febucci.UI.Core.Database{{T}}
      overload: Febucci.UI.Core.Parsing.AnimationParser`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Parsing.AnimationParser`1.#ctor(System.Char,System.Char,System.Char,System.Char,Febucci.UI.Core.Parsing.VisibilityMode,Febucci.UI.Core.Database{`0})
      commentId: M:Febucci.UI.Core.Parsing.AnimationParser`1.#ctor(System.Char,System.Char,System.Char,System.Char,Febucci.UI.Core.Parsing.VisibilityMode,Febucci.UI.Core.Database{`0})
      language: CSharp
      name:
        CSharp: AnimationParser(Char, Char, Char, Char, VisibilityMode, Database<T>)
        VB: AnimationParser(Char, Char, Char, Char, VisibilityMode, Database(Of T))
      nameWithType:
        CSharp: AnimationParser<T>.AnimationParser(Char, Char, Char, Char, VisibilityMode, Database<T>)
        VB: AnimationParser(Of T).AnimationParser(Char, Char, Char, Char, VisibilityMode, Database(Of T))
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.AnimationParser<T>.AnimationParser(System.Char, System.Char, System.Char, System.Char, Febucci.UI.Core.Parsing.VisibilityMode, Febucci.UI.Core.Database<T>)
        VB: Febucci.UI.Core.Parsing.AnimationParser(Of T).AnimationParser(System.Char, System.Char, System.Char, System.Char, Febucci.UI.Core.Parsing.VisibilityMode, Febucci.UI.Core.Database(Of T))
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: .ctor
        path: ''
        startLine: 6107
      syntax:
        content:
          CSharp: public AnimationParser(char startSymbol, char closingSymbol, char middleSymbol, char endSymbol, VisibilityMode visibilityMode, Database<T> database)
          VB: Public Sub New(startSymbol As Char, closingSymbol As Char, middleSymbol As Char, endSymbol As Char, visibilityMode As VisibilityMode, database As Database(Of T))
        parameters:
        - id: startSymbol
          type: System.Char
        - id: closingSymbol
          type: System.Char
        - id: middleSymbol
          type: System.Char
        - id: endSymbol
          type: System.Char
        - id: visibilityMode
          type: Febucci.UI.Core.Parsing.VisibilityMode
        - id: database
          type: Febucci.UI.Core.Database{{T}}
      overload: Febucci.UI.Core.Parsing.AnimationParser`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Parsing.AnimationParser`1.results
      commentId: P:Febucci.UI.Core.Parsing.AnimationParser`1.results
      language: CSharp
      name:
        CSharp: results
        VB: results
      nameWithType:
        CSharp: AnimationParser<T>.results
        VB: AnimationParser(Of T).results
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.AnimationParser<T>.results
        VB: Febucci.UI.Core.Parsing.AnimationParser(Of T).results
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: results
        path: ''
        startLine: 6117
      syntax:
        content:
          CSharp: public AnimationRegion[] results { get; }
          VB: Public ReadOnly Property results As AnimationRegion()
        parameters: []
        return:
          type: Febucci.UI.Core.Parsing.AnimationRegion[]
      overload: Febucci.UI.Core.Parsing.AnimationParser`1.results*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Febucci.UI.Core.Parsing.AnimationParser`1.OnInitialize
      commentId: M:Febucci.UI.Core.Parsing.AnimationParser`1.OnInitialize
      language: CSharp
      name:
        CSharp: OnInitialize()
        VB: OnInitialize()
      nameWithType:
        CSharp: AnimationParser<T>.OnInitialize()
        VB: AnimationParser(Of T).OnInitialize()
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.AnimationParser<T>.OnInitialize()
        VB: Febucci.UI.Core.Parsing.AnimationParser(Of T).OnInitialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: OnInitialize
        path: ''
        startLine: 6119
      syntax:
        content:
          CSharp: protected override void OnInitialize()
          VB: Protected Overrides Sub OnInitialize
      overload: Febucci.UI.Core.Parsing.AnimationParser`1.OnInitialize*
      overridden: Febucci.UI.Core.Parsing.TagParserBase.OnInitialize
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: Febucci.UI.Core.Parsing.AnimationParser`1.TryProcessingTag(System.String,System.Int32,System.Int32@,StringBuilder,System.Int32)
      commentId: M:Febucci.UI.Core.Parsing.AnimationParser`1.TryProcessingTag(System.String,System.Int32,System.Int32@,StringBuilder,System.Int32)
      language: CSharp
      name:
        CSharp: TryProcessingTag(String, Int32, ref Int32, StringBuilder, Int32)
        VB: TryProcessingTag(String, Int32, ByRef Int32, StringBuilder, Int32)
      nameWithType:
        CSharp: AnimationParser<T>.TryProcessingTag(String, Int32, ref Int32, StringBuilder, Int32)
        VB: AnimationParser(Of T).TryProcessingTag(String, Int32, ByRef Int32, StringBuilder, Int32)
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.AnimationParser<T>.TryProcessingTag(System.String, System.Int32, ref System.Int32, StringBuilder, System.Int32)
        VB: Febucci.UI.Core.Parsing.AnimationParser(Of T).TryProcessingTag(System.String, System.Int32, ByRef System.Int32, StringBuilder, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: TryProcessingTag
        path: ''
        startLine: 6128
      syntax:
        content:
          CSharp: public override bool TryProcessingTag(string textInsideBrackets, int tagLength, ref int realTextIndex, StringBuilder finalTextBuilder, int internalOrder)
          VB: Public Overrides Function TryProcessingTag(textInsideBrackets As String, tagLength As Integer, ByRef realTextIndex As Integer, finalTextBuilder As StringBuilder, internalOrder As Integer) As Boolean
        parameters:
        - id: textInsideBrackets
          type: System.String
        - id: tagLength
          type: System.Int32
        - id: realTextIndex
          type: System.Int32
        - id: finalTextBuilder
          type: StringBuilder
        - id: internalOrder
          type: System.Int32
        return:
          type: System.Boolean
      overload: Febucci.UI.Core.Parsing.AnimationParser`1.TryProcessingTag*
      overridden: Febucci.UI.Core.Parsing.TagParserBase.TryProcessingTag(System.String,System.Int32,System.Int32@,StringBuilder,System.Int32)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Core.Parsing.VisibilityMode
    commentId: T:Febucci.UI.Core.Parsing.VisibilityMode
    language: CSharp
    name:
      CSharp: VisibilityMode
      VB: VisibilityMode
    nameWithType:
      CSharp: VisibilityMode
      VB: VisibilityMode
    qualifiedName:
      CSharp: Febucci.UI.Core.Parsing.VisibilityMode
      VB: Febucci.UI.Core.Parsing.VisibilityMode
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core.Parsing
    source:
      id: VisibilityMode
      path: ''
      startLine: 6204
    syntax:
      content:
        CSharp: public enum VisibilityMode
        VB: Public Enum VisibilityMode
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Febucci.UI.Core.Parsing.VisibilityMode.OnVisible
      commentId: F:Febucci.UI.Core.Parsing.VisibilityMode.OnVisible
      language: CSharp
      name:
        CSharp: OnVisible
        VB: OnVisible
      nameWithType:
        CSharp: VisibilityMode.OnVisible
        VB: VisibilityMode.OnVisible
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.VisibilityMode.OnVisible
        VB: Febucci.UI.Core.Parsing.VisibilityMode.OnVisible
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: OnVisible
        path: ''
        startLine: 6207
      syntax:
        content:
          CSharp: OnVisible = 1
          VB: OnVisible = 1
        return:
          type: Febucci.UI.Core.Parsing.VisibilityMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Febucci.UI.Core.Parsing.VisibilityMode.OnHiding
      commentId: F:Febucci.UI.Core.Parsing.VisibilityMode.OnHiding
      language: CSharp
      name:
        CSharp: OnHiding
        VB: OnHiding
      nameWithType:
        CSharp: VisibilityMode.OnHiding
        VB: VisibilityMode.OnHiding
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.VisibilityMode.OnHiding
        VB: Febucci.UI.Core.Parsing.VisibilityMode.OnHiding
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: OnHiding
        path: ''
        startLine: 6208
      syntax:
        content:
          CSharp: OnHiding = 2
          VB: OnHiding = 2
        return:
          type: Febucci.UI.Core.Parsing.VisibilityMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Febucci.UI.Core.Parsing.VisibilityMode.Persistent
      commentId: F:Febucci.UI.Core.Parsing.VisibilityMode.Persistent
      language: CSharp
      name:
        CSharp: Persistent
        VB: Persistent
      nameWithType:
        CSharp: VisibilityMode.Persistent
        VB: VisibilityMode.Persistent
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.VisibilityMode.Persistent
        VB: Febucci.UI.Core.Parsing.VisibilityMode.Persistent
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: Persistent
        path: ''
        startLine: 6209
      syntax:
        content:
          CSharp: Persistent = 3
          VB: Persistent = 3
        return:
          type: Febucci.UI.Core.Parsing.VisibilityMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Febucci.UI.Core.Parsing.AnimationRegion
    commentId: T:Febucci.UI.Core.Parsing.AnimationRegion
    language: CSharp
    name:
      CSharp: AnimationRegion
      VB: AnimationRegion
    nameWithType:
      CSharp: AnimationRegion
      VB: AnimationRegion
    qualifiedName:
      CSharp: Febucci.UI.Core.Parsing.AnimationRegion
      VB: Febucci.UI.Core.Parsing.AnimationRegion
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core.Parsing
    source:
      id: AnimationRegion
      path: ''
      startLine: 6215
    summary: "\nContains information of a region in the text\n"
    example: []
    syntax:
      content:
        CSharp: 'public class AnimationRegion : RegionBase'
        VB: >-
          Public Class AnimationRegion

              Inherits RegionBase
    inheritance:
    - System.Object
    - Febucci.UI.Core.Parsing.RegionBase
    inheritedMembers:
    - Febucci.UI.Core.Parsing.RegionBase.tagId
    - Febucci.UI.Core.Parsing.RegionBase.ranges
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Febucci.UI.Core.Parsing.AnimationRegion.animation
      commentId: F:Febucci.UI.Core.Parsing.AnimationRegion.animation
      language: CSharp
      name:
        CSharp: animation
        VB: animation
      nameWithType:
        CSharp: AnimationRegion.animation
        VB: AnimationRegion.animation
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.AnimationRegion.animation
        VB: Febucci.UI.Core.Parsing.AnimationRegion.animation
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: animation
        path: ''
        startLine: 6218
      syntax:
        content:
          CSharp: public readonly AnimationScriptableBase animation
          VB: Public ReadOnly animation As AnimationScriptableBase
        return:
          type: AnimationScriptableBase
      modifiers:
        CSharp:
        - public
        - readonly
        VB:
        - Public
        - ReadOnly
    - id: Febucci.UI.Core.Parsing.AnimationRegion.#ctor(System.String,Febucci.UI.Core.Parsing.VisibilityMode,AnimationScriptableBase)
      commentId: M:Febucci.UI.Core.Parsing.AnimationRegion.#ctor(System.String,Febucci.UI.Core.Parsing.VisibilityMode,AnimationScriptableBase)
      language: CSharp
      name:
        CSharp: AnimationRegion(String, VisibilityMode, AnimationScriptableBase)
        VB: AnimationRegion(String, VisibilityMode, AnimationScriptableBase)
      nameWithType:
        CSharp: AnimationRegion.AnimationRegion(String, VisibilityMode, AnimationScriptableBase)
        VB: AnimationRegion.AnimationRegion(String, VisibilityMode, AnimationScriptableBase)
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.AnimationRegion.AnimationRegion(System.String, Febucci.UI.Core.Parsing.VisibilityMode, AnimationScriptableBase)
        VB: Febucci.UI.Core.Parsing.AnimationRegion.AnimationRegion(System.String, Febucci.UI.Core.Parsing.VisibilityMode, AnimationScriptableBase)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: .ctor
        path: ''
        startLine: 6220
      syntax:
        content:
          CSharp: public AnimationRegion(string tagId, VisibilityMode visibilityMode, AnimationScriptableBase animation)
          VB: Public Sub New(tagId As String, visibilityMode As VisibilityMode, animation As AnimationScriptableBase)
        parameters:
        - id: tagId
          type: System.String
        - id: visibilityMode
          type: Febucci.UI.Core.Parsing.VisibilityMode
        - id: animation
          type: AnimationScriptableBase
      overload: Febucci.UI.Core.Parsing.AnimationRegion.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Parsing.AnimationRegion.IsVisibilityPolicySatisfied(System.Boolean)
      commentId: M:Febucci.UI.Core.Parsing.AnimationRegion.IsVisibilityPolicySatisfied(System.Boolean)
      language: CSharp
      name:
        CSharp: IsVisibilityPolicySatisfied(Boolean)
        VB: IsVisibilityPolicySatisfied(Boolean)
      nameWithType:
        CSharp: AnimationRegion.IsVisibilityPolicySatisfied(Boolean)
        VB: AnimationRegion.IsVisibilityPolicySatisfied(Boolean)
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.AnimationRegion.IsVisibilityPolicySatisfied(System.Boolean)
        VB: Febucci.UI.Core.Parsing.AnimationRegion.IsVisibilityPolicySatisfied(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: IsVisibilityPolicySatisfied
        path: ''
        startLine: 6226
      syntax:
        content:
          CSharp: public bool IsVisibilityPolicySatisfied(bool visible)
          VB: Public Function IsVisibilityPolicySatisfied(visible As Boolean) As Boolean
        parameters:
        - id: visible
          type: System.Boolean
        return:
          type: System.Boolean
      overload: Febucci.UI.Core.Parsing.AnimationRegion.IsVisibilityPolicySatisfied*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Parsing.AnimationRegion.OpenNewRange(System.Int32)
      commentId: M:Febucci.UI.Core.Parsing.AnimationRegion.OpenNewRange(System.Int32)
      language: CSharp
      name:
        CSharp: OpenNewRange(Int32)
        VB: OpenNewRange(Int32)
      nameWithType:
        CSharp: AnimationRegion.OpenNewRange(Int32)
        VB: AnimationRegion.OpenNewRange(Int32)
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.AnimationRegion.OpenNewRange(System.Int32)
        VB: Febucci.UI.Core.Parsing.AnimationRegion.OpenNewRange(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: OpenNewRange
        path: ''
        startLine: 6231
      syntax:
        content:
          CSharp: public void OpenNewRange(int startIndex)
          VB: Public Sub OpenNewRange(startIndex As Integer)
        parameters:
        - id: startIndex
          type: System.Int32
      overload: Febucci.UI.Core.Parsing.AnimationRegion.OpenNewRange*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Parsing.AnimationRegion.OpenNewRange(System.Int32,System.String[])
      commentId: M:Febucci.UI.Core.Parsing.AnimationRegion.OpenNewRange(System.Int32,System.String[])
      language: CSharp
      name:
        CSharp: OpenNewRange(Int32, String[])
        VB: OpenNewRange(Int32, String())
      nameWithType:
        CSharp: AnimationRegion.OpenNewRange(Int32, String[])
        VB: AnimationRegion.OpenNewRange(Int32, String())
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.AnimationRegion.OpenNewRange(System.Int32, System.String[])
        VB: Febucci.UI.Core.Parsing.AnimationRegion.OpenNewRange(System.Int32, System.String())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: OpenNewRange
        path: ''
        startLine: 6233
      syntax:
        content:
          CSharp: public void OpenNewRange(int startIndex, string[] tagWords)
          VB: Public Sub OpenNewRange(startIndex As Integer, tagWords As String())
        parameters:
        - id: startIndex
          type: System.Int32
        - id: tagWords
          type: System.String[]
      overload: Febucci.UI.Core.Parsing.AnimationRegion.OpenNewRange*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Parsing.AnimationRegion.TryClosingRange(System.Int32)
      commentId: M:Febucci.UI.Core.Parsing.AnimationRegion.TryClosingRange(System.Int32)
      language: CSharp
      name:
        CSharp: TryClosingRange(Int32)
        VB: TryClosingRange(Int32)
      nameWithType:
        CSharp: AnimationRegion.TryClosingRange(Int32)
        VB: AnimationRegion.TryClosingRange(Int32)
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.AnimationRegion.TryClosingRange(System.Int32)
        VB: Febucci.UI.Core.Parsing.AnimationRegion.TryClosingRange(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: TryClosingRange
        path: ''
        startLine: 6256
      syntax:
        content:
          CSharp: public void TryClosingRange(int endIndex)
          VB: Public Sub TryClosingRange(endIndex As Integer)
        parameters:
        - id: endIndex
          type: System.Int32
      overload: Febucci.UI.Core.Parsing.AnimationRegion.TryClosingRange*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Parsing.AnimationRegion.CloseAllOpenedRanges(System.Int32)
      commentId: M:Febucci.UI.Core.Parsing.AnimationRegion.CloseAllOpenedRanges(System.Int32)
      language: CSharp
      name:
        CSharp: CloseAllOpenedRanges(Int32)
        VB: CloseAllOpenedRanges(Int32)
      nameWithType:
        CSharp: AnimationRegion.CloseAllOpenedRanges(Int32)
        VB: AnimationRegion.CloseAllOpenedRanges(Int32)
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.AnimationRegion.CloseAllOpenedRanges(System.Int32)
        VB: Febucci.UI.Core.Parsing.AnimationRegion.CloseAllOpenedRanges(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: CloseAllOpenedRanges
        path: ''
        startLine: 6271
      syntax:
        content:
          CSharp: public void CloseAllOpenedRanges(int endIndex)
          VB: Public Sub CloseAllOpenedRanges(endIndex As Integer)
        parameters:
        - id: endIndex
          type: System.Int32
      overload: Febucci.UI.Core.Parsing.AnimationRegion.CloseAllOpenedRanges*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Parsing.AnimationRegion.SetupContextFor(Febucci.UI.Core.TAnimCore,Febucci.UI.ModifierInfo[])
      commentId: M:Febucci.UI.Core.Parsing.AnimationRegion.SetupContextFor(Febucci.UI.Core.TAnimCore,Febucci.UI.ModifierInfo[])
      language: CSharp
      name:
        CSharp: SetupContextFor(TAnimCore, ModifierInfo[])
        VB: SetupContextFor(TAnimCore, ModifierInfo())
      nameWithType:
        CSharp: AnimationRegion.SetupContextFor(TAnimCore, ModifierInfo[])
        VB: AnimationRegion.SetupContextFor(TAnimCore, ModifierInfo())
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.AnimationRegion.SetupContextFor(Febucci.UI.Core.TAnimCore, Febucci.UI.ModifierInfo[])
        VB: Febucci.UI.Core.Parsing.AnimationRegion.SetupContextFor(Febucci.UI.Core.TAnimCore, Febucci.UI.ModifierInfo())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: SetupContextFor
        path: ''
        startLine: 6288
      syntax:
        content:
          CSharp: public virtual void SetupContextFor(TAnimCore animator, ModifierInfo[] modifiers)
          VB: Public Overridable Sub SetupContextFor(animator As TAnimCore, modifiers As ModifierInfo())
        parameters:
        - id: animator
          type: Febucci.UI.Core.TAnimCore
        - id: modifiers
          type: Febucci.UI.ModifierInfo[]
      overload: Febucci.UI.Core.Parsing.AnimationRegion.SetupContextFor*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: Febucci.UI.Core.Parsing.AnimationRegion.ToString
      commentId: M:Febucci.UI.Core.Parsing.AnimationRegion.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: AnimationRegion.ToString()
        VB: AnimationRegion.ToString()
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.AnimationRegion.ToString()
        VB: Febucci.UI.Core.Parsing.AnimationRegion.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: ToString
        path: ''
        startLine: 6297
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: Febucci.UI.Core.Parsing.AnimationRegion.ToString*
      overridden: System.Object.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Core.Parsing.StylesParser
    commentId: T:Febucci.UI.Core.Parsing.StylesParser
    language: CSharp
    name:
      CSharp: StylesParser
      VB: StylesParser
    nameWithType:
      CSharp: StylesParser
      VB: StylesParser
    qualifiedName:
      CSharp: Febucci.UI.Core.Parsing.StylesParser
      VB: Febucci.UI.Core.Parsing.StylesParser
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core.Parsing
    source:
      id: StylesParser
      path: ''
      startLine: 6327
    summary: "\nRules how to parse a rich text tag that has an opening and ending\n"
    example: []
    syntax:
      content:
        CSharp: 'public class StylesParser : TagParserBase'
        VB: >-
          Public Class StylesParser

              Inherits TagParserBase
    inheritance:
    - System.Object
    - Febucci.UI.Core.Parsing.TagParserBase
    inheritedMembers:
    - Febucci.UI.Core.Parsing.TagParserBase.startSymbol
    - Febucci.UI.Core.Parsing.TagParserBase.endSymbol
    - Febucci.UI.Core.Parsing.TagParserBase.closingSymbol
    - Febucci.UI.Core.Parsing.TagParserBase.Initialize
    - Febucci.UI.Core.Parsing.TagParserBase.OnInitialize
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Febucci.UI.Core.Parsing.StylesParser.#ctor(System.Char,System.Char,System.Char,StyleSheetScriptable)
      commentId: M:Febucci.UI.Core.Parsing.StylesParser.#ctor(System.Char,System.Char,System.Char,StyleSheetScriptable)
      language: CSharp
      name:
        CSharp: StylesParser(Char, Char, Char, StyleSheetScriptable)
        VB: StylesParser(Char, Char, Char, StyleSheetScriptable)
      nameWithType:
        CSharp: StylesParser.StylesParser(Char, Char, Char, StyleSheetScriptable)
        VB: StylesParser.StylesParser(Char, Char, Char, StyleSheetScriptable)
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.StylesParser.StylesParser(System.Char, System.Char, System.Char, StyleSheetScriptable)
        VB: Febucci.UI.Core.Parsing.StylesParser.StylesParser(System.Char, System.Char, System.Char, StyleSheetScriptable)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: .ctor
        path: ''
        startLine: 6333
      syntax:
        content:
          CSharp: public StylesParser(char startSymbol, char closingSymbol, char endSymbol, StyleSheetScriptable sheet)
          VB: Public Sub New(startSymbol As Char, closingSymbol As Char, endSymbol As Char, sheet As StyleSheetScriptable)
        parameters:
        - id: startSymbol
          type: System.Char
        - id: closingSymbol
          type: System.Char
        - id: endSymbol
          type: System.Char
        - id: sheet
          type: StyleSheetScriptable
      overload: Febucci.UI.Core.Parsing.StylesParser.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Parsing.StylesParser.TryProcessingTag(System.String,System.Int32,System.Int32@,StringBuilder,System.Int32)
      commentId: M:Febucci.UI.Core.Parsing.StylesParser.TryProcessingTag(System.String,System.Int32,System.Int32@,StringBuilder,System.Int32)
      language: CSharp
      name:
        CSharp: TryProcessingTag(String, Int32, ref Int32, StringBuilder, Int32)
        VB: TryProcessingTag(String, Int32, ByRef Int32, StringBuilder, Int32)
      nameWithType:
        CSharp: StylesParser.TryProcessingTag(String, Int32, ref Int32, StringBuilder, Int32)
        VB: StylesParser.TryProcessingTag(String, Int32, ByRef Int32, StringBuilder, Int32)
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.StylesParser.TryProcessingTag(System.String, System.Int32, ref System.Int32, StringBuilder, System.Int32)
        VB: Febucci.UI.Core.Parsing.StylesParser.TryProcessingTag(System.String, System.Int32, ByRef System.Int32, StringBuilder, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: TryProcessingTag
        path: ''
        startLine: 6339
      syntax:
        content:
          CSharp: public override bool TryProcessingTag(string textInsideBrackets, int tagLength, ref int realTextIndex, StringBuilder finalTextBuilder, int internalOrder)
          VB: Public Overrides Function TryProcessingTag(textInsideBrackets As String, tagLength As Integer, ByRef realTextIndex As Integer, finalTextBuilder As StringBuilder, internalOrder As Integer) As Boolean
        parameters:
        - id: textInsideBrackets
          type: System.String
        - id: tagLength
          type: System.Int32
        - id: realTextIndex
          type: System.Int32
        - id: finalTextBuilder
          type: StringBuilder
        - id: internalOrder
          type: System.Int32
        return:
          type: System.Boolean
      overload: Febucci.UI.Core.Parsing.StylesParser.TryProcessingTag*
      overridden: Febucci.UI.Core.Parsing.TagParserBase.TryProcessingTag(System.String,System.Int32,System.Int32@,StringBuilder,System.Int32)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Core.Parsing.RegionBase
    commentId: T:Febucci.UI.Core.Parsing.RegionBase
    language: CSharp
    name:
      CSharp: RegionBase
      VB: RegionBase
    nameWithType:
      CSharp: RegionBase
      VB: RegionBase
    qualifiedName:
      CSharp: Febucci.UI.Core.Parsing.RegionBase
      VB: Febucci.UI.Core.Parsing.RegionBase
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core.Parsing
    source:
      id: RegionBase
      path: ''
      startLine: 6406
    syntax:
      content:
        CSharp: public abstract class RegionBase
        VB: Public MustInherit Class RegionBase
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: Febucci.UI.Core.Parsing.RegionBase.tagId
      commentId: F:Febucci.UI.Core.Parsing.RegionBase.tagId
      language: CSharp
      name:
        CSharp: tagId
        VB: tagId
      nameWithType:
        CSharp: RegionBase.tagId
        VB: RegionBase.tagId
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.RegionBase.tagId
        VB: Febucci.UI.Core.Parsing.RegionBase.tagId
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: tagId
        path: ''
        startLine: 6408
      syntax:
        content:
          CSharp: public readonly string tagId
          VB: Public ReadOnly tagId As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        - readonly
        VB:
        - Public
        - ReadOnly
    - id: Febucci.UI.Core.Parsing.RegionBase.ranges
      commentId: F:Febucci.UI.Core.Parsing.RegionBase.ranges
      language: CSharp
      name:
        CSharp: ranges
        VB: ranges
      nameWithType:
        CSharp: RegionBase.ranges
        VB: RegionBase.ranges
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.RegionBase.ranges
        VB: Febucci.UI.Core.Parsing.RegionBase.ranges
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: ranges
        path: ''
        startLine: 6409
      syntax:
        content:
          CSharp: public TagRange[] ranges
          VB: Public ranges As TagRange()
        return:
          type: Febucci.UI.Core.Parsing.TagRange[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Parsing.RegionBase.#ctor(System.String)
      commentId: M:Febucci.UI.Core.Parsing.RegionBase.#ctor(System.String)
      language: CSharp
      name:
        CSharp: RegionBase(String)
        VB: RegionBase(String)
      nameWithType:
        CSharp: RegionBase.RegionBase(String)
        VB: RegionBase.RegionBase(String)
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.RegionBase.RegionBase(System.String)
        VB: Febucci.UI.Core.Parsing.RegionBase.RegionBase(System.String)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: .ctor
        path: ''
        startLine: 6411
      syntax:
        content:
          CSharp: public RegionBase(string tagId)
          VB: Public Sub New(tagId As String)
        parameters:
        - id: tagId
          type: System.String
      overload: Febucci.UI.Core.Parsing.RegionBase.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Parsing.RegionBase.#ctor(System.String,Febucci.UI.Core.Parsing.TagRange[])
      commentId: M:Febucci.UI.Core.Parsing.RegionBase.#ctor(System.String,Febucci.UI.Core.Parsing.TagRange[])
      language: CSharp
      name:
        CSharp: RegionBase(String, TagRange[])
        VB: RegionBase(String, TagRange())
      nameWithType:
        CSharp: RegionBase.RegionBase(String, TagRange[])
        VB: RegionBase.RegionBase(String, TagRange())
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.RegionBase.RegionBase(System.String, Febucci.UI.Core.Parsing.TagRange[])
        VB: Febucci.UI.Core.Parsing.RegionBase.RegionBase(System.String, Febucci.UI.Core.Parsing.TagRange())
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: .ctor
        path: ''
        startLine: 6417
      syntax:
        content:
          CSharp: public RegionBase(string tagId, params TagRange[] ranges)
          VB: Public Sub New(tagId As String, ParamArray ranges As TagRange())
        parameters:
        - id: tagId
          type: System.String
        - id: ranges
          type: Febucci.UI.Core.Parsing.TagRange[]
      overload: Febucci.UI.Core.Parsing.RegionBase.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Parsing.RegionBase.#ctor(System.String,Vector2Int[])
      commentId: M:Febucci.UI.Core.Parsing.RegionBase.#ctor(System.String,Vector2Int[])
      language: CSharp
      name:
        CSharp: RegionBase(String, Vector2Int[])
        VB: RegionBase(String, Vector2Int())
      nameWithType:
        CSharp: RegionBase.RegionBase(String, Vector2Int[])
        VB: RegionBase.RegionBase(String, Vector2Int())
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.RegionBase.RegionBase(System.String, Vector2Int[])
        VB: Febucci.UI.Core.Parsing.RegionBase.RegionBase(System.String, Vector2Int())
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: .ctor
        path: ''
        startLine: 6423
      syntax:
        content:
          CSharp: public RegionBase(string tagId, params Vector2Int[] ranges)
          VB: Public Sub New(tagId As String, ParamArray ranges As Vector2Int())
        parameters:
        - id: tagId
          type: System.String
        - id: ranges
          type: Vector2Int[]
      overload: Febucci.UI.Core.Parsing.RegionBase.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Febucci.UI.Core.Parsing.TagRange
    commentId: T:Febucci.UI.Core.Parsing.TagRange
    language: CSharp
    name:
      CSharp: TagRange
      VB: TagRange
    nameWithType:
      CSharp: TagRange
      VB: TagRange
    qualifiedName:
      CSharp: Febucci.UI.Core.Parsing.TagRange
      VB: Febucci.UI.Core.Parsing.TagRange
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core.Parsing
    source:
      id: TagRange
      path: ''
      startLine: 6439
    syntax:
      content:
        CSharp: public struct TagRange
        VB: Public Structure TagRange
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Febucci.UI.Core.Parsing.TagRange.indexes
      commentId: F:Febucci.UI.Core.Parsing.TagRange.indexes
      language: CSharp
      name:
        CSharp: indexes
        VB: indexes
      nameWithType:
        CSharp: TagRange.indexes
        VB: TagRange.indexes
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.TagRange.indexes
        VB: Febucci.UI.Core.Parsing.TagRange.indexes
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: indexes
        path: ''
        startLine: 6444
      summary: "\ntext index range of where to apply the tag\n"
      example: []
      syntax:
        content:
          CSharp: public Vector2Int indexes
          VB: Public indexes As Vector2Int
        return:
          type: Vector2Int
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Parsing.TagRange.modifiers
      commentId: F:Febucci.UI.Core.Parsing.TagRange.modifiers
      language: CSharp
      name:
        CSharp: modifiers
        VB: modifiers
      nameWithType:
        CSharp: TagRange.modifiers
        VB: TagRange.modifiers
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.TagRange.modifiers
        VB: Febucci.UI.Core.Parsing.TagRange.modifiers
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: modifiers
        path: ''
        startLine: 6445
      syntax:
        content:
          CSharp: public ModifierInfo[] modifiers
          VB: Public modifiers As ModifierInfo()
        return:
          type: Febucci.UI.ModifierInfo[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Parsing.TagRange.#ctor(Vector2Int,Febucci.UI.ModifierInfo[])
      commentId: M:Febucci.UI.Core.Parsing.TagRange.#ctor(Vector2Int,Febucci.UI.ModifierInfo[])
      language: CSharp
      name:
        CSharp: TagRange(Vector2Int, ModifierInfo[])
        VB: TagRange(Vector2Int, ModifierInfo())
      nameWithType:
        CSharp: TagRange.TagRange(Vector2Int, ModifierInfo[])
        VB: TagRange.TagRange(Vector2Int, ModifierInfo())
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.TagRange.TagRange(Vector2Int, Febucci.UI.ModifierInfo[])
        VB: Febucci.UI.Core.Parsing.TagRange.TagRange(Vector2Int, Febucci.UI.ModifierInfo())
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: .ctor
        path: ''
        startLine: 6447
      syntax:
        content:
          CSharp: public TagRange(Vector2Int indexes, params ModifierInfo[] modifiers)
          VB: Public Sub New(indexes As Vector2Int, ParamArray modifiers As ModifierInfo())
        parameters:
        - id: indexes
          type: Vector2Int
        - id: modifiers
          type: Febucci.UI.ModifierInfo[]
      overload: Febucci.UI.Core.Parsing.TagRange.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Parsing.TagRange.ToString
      commentId: M:Febucci.UI.Core.Parsing.TagRange.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: TagRange.ToString()
        VB: TagRange.ToString()
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.TagRange.ToString()
        VB: Febucci.UI.Core.Parsing.TagRange.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: ToString
        path: ''
        startLine: 6453
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: Febucci.UI.Core.Parsing.TagRange.ToString*
      overridden: System.ValueType.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Core.Parsing.PlainTagParser
    commentId: T:Febucci.UI.Core.Parsing.PlainTagParser
    language: CSharp
    name:
      CSharp: PlainTagParser
      VB: PlainTagParser
    nameWithType:
      CSharp: PlainTagParser
      VB: PlainTagParser
    qualifiedName:
      CSharp: Febucci.UI.Core.Parsing.PlainTagParser
      VB: Febucci.UI.Core.Parsing.PlainTagParser
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core.Parsing
    source:
      id: PlainTagParser
      path: ''
      startLine: 6727
    syntax:
      content:
        CSharp: 'public sealed class PlainTagParser : TagParserBase'
        VB: >-
          Public NotInheritable Class PlainTagParser

              Inherits TagParserBase
    inheritance:
    - System.Object
    - Febucci.UI.Core.Parsing.TagParserBase
    inheritedMembers:
    - Febucci.UI.Core.Parsing.TagParserBase.startSymbol
    - Febucci.UI.Core.Parsing.TagParserBase.endSymbol
    - Febucci.UI.Core.Parsing.TagParserBase.closingSymbol
    - Febucci.UI.Core.Parsing.TagParserBase.Initialize
    - Febucci.UI.Core.Parsing.TagParserBase.OnInitialize
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Febucci.UI.Core.Parsing.PlainTagParser.#ctor(System.String,System.Char,System.Char,System.Char)
      commentId: M:Febucci.UI.Core.Parsing.PlainTagParser.#ctor(System.String,System.Char,System.Char,System.Char)
      language: CSharp
      name:
        CSharp: PlainTagParser(String, Char, Char, Char)
        VB: PlainTagParser(String, Char, Char, Char)
      nameWithType:
        CSharp: PlainTagParser.PlainTagParser(String, Char, Char, Char)
        VB: PlainTagParser.PlainTagParser(String, Char, Char, Char)
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.PlainTagParser.PlainTagParser(System.String, System.Char, System.Char, System.Char)
        VB: Febucci.UI.Core.Parsing.PlainTagParser.PlainTagParser(System.String, System.Char, System.Char, System.Char)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: .ctor
        path: ''
        startLine: 6731
      syntax:
        content:
          CSharp: public PlainTagParser(string tag, char startSymbol, char closingSymbol, char endSymbol)
          VB: Public Sub New(tag As String, startSymbol As Char, closingSymbol As Char, endSymbol As Char)
        parameters:
        - id: tag
          type: System.String
        - id: startSymbol
          type: System.Char
        - id: closingSymbol
          type: System.Char
        - id: endSymbol
          type: System.Char
      overload: Febucci.UI.Core.Parsing.PlainTagParser.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Parsing.PlainTagParser.results
      commentId: F:Febucci.UI.Core.Parsing.PlainTagParser.results
      language: CSharp
      name:
        CSharp: results
        VB: results
      nameWithType:
        CSharp: PlainTagParser.results
        VB: PlainTagParser.results
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.PlainTagParser.results
        VB: Febucci.UI.Core.Parsing.PlainTagParser.results
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: results
        path: ''
        startLine: 6739
      syntax:
        content:
          CSharp: public Vector2Int[] results
          VB: Public results As Vector2Int()
        return:
          type: Vector2Int[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Parsing.PlainTagParser.TryProcessingTag(System.String,System.Int32,System.Int32@,StringBuilder,System.Int32)
      commentId: M:Febucci.UI.Core.Parsing.PlainTagParser.TryProcessingTag(System.String,System.Int32,System.Int32@,StringBuilder,System.Int32)
      language: CSharp
      name:
        CSharp: TryProcessingTag(String, Int32, ref Int32, StringBuilder, Int32)
        VB: TryProcessingTag(String, Int32, ByRef Int32, StringBuilder, Int32)
      nameWithType:
        CSharp: PlainTagParser.TryProcessingTag(String, Int32, ref Int32, StringBuilder, Int32)
        VB: PlainTagParser.TryProcessingTag(String, Int32, ByRef Int32, StringBuilder, Int32)
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.PlainTagParser.TryProcessingTag(System.String, System.Int32, ref System.Int32, StringBuilder, System.Int32)
        VB: Febucci.UI.Core.Parsing.PlainTagParser.TryProcessingTag(System.String, System.Int32, ByRef System.Int32, StringBuilder, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: TryProcessingTag
        path: ''
        startLine: 6743
      syntax:
        content:
          CSharp: public override bool TryProcessingTag(string textInsideBrackets, int tagLength, ref int realTextIndex, StringBuilder finalTextBuilder, int internalOrder)
          VB: Public Overrides Function TryProcessingTag(textInsideBrackets As String, tagLength As Integer, ByRef realTextIndex As Integer, finalTextBuilder As StringBuilder, internalOrder As Integer) As Boolean
        parameters:
        - id: textInsideBrackets
          type: System.String
        - id: tagLength
          type: System.Int32
        - id: realTextIndex
          type: System.Int32
        - id: finalTextBuilder
          type: StringBuilder
        - id: internalOrder
          type: System.Int32
        return:
          type: System.Boolean
      overload: Febucci.UI.Core.Parsing.PlainTagParser.TryProcessingTag*
      overridden: Febucci.UI.Core.Parsing.TagParserBase.TryProcessingTag(System.String,System.Int32,System.Int32@,StringBuilder,System.Int32)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Core.Parsing.TagParserBase
    commentId: T:Febucci.UI.Core.Parsing.TagParserBase
    language: CSharp
    name:
      CSharp: TagParserBase
      VB: TagParserBase
    nameWithType:
      CSharp: TagParserBase
      VB: TagParserBase
    qualifiedName:
      CSharp: Febucci.UI.Core.Parsing.TagParserBase
      VB: Febucci.UI.Core.Parsing.TagParserBase
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Core.Parsing
    source:
      id: TagParserBase
      path: ''
      startLine: 6781
    summary: "\nBase class to parse/process a rich text tag\n"
    example: []
    syntax:
      content:
        CSharp: public abstract class TagParserBase
        VB: Public MustInherit Class TagParserBase
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: Febucci.UI.Core.Parsing.TagParserBase.startSymbol
      commentId: F:Febucci.UI.Core.Parsing.TagParserBase.startSymbol
      language: CSharp
      name:
        CSharp: startSymbol
        VB: startSymbol
      nameWithType:
        CSharp: TagParserBase.startSymbol
        VB: TagParserBase.startSymbol
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.TagParserBase.startSymbol
        VB: Febucci.UI.Core.Parsing.TagParserBase.startSymbol
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: startSymbol
        path: ''
        startLine: 6784
      syntax:
        content:
          CSharp: public char startSymbol
          VB: Public startSymbol As Char
        return:
          type: System.Char
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Parsing.TagParserBase.endSymbol
      commentId: F:Febucci.UI.Core.Parsing.TagParserBase.endSymbol
      language: CSharp
      name:
        CSharp: endSymbol
        VB: endSymbol
      nameWithType:
        CSharp: TagParserBase.endSymbol
        VB: TagParserBase.endSymbol
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.TagParserBase.endSymbol
        VB: Febucci.UI.Core.Parsing.TagParserBase.endSymbol
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: endSymbol
        path: ''
        startLine: 6785
      syntax:
        content:
          CSharp: public char endSymbol
          VB: Public endSymbol As Char
        return:
          type: System.Char
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Parsing.TagParserBase.closingSymbol
      commentId: F:Febucci.UI.Core.Parsing.TagParserBase.closingSymbol
      language: CSharp
      name:
        CSharp: closingSymbol
        VB: closingSymbol
      nameWithType:
        CSharp: TagParserBase.closingSymbol
        VB: TagParserBase.closingSymbol
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.TagParserBase.closingSymbol
        VB: Febucci.UI.Core.Parsing.TagParserBase.closingSymbol
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: closingSymbol
        path: ''
        startLine: 6786
      syntax:
        content:
          CSharp: public char closingSymbol
          VB: Public closingSymbol As Char
        return:
          type: System.Char
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Parsing.TagParserBase.#ctor
      commentId: M:Febucci.UI.Core.Parsing.TagParserBase.#ctor
      language: CSharp
      name:
        CSharp: TagParserBase()
        VB: TagParserBase()
      nameWithType:
        CSharp: TagParserBase.TagParserBase()
        VB: TagParserBase.TagParserBase()
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.TagParserBase.TagParserBase()
        VB: Febucci.UI.Core.Parsing.TagParserBase.TagParserBase()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: .ctor
        path: ''
        startLine: 6788
      syntax:
        content:
          CSharp: public TagParserBase()
          VB: Public Sub New
      overload: Febucci.UI.Core.Parsing.TagParserBase.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Parsing.TagParserBase.#ctor(System.Char,System.Char,System.Char)
      commentId: M:Febucci.UI.Core.Parsing.TagParserBase.#ctor(System.Char,System.Char,System.Char)
      language: CSharp
      name:
        CSharp: TagParserBase(Char, Char, Char)
        VB: TagParserBase(Char, Char, Char)
      nameWithType:
        CSharp: TagParserBase.TagParserBase(Char, Char, Char)
        VB: TagParserBase.TagParserBase(Char, Char, Char)
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.TagParserBase.TagParserBase(System.Char, System.Char, System.Char)
        VB: Febucci.UI.Core.Parsing.TagParserBase.TagParserBase(System.Char, System.Char, System.Char)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: .ctor
        path: ''
        startLine: 6789
      syntax:
        content:
          CSharp: public TagParserBase(char startSymbol, char closingSymbol, char endSymbol)
          VB: Public Sub New(startSymbol As Char, closingSymbol As Char, endSymbol As Char)
        parameters:
        - id: startSymbol
          type: System.Char
        - id: closingSymbol
          type: System.Char
        - id: endSymbol
          type: System.Char
      overload: Febucci.UI.Core.Parsing.TagParserBase.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Parsing.TagParserBase.TryProcessingTag(System.String,System.Int32,System.Int32@,StringBuilder,System.Int32)
      commentId: M:Febucci.UI.Core.Parsing.TagParserBase.TryProcessingTag(System.String,System.Int32,System.Int32@,StringBuilder,System.Int32)
      language: CSharp
      name:
        CSharp: TryProcessingTag(String, Int32, ref Int32, StringBuilder, Int32)
        VB: TryProcessingTag(String, Int32, ByRef Int32, StringBuilder, Int32)
      nameWithType:
        CSharp: TagParserBase.TryProcessingTag(String, Int32, ref Int32, StringBuilder, Int32)
        VB: TagParserBase.TryProcessingTag(String, Int32, ByRef Int32, StringBuilder, Int32)
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.TagParserBase.TryProcessingTag(System.String, System.Int32, ref System.Int32, StringBuilder, System.Int32)
        VB: Febucci.UI.Core.Parsing.TagParserBase.TryProcessingTag(System.String, System.Int32, ByRef System.Int32, StringBuilder, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: TryProcessingTag
        path: ''
        startLine: 6797
      syntax:
        content:
          CSharp: public abstract bool TryProcessingTag(string textInsideBrackets, int tagLength, ref int realTextIndex, StringBuilder finalTextBuilder, int internalOrder)
          VB: Public MustOverride Function TryProcessingTag(textInsideBrackets As String, tagLength As Integer, ByRef realTextIndex As Integer, finalTextBuilder As StringBuilder, internalOrder As Integer) As Boolean
        parameters:
        - id: textInsideBrackets
          type: System.String
        - id: tagLength
          type: System.Int32
        - id: realTextIndex
          type: System.Int32
        - id: finalTextBuilder
          type: StringBuilder
        - id: internalOrder
          type: System.Int32
        return:
          type: System.Boolean
      overload: Febucci.UI.Core.Parsing.TagParserBase.TryProcessingTag*
      modifiers:
        CSharp:
        - public
        - abstract
        VB:
        - Public
        - MustOverride
    - id: Febucci.UI.Core.Parsing.TagParserBase.Initialize
      commentId: M:Febucci.UI.Core.Parsing.TagParserBase.Initialize
      language: CSharp
      name:
        CSharp: Initialize()
        VB: Initialize()
      nameWithType:
        CSharp: TagParserBase.Initialize()
        VB: TagParserBase.Initialize()
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.TagParserBase.Initialize()
        VB: Febucci.UI.Core.Parsing.TagParserBase.Initialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: Initialize
        path: ''
        startLine: 6799
      syntax:
        content:
          CSharp: public void Initialize()
          VB: Public Sub Initialize
      overload: Febucci.UI.Core.Parsing.TagParserBase.Initialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Core.Parsing.TagParserBase.OnInitialize
      commentId: M:Febucci.UI.Core.Parsing.TagParserBase.OnInitialize
      language: CSharp
      name:
        CSharp: OnInitialize()
        VB: OnInitialize()
      nameWithType:
        CSharp: TagParserBase.OnInitialize()
        VB: TagParserBase.OnInitialize()
      qualifiedName:
        CSharp: Febucci.UI.Core.Parsing.TagParserBase.OnInitialize()
        VB: Febucci.UI.Core.Parsing.TagParserBase.OnInitialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Core.Parsing
      source:
        id: OnInitialize
        path: ''
        startLine: 6800
      syntax:
        content:
          CSharp: protected virtual void OnInitialize()
          VB: Protected Overridable Sub OnInitialize
      overload: Febucci.UI.Core.Parsing.TagParserBase.OnInitialize*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
- id: Febucci.UI.Actions
  commentId: N:Febucci.UI.Actions
  language: CSharp
  name:
    CSharp: Febucci.UI.Actions
    VB: Febucci.UI.Actions
  nameWithType:
    CSharp: Febucci.UI.Actions
    VB: Febucci.UI.Actions
  qualifiedName:
    CSharp: Febucci.UI.Actions
    VB: Febucci.UI.Actions
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: Febucci.UI.Actions.ActionDatabase
    commentId: T:Febucci.UI.Actions.ActionDatabase
    language: CSharp
    name:
      CSharp: ActionDatabase
      VB: ActionDatabase
    nameWithType:
      CSharp: ActionDatabase
      VB: ActionDatabase
    qualifiedName:
      CSharp: Febucci.UI.Actions.ActionDatabase
      VB: Febucci.UI.Actions.ActionDatabase
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Actions
    source:
      id: ActionDatabase
      path: ''
      startLine: 5894
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class ActionDatabase : Database<ActionScriptableBase>
        VB: >-
          <Serializable>

          Public Class ActionDatabase

              Inherits Database(Of ActionScriptableBase)
    inheritance:
    - System.Object
    - Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}
    inheritedMembers:
    - Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}.Data
    - Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}.Add(Febucci.UI.Actions.ActionScriptableBase)
    - Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}.ForceBuildRefresh
    - Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}.BuildOnce
    - Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}.OnBuildOnce
    - Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}.ContainsKey(System.String)
    - Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}.Item(System.String)
    - Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}.DestroyImmediate(System.Boolean)
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Febucci.UI.Actions.SpeedAction
    commentId: T:Febucci.UI.Actions.SpeedAction
    language: CSharp
    name:
      CSharp: SpeedAction
      VB: SpeedAction
    nameWithType:
      CSharp: SpeedAction
      VB: SpeedAction
    qualifiedName:
      CSharp: Febucci.UI.Actions.SpeedAction
      VB: Febucci.UI.Actions.SpeedAction
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Actions
    source:
      id: SpeedAction
      path: ''
      startLine: 6824
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public sealed class SpeedAction : ActionScriptableBase
        VB: >-
          <Serializable>

          Public NotInheritable Class SpeedAction

              Inherits ActionScriptableBase
    inheritance:
    - System.Object
    - Febucci.UI.Actions.ActionScriptableBase
    implements:
    - ITagProvider
    inheritedMembers:
    - Febucci.UI.Actions.ActionScriptableBase.TagID
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Febucci.UI.Actions.SpeedAction.defaultSpeed
      commentId: F:Febucci.UI.Actions.SpeedAction.defaultSpeed
      language: CSharp
      name:
        CSharp: defaultSpeed
        VB: defaultSpeed
      nameWithType:
        CSharp: SpeedAction.defaultSpeed
        VB: SpeedAction.defaultSpeed
      qualifiedName:
        CSharp: Febucci.UI.Actions.SpeedAction.defaultSpeed
        VB: Febucci.UI.Actions.SpeedAction.defaultSpeed
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Actions
      source:
        id: defaultSpeed
        path: ''
        startLine: 6833
      summary: "\nSpeed used in case the action does not have the first parameter\n"
      example: []
      syntax:
        content:
          CSharp: public float defaultSpeed
          VB: Public defaultSpeed As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Actions.SpeedAction.DoAction(ActionMarker,TypewriterCore,TypingInfo)
      commentId: M:Febucci.UI.Actions.SpeedAction.DoAction(ActionMarker,TypewriterCore,TypingInfo)
      language: CSharp
      name:
        CSharp: DoAction(ActionMarker, TypewriterCore, TypingInfo)
        VB: DoAction(ActionMarker, TypewriterCore, TypingInfo)
      nameWithType:
        CSharp: SpeedAction.DoAction(ActionMarker, TypewriterCore, TypingInfo)
        VB: SpeedAction.DoAction(ActionMarker, TypewriterCore, TypingInfo)
      qualifiedName:
        CSharp: Febucci.UI.Actions.SpeedAction.DoAction(ActionMarker, TypewriterCore, TypingInfo)
        VB: Febucci.UI.Actions.SpeedAction.DoAction(ActionMarker, TypewriterCore, TypingInfo)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Actions
      source:
        id: DoAction
        path: ''
        startLine: 6835
      syntax:
        content:
          CSharp: public override IEnumerator DoAction(ActionMarker action, TypewriterCore typewriter, TypingInfo typingInfo)
          VB: Public Overrides Function DoAction(action As ActionMarker, typewriter As TypewriterCore, typingInfo As TypingInfo) As IEnumerator
        parameters:
        - id: action
          type: ActionMarker
        - id: typewriter
          type: TypewriterCore
        - id: typingInfo
          type: TypingInfo
        return:
          type: System.Collections.IEnumerator
      overload: Febucci.UI.Actions.SpeedAction.DoAction*
      overridden: Febucci.UI.Actions.ActionScriptableBase.DoAction(ActionMarker,TypewriterCore,TypingInfo)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Actions.WaitAnyInputAction
    commentId: T:Febucci.UI.Actions.WaitAnyInputAction
    language: CSharp
    name:
      CSharp: WaitAnyInputAction
      VB: WaitAnyInputAction
    nameWithType:
      CSharp: WaitAnyInputAction
      VB: WaitAnyInputAction
    qualifiedName:
      CSharp: Febucci.UI.Actions.WaitAnyInputAction
      VB: Febucci.UI.Actions.WaitAnyInputAction
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Actions
    source:
      id: WaitAnyInputAction
      path: ''
      startLine: 6854
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public sealed class WaitAnyInputAction : ActionScriptableBase
        VB: >-
          <Serializable>

          Public NotInheritable Class WaitAnyInputAction

              Inherits ActionScriptableBase
    inheritance:
    - System.Object
    - Febucci.UI.Actions.ActionScriptableBase
    implements:
    - ITagProvider
    inheritedMembers:
    - Febucci.UI.Actions.ActionScriptableBase.TagID
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Febucci.UI.Actions.WaitAnyInputAction.DoAction(ActionMarker,TypewriterCore,TypingInfo)
      commentId: M:Febucci.UI.Actions.WaitAnyInputAction.DoAction(ActionMarker,TypewriterCore,TypingInfo)
      language: CSharp
      name:
        CSharp: DoAction(ActionMarker, TypewriterCore, TypingInfo)
        VB: DoAction(ActionMarker, TypewriterCore, TypingInfo)
      nameWithType:
        CSharp: WaitAnyInputAction.DoAction(ActionMarker, TypewriterCore, TypingInfo)
        VB: WaitAnyInputAction.DoAction(ActionMarker, TypewriterCore, TypingInfo)
      qualifiedName:
        CSharp: Febucci.UI.Actions.WaitAnyInputAction.DoAction(ActionMarker, TypewriterCore, TypingInfo)
        VB: Febucci.UI.Actions.WaitAnyInputAction.DoAction(ActionMarker, TypewriterCore, TypingInfo)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Actions
      source:
        id: DoAction
        path: ''
        startLine: 6859
      syntax:
        content:
          CSharp: public override IEnumerator DoAction(ActionMarker action, TypewriterCore typewriter, TypingInfo typingInfo)
          VB: Public Overrides Function DoAction(action As ActionMarker, typewriter As TypewriterCore, typingInfo As TypingInfo) As IEnumerator
        parameters:
        - id: action
          type: ActionMarker
        - id: typewriter
          type: TypewriterCore
        - id: typingInfo
          type: TypingInfo
        return:
          type: System.Collections.IEnumerator
      overload: Febucci.UI.Actions.WaitAnyInputAction.DoAction*
      overridden: Febucci.UI.Actions.ActionScriptableBase.DoAction(ActionMarker,TypewriterCore,TypingInfo)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Actions.WaitForAction
    commentId: T:Febucci.UI.Actions.WaitForAction
    language: CSharp
    name:
      CSharp: WaitForAction
      VB: WaitForAction
    nameWithType:
      CSharp: WaitForAction
      VB: WaitForAction
    qualifiedName:
      CSharp: Febucci.UI.Actions.WaitForAction
      VB: Febucci.UI.Actions.WaitForAction
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Actions
    source:
      id: WaitForAction
      path: ''
      startLine: 6871
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public sealed class WaitForAction : ActionScriptableBase
        VB: >-
          <Serializable>

          Public NotInheritable Class WaitForAction

              Inherits ActionScriptableBase
    inheritance:
    - System.Object
    - Febucci.UI.Actions.ActionScriptableBase
    implements:
    - ITagProvider
    inheritedMembers:
    - Febucci.UI.Actions.ActionScriptableBase.TagID
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Febucci.UI.Actions.WaitForAction.defaultTime
      commentId: F:Febucci.UI.Actions.WaitForAction.defaultTime
      language: CSharp
      name:
        CSharp: defaultTime
        VB: defaultTime
      nameWithType:
        CSharp: WaitForAction.defaultTime
        VB: WaitForAction.defaultTime
      qualifiedName:
        CSharp: Febucci.UI.Actions.WaitForAction.defaultTime
        VB: Febucci.UI.Actions.WaitForAction.defaultTime
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Actions
      source:
        id: defaultTime
        path: ''
        startLine: 6880
      summary: "\nTime used in case the action does not have the first parameter\n"
      example: []
      syntax:
        content:
          CSharp: public float defaultTime
          VB: Public defaultTime As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Actions.WaitForAction.DoAction(ActionMarker,TypewriterCore,TypingInfo)
      commentId: M:Febucci.UI.Actions.WaitForAction.DoAction(ActionMarker,TypewriterCore,TypingInfo)
      language: CSharp
      name:
        CSharp: DoAction(ActionMarker, TypewriterCore, TypingInfo)
        VB: DoAction(ActionMarker, TypewriterCore, TypingInfo)
      nameWithType:
        CSharp: WaitForAction.DoAction(ActionMarker, TypewriterCore, TypingInfo)
        VB: WaitForAction.DoAction(ActionMarker, TypewriterCore, TypingInfo)
      qualifiedName:
        CSharp: Febucci.UI.Actions.WaitForAction.DoAction(ActionMarker, TypewriterCore, TypingInfo)
        VB: Febucci.UI.Actions.WaitForAction.DoAction(ActionMarker, TypewriterCore, TypingInfo)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Actions
      source:
        id: DoAction
        path: ''
        startLine: 6882
      syntax:
        content:
          CSharp: public override IEnumerator DoAction(ActionMarker action, TypewriterCore typewriter, TypingInfo typingInfo)
          VB: Public Overrides Function DoAction(action As ActionMarker, typewriter As TypewriterCore, typingInfo As TypingInfo) As IEnumerator
        parameters:
        - id: action
          type: ActionMarker
        - id: typewriter
          type: TypewriterCore
        - id: typingInfo
          type: TypingInfo
        return:
          type: System.Collections.IEnumerator
      overload: Febucci.UI.Actions.WaitForAction.DoAction*
      overridden: Febucci.UI.Actions.ActionScriptableBase.DoAction(ActionMarker,TypewriterCore,TypingInfo)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Actions.ActionScriptableBase
    commentId: T:Febucci.UI.Actions.ActionScriptableBase
    language: CSharp
    name:
      CSharp: ActionScriptableBase
      VB: ActionScriptableBase
    nameWithType:
      CSharp: ActionScriptableBase
      VB: ActionScriptableBase
    qualifiedName:
      CSharp: Febucci.UI.Actions.ActionScriptableBase
      VB: Febucci.UI.Actions.ActionScriptableBase
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Actions
    source:
      id: ActionScriptableBase
      path: ''
      startLine: 6904
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public abstract class ActionScriptableBase : UnityEngine.ScriptableObject
        VB: >-
          <Serializable>

          Public MustInherit Class ActionScriptableBase

              Inherits UnityEngine.ScriptableObject
    inheritance:
    - System.Object
    implements:
    - ITagProvider
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: Febucci.UI.Actions.ActionScriptableBase.TagID
      commentId: P:Febucci.UI.Actions.ActionScriptableBase.TagID
      language: CSharp
      name:
        CSharp: TagID
        VB: TagID
      nameWithType:
        CSharp: ActionScriptableBase.TagID
        VB: ActionScriptableBase.TagID
      qualifiedName:
        CSharp: Febucci.UI.Actions.ActionScriptableBase.TagID
        VB: Febucci.UI.Actions.ActionScriptableBase.TagID
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Actions
      source:
        id: TagID
        path: ''
        startLine: 6908
      syntax:
        content:
          CSharp: public string TagID { get; set; }
          VB: Public Property TagID As String
        parameters: []
        return:
          type: System.String
      overload: Febucci.UI.Actions.ActionScriptableBase.TagID*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Febucci.UI.Actions.ActionScriptableBase.DoAction(ActionMarker,TypewriterCore,TypingInfo)
      commentId: M:Febucci.UI.Actions.ActionScriptableBase.DoAction(ActionMarker,TypewriterCore,TypingInfo)
      language: CSharp
      name:
        CSharp: DoAction(ActionMarker, TypewriterCore, TypingInfo)
        VB: DoAction(ActionMarker, TypewriterCore, TypingInfo)
      nameWithType:
        CSharp: ActionScriptableBase.DoAction(ActionMarker, TypewriterCore, TypingInfo)
        VB: ActionScriptableBase.DoAction(ActionMarker, TypewriterCore, TypingInfo)
      qualifiedName:
        CSharp: Febucci.UI.Actions.ActionScriptableBase.DoAction(ActionMarker, TypewriterCore, TypingInfo)
        VB: Febucci.UI.Actions.ActionScriptableBase.DoAction(ActionMarker, TypewriterCore, TypingInfo)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Actions
      source:
        id: DoAction
        path: ''
        startLine: 6914
      syntax:
        content:
          CSharp: public abstract IEnumerator DoAction(ActionMarker action, TypewriterCore typewriter, TypingInfo typingInfo)
          VB: Public MustOverride Function DoAction(action As ActionMarker, typewriter As TypewriterCore, typingInfo As TypingInfo) As IEnumerator
        parameters:
        - id: action
          type: ActionMarker
        - id: typewriter
          type: TypewriterCore
        - id: typingInfo
          type: TypingInfo
        return:
          type: System.Collections.IEnumerator
      overload: Febucci.UI.Actions.ActionScriptableBase.DoAction*
      modifiers:
        CSharp:
        - public
        - abstract
        VB:
        - Public
        - MustOverride
- id: Febucci.UI.Effects
  commentId: N:Febucci.UI.Effects
  language: CSharp
  name:
    CSharp: Febucci.UI.Effects
    VB: Febucci.UI.Effects
  nameWithType:
    CSharp: Febucci.UI.Effects
    VB: Febucci.UI.Effects
  qualifiedName:
    CSharp: Febucci.UI.Effects
    VB: Febucci.UI.Effects
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: Febucci.UI.Effects.DiagonalExpandAppearance
    commentId: T:Febucci.UI.Effects.DiagonalExpandAppearance
    language: CSharp
    name:
      CSharp: DiagonalExpandAppearance
      VB: DiagonalExpandAppearance
    nameWithType:
      CSharp: DiagonalExpandAppearance
      VB: DiagonalExpandAppearance
    qualifiedName:
      CSharp: Febucci.UI.Effects.DiagonalExpandAppearance
      VB: Febucci.UI.Effects.DiagonalExpandAppearance
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: DiagonalExpandAppearance
      path: ''
      startLine: 6923
    syntax:
      content:
        CSharp: 'public sealed class DiagonalExpandAppearance : AppearanceScriptableBase'
        VB: >-
          Public NotInheritable Class DiagonalExpandAppearance

              Inherits AppearanceScriptableBase
    inheritance:
    - System.Object
    - Febucci.UI.Effects.AnimationScriptableBase
    - Febucci.UI.Effects.AppearanceScriptableBase
    implements:
    - ITagProvider
    inheritedMembers:
    - Febucci.UI.Effects.AppearanceScriptableBase.baseDuration
    - Febucci.UI.Effects.AppearanceScriptableBase.duration
    - Febucci.UI.Effects.AppearanceScriptableBase.GetMaxDuration
    - Febucci.UI.Effects.AppearanceScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
    - Febucci.UI.Effects.AnimationScriptableBase.TagID
    - Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
    - Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
    - Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(CharacterData@,TAnimCore)
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Febucci.UI.Effects.DiagonalExpandAppearance.diagonalFromBttmLeft
      commentId: F:Febucci.UI.Effects.DiagonalExpandAppearance.diagonalFromBttmLeft
      language: CSharp
      name:
        CSharp: diagonalFromBttmLeft
        VB: diagonalFromBttmLeft
      nameWithType:
        CSharp: DiagonalExpandAppearance.diagonalFromBttmLeft
        VB: DiagonalExpandAppearance.diagonalFromBttmLeft
      qualifiedName:
        CSharp: Febucci.UI.Effects.DiagonalExpandAppearance.diagonalFromBttmLeft
        VB: Febucci.UI.Effects.DiagonalExpandAppearance.diagonalFromBttmLeft
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: diagonalFromBttmLeft
        path: ''
        startLine: 6928
      syntax:
        content:
          CSharp: public bool diagonalFromBttmLeft
          VB: Public diagonalFromBttmLeft As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.DiagonalExpandAppearance.ResetContext(TAnimCore)
      commentId: M:Febucci.UI.Effects.DiagonalExpandAppearance.ResetContext(TAnimCore)
      language: CSharp
      name:
        CSharp: ResetContext(TAnimCore)
        VB: ResetContext(TAnimCore)
      nameWithType:
        CSharp: DiagonalExpandAppearance.ResetContext(TAnimCore)
        VB: DiagonalExpandAppearance.ResetContext(TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.DiagonalExpandAppearance.ResetContext(TAnimCore)
        VB: Febucci.UI.Effects.DiagonalExpandAppearance.ResetContext(TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ResetContext
        path: ''
        startLine: 6937
      syntax:
        content:
          CSharp: public override void ResetContext(TAnimCore animator)
          VB: Public Overrides Sub ResetContext(animator As TAnimCore)
        parameters:
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.DiagonalExpandAppearance.ResetContext*
      overridden: Febucci.UI.Effects.AppearanceScriptableBase.ResetContext(TAnimCore)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.DiagonalExpandAppearance.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      commentId: M:Febucci.UI.Effects.DiagonalExpandAppearance.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      language: CSharp
      name:
        CSharp: ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: ApplyEffectTo(ByRef CharacterData, TAnimCore)
      nameWithType:
        CSharp: DiagonalExpandAppearance.ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: DiagonalExpandAppearance.ApplyEffectTo(ByRef CharacterData, TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.DiagonalExpandAppearance.ApplyEffectTo(ref Febucci.UI.Core.CharacterData, TAnimCore)
        VB: Febucci.UI.Effects.DiagonalExpandAppearance.ApplyEffectTo(ByRef Febucci.UI.Core.CharacterData, TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ApplyEffectTo
        path: ''
        startLine: 6958
      syntax:
        content:
          CSharp: public override void ApplyEffectTo(ref CharacterData character, TAnimCore animator)
          VB: Public Overrides Sub ApplyEffectTo(ByRef character As CharacterData, animator As TAnimCore)
        parameters:
        - id: character
          type: Febucci.UI.Core.CharacterData
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.DiagonalExpandAppearance.ApplyEffectTo*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.DiagonalExpandAppearance.SetModifier(Febucci.UI.ModifierInfo)
      commentId: M:Febucci.UI.Effects.DiagonalExpandAppearance.SetModifier(Febucci.UI.ModifierInfo)
      language: CSharp
      name:
        CSharp: SetModifier(ModifierInfo)
        VB: SetModifier(ModifierInfo)
      nameWithType:
        CSharp: DiagonalExpandAppearance.SetModifier(ModifierInfo)
        VB: DiagonalExpandAppearance.SetModifier(ModifierInfo)
      qualifiedName:
        CSharp: Febucci.UI.Effects.DiagonalExpandAppearance.SetModifier(Febucci.UI.ModifierInfo)
        VB: Febucci.UI.Effects.DiagonalExpandAppearance.SetModifier(Febucci.UI.ModifierInfo)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: SetModifier
        path: ''
        startLine: 6968
      syntax:
        content:
          CSharp: public override void SetModifier(ModifierInfo modifier)
          VB: Public Overrides Sub SetModifier(modifier As ModifierInfo)
        parameters:
        - id: modifier
          type: Febucci.UI.ModifierInfo
      overload: Febucci.UI.Effects.DiagonalExpandAppearance.SetModifier*
      overridden: Febucci.UI.Effects.AppearanceScriptableBase.SetModifier(Febucci.UI.ModifierInfo)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Effects.FadeAppearance
    commentId: T:Febucci.UI.Effects.FadeAppearance
    language: CSharp
    name:
      CSharp: FadeAppearance
      VB: FadeAppearance
    nameWithType:
      CSharp: FadeAppearance
      VB: FadeAppearance
    qualifiedName:
      CSharp: Febucci.UI.Effects.FadeAppearance
      VB: Febucci.UI.Effects.FadeAppearance
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: FadeAppearance
      path: ''
      startLine: 6988
    syntax:
      content:
        CSharp: 'public sealed class FadeAppearance : AppearanceScriptableBase'
        VB: >-
          Public NotInheritable Class FadeAppearance

              Inherits AppearanceScriptableBase
    inheritance:
    - System.Object
    - Febucci.UI.Effects.AnimationScriptableBase
    - Febucci.UI.Effects.AppearanceScriptableBase
    implements:
    - ITagProvider
    inheritedMembers:
    - Febucci.UI.Effects.AppearanceScriptableBase.baseDuration
    - Febucci.UI.Effects.AppearanceScriptableBase.duration
    - Febucci.UI.Effects.AppearanceScriptableBase.ResetContext(TAnimCore)
    - Febucci.UI.Effects.AppearanceScriptableBase.GetMaxDuration
    - Febucci.UI.Effects.AppearanceScriptableBase.SetModifier(Febucci.UI.ModifierInfo)
    - Febucci.UI.Effects.AppearanceScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
    - Febucci.UI.Effects.AnimationScriptableBase.TagID
    - Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
    - Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
    - Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(CharacterData@,TAnimCore)
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Febucci.UI.Effects.FadeAppearance.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      commentId: M:Febucci.UI.Effects.FadeAppearance.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      language: CSharp
      name:
        CSharp: ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: ApplyEffectTo(ByRef CharacterData, TAnimCore)
      nameWithType:
        CSharp: FadeAppearance.ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: FadeAppearance.ApplyEffectTo(ByRef CharacterData, TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.FadeAppearance.ApplyEffectTo(ref Febucci.UI.Core.CharacterData, TAnimCore)
        VB: Febucci.UI.Effects.FadeAppearance.ApplyEffectTo(ByRef Febucci.UI.Core.CharacterData, TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ApplyEffectTo
        path: ''
        startLine: 6995
      syntax:
        content:
          CSharp: public override void ApplyEffectTo(ref CharacterData character, TAnimCore animator)
          VB: Public Overrides Sub ApplyEffectTo(ByRef character As CharacterData, animator As TAnimCore)
        parameters:
        - id: character
          type: Febucci.UI.Core.CharacterData
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.FadeAppearance.ApplyEffectTo*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Effects.HorizontalExpandAppearance
    commentId: T:Febucci.UI.Effects.HorizontalExpandAppearance
    language: CSharp
    name:
      CSharp: HorizontalExpandAppearance
      VB: HorizontalExpandAppearance
    nameWithType:
      CSharp: HorizontalExpandAppearance
      VB: HorizontalExpandAppearance
    qualifiedName:
      CSharp: Febucci.UI.Effects.HorizontalExpandAppearance
      VB: Febucci.UI.Effects.HorizontalExpandAppearance
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: HorizontalExpandAppearance
      path: ''
      startLine: 7017
    syntax:
      content:
        CSharp: 'public sealed class HorizontalExpandAppearance : AppearanceScriptableBase'
        VB: >-
          Public NotInheritable Class HorizontalExpandAppearance

              Inherits AppearanceScriptableBase
    inheritance:
    - System.Object
    - Febucci.UI.Effects.AnimationScriptableBase
    - Febucci.UI.Effects.AppearanceScriptableBase
    implements:
    - ITagProvider
    inheritedMembers:
    - Febucci.UI.Effects.AppearanceScriptableBase.baseDuration
    - Febucci.UI.Effects.AppearanceScriptableBase.duration
    - Febucci.UI.Effects.AppearanceScriptableBase.GetMaxDuration
    - Febucci.UI.Effects.AppearanceScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
    - Febucci.UI.Effects.AnimationScriptableBase.TagID
    - Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
    - Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
    - Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(CharacterData@,TAnimCore)
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Febucci.UI.Effects.HorizontalExpandAppearance.type
      commentId: F:Febucci.UI.Effects.HorizontalExpandAppearance.type
      language: CSharp
      name:
        CSharp: type
        VB: type
      nameWithType:
        CSharp: HorizontalExpandAppearance.type
        VB: HorizontalExpandAppearance.type
      qualifiedName:
        CSharp: Febucci.UI.Effects.HorizontalExpandAppearance.type
        VB: Febucci.UI.Effects.HorizontalExpandAppearance.type
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: type
        path: ''
        startLine: 7031
      syntax:
        content:
          CSharp: public HorizontalExpandAppearance.ExpType type
          VB: Public type As HorizontalExpandAppearance.ExpType
        return:
          type: Febucci.UI.Effects.HorizontalExpandAppearance.ExpType
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.HorizontalExpandAppearance.ResetContext(TAnimCore)
      commentId: M:Febucci.UI.Effects.HorizontalExpandAppearance.ResetContext(TAnimCore)
      language: CSharp
      name:
        CSharp: ResetContext(TAnimCore)
        VB: ResetContext(TAnimCore)
      nameWithType:
        CSharp: HorizontalExpandAppearance.ResetContext(TAnimCore)
        VB: HorizontalExpandAppearance.ResetContext(TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.HorizontalExpandAppearance.ResetContext(TAnimCore)
        VB: Febucci.UI.Effects.HorizontalExpandAppearance.ResetContext(TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ResetContext
        path: ''
        startLine: 7039
      syntax:
        content:
          CSharp: public override void ResetContext(TAnimCore animator)
          VB: Public Overrides Sub ResetContext(animator As TAnimCore)
        parameters:
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.HorizontalExpandAppearance.ResetContext*
      overridden: Febucci.UI.Effects.AppearanceScriptableBase.ResetContext(TAnimCore)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.HorizontalExpandAppearance.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      commentId: M:Febucci.UI.Effects.HorizontalExpandAppearance.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      language: CSharp
      name:
        CSharp: ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: ApplyEffectTo(ByRef CharacterData, TAnimCore)
      nameWithType:
        CSharp: HorizontalExpandAppearance.ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: HorizontalExpandAppearance.ApplyEffectTo(ByRef CharacterData, TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.HorizontalExpandAppearance.ApplyEffectTo(ref Febucci.UI.Core.CharacterData, TAnimCore)
        VB: Febucci.UI.Effects.HorizontalExpandAppearance.ApplyEffectTo(ByRef Febucci.UI.Core.CharacterData, TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ApplyEffectTo
        path: ''
        startLine: 7046
      syntax:
        content:
          CSharp: public override void ApplyEffectTo(ref CharacterData character, TAnimCore animator)
          VB: Public Overrides Sub ApplyEffectTo(ByRef character As CharacterData, animator As TAnimCore)
        parameters:
        - id: character
          type: Febucci.UI.Core.CharacterData
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.HorizontalExpandAppearance.ApplyEffectTo*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.HorizontalExpandAppearance.SetModifier(Febucci.UI.ModifierInfo)
      commentId: M:Febucci.UI.Effects.HorizontalExpandAppearance.SetModifier(Febucci.UI.ModifierInfo)
      language: CSharp
      name:
        CSharp: SetModifier(ModifierInfo)
        VB: SetModifier(ModifierInfo)
      nameWithType:
        CSharp: HorizontalExpandAppearance.SetModifier(ModifierInfo)
        VB: HorizontalExpandAppearance.SetModifier(ModifierInfo)
      qualifiedName:
        CSharp: Febucci.UI.Effects.HorizontalExpandAppearance.SetModifier(Febucci.UI.ModifierInfo)
        VB: Febucci.UI.Effects.HorizontalExpandAppearance.SetModifier(Febucci.UI.ModifierInfo)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: SetModifier
        path: ''
        startLine: 7089
      syntax:
        content:
          CSharp: public override void SetModifier(ModifierInfo modifier)
          VB: Public Overrides Sub SetModifier(modifier As ModifierInfo)
        parameters:
        - id: modifier
          type: Febucci.UI.ModifierInfo
      overload: Febucci.UI.Effects.HorizontalExpandAppearance.SetModifier*
      overridden: Febucci.UI.Effects.AppearanceScriptableBase.SetModifier(Febucci.UI.ModifierInfo)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Effects.HorizontalExpandAppearance.ExpType
    commentId: T:Febucci.UI.Effects.HorizontalExpandAppearance.ExpType
    language: CSharp
    name:
      CSharp: HorizontalExpandAppearance.ExpType
      VB: HorizontalExpandAppearance.ExpType
    nameWithType:
      CSharp: HorizontalExpandAppearance.ExpType
      VB: HorizontalExpandAppearance.ExpType
    qualifiedName:
      CSharp: Febucci.UI.Effects.HorizontalExpandAppearance.ExpType
      VB: Febucci.UI.Effects.HorizontalExpandAppearance.ExpType
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: ExpType
      path: ''
      startLine: 7023
    syntax:
      content:
        CSharp: public enum ExpType
        VB: Public Enum ExpType
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Febucci.UI.Effects.HorizontalExpandAppearance.ExpType.Left
      commentId: F:Febucci.UI.Effects.HorizontalExpandAppearance.ExpType.Left
      language: CSharp
      name:
        CSharp: Left
        VB: Left
      nameWithType:
        CSharp: HorizontalExpandAppearance.ExpType.Left
        VB: HorizontalExpandAppearance.ExpType.Left
      qualifiedName:
        CSharp: Febucci.UI.Effects.HorizontalExpandAppearance.ExpType.Left
        VB: Febucci.UI.Effects.HorizontalExpandAppearance.ExpType.Left
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: Left
        path: ''
        startLine: 7025
      syntax:
        content:
          CSharp: Left = 0
          VB: Left = 0
        return:
          type: Febucci.UI.Effects.HorizontalExpandAppearance.ExpType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Febucci.UI.Effects.HorizontalExpandAppearance.ExpType.Middle
      commentId: F:Febucci.UI.Effects.HorizontalExpandAppearance.ExpType.Middle
      language: CSharp
      name:
        CSharp: Middle
        VB: Middle
      nameWithType:
        CSharp: HorizontalExpandAppearance.ExpType.Middle
        VB: HorizontalExpandAppearance.ExpType.Middle
      qualifiedName:
        CSharp: Febucci.UI.Effects.HorizontalExpandAppearance.ExpType.Middle
        VB: Febucci.UI.Effects.HorizontalExpandAppearance.ExpType.Middle
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: Middle
        path: ''
        startLine: 7026
      syntax:
        content:
          CSharp: Middle = 1
          VB: Middle = 1
        return:
          type: Febucci.UI.Effects.HorizontalExpandAppearance.ExpType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Febucci.UI.Effects.HorizontalExpandAppearance.ExpType.Right
      commentId: F:Febucci.UI.Effects.HorizontalExpandAppearance.ExpType.Right
      language: CSharp
      name:
        CSharp: Right
        VB: Right
      nameWithType:
        CSharp: HorizontalExpandAppearance.ExpType.Right
        VB: HorizontalExpandAppearance.ExpType.Right
      qualifiedName:
        CSharp: Febucci.UI.Effects.HorizontalExpandAppearance.ExpType.Right
        VB: Febucci.UI.Effects.HorizontalExpandAppearance.ExpType.Right
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: Right
        path: ''
        startLine: 7027
      syntax:
        content:
          CSharp: Right = 2
          VB: Right = 2
        return:
          type: Febucci.UI.Effects.HorizontalExpandAppearance.ExpType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Febucci.UI.Effects.OffsetAppearance
    commentId: T:Febucci.UI.Effects.OffsetAppearance
    language: CSharp
    name:
      CSharp: OffsetAppearance
      VB: OffsetAppearance
    nameWithType:
      CSharp: OffsetAppearance
      VB: OffsetAppearance
    qualifiedName:
      CSharp: Febucci.UI.Effects.OffsetAppearance
      VB: Febucci.UI.Effects.OffsetAppearance
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: OffsetAppearance
      path: ''
      startLine: 7116
    syntax:
      content:
        CSharp: 'public sealed class OffsetAppearance : AppearanceScriptableBase'
        VB: >-
          Public NotInheritable Class OffsetAppearance

              Inherits AppearanceScriptableBase
    inheritance:
    - System.Object
    - Febucci.UI.Effects.AnimationScriptableBase
    - Febucci.UI.Effects.AppearanceScriptableBase
    implements:
    - ITagProvider
    inheritedMembers:
    - Febucci.UI.Effects.AppearanceScriptableBase.baseDuration
    - Febucci.UI.Effects.AppearanceScriptableBase.duration
    - Febucci.UI.Effects.AppearanceScriptableBase.GetMaxDuration
    - Febucci.UI.Effects.AppearanceScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
    - Febucci.UI.Effects.AnimationScriptableBase.TagID
    - Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
    - Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
    - Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(CharacterData@,TAnimCore)
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Febucci.UI.Effects.OffsetAppearance.baseAmount
      commentId: F:Febucci.UI.Effects.OffsetAppearance.baseAmount
      language: CSharp
      name:
        CSharp: baseAmount
        VB: baseAmount
      nameWithType:
        CSharp: OffsetAppearance.baseAmount
        VB: OffsetAppearance.baseAmount
      qualifiedName:
        CSharp: Febucci.UI.Effects.OffsetAppearance.baseAmount
        VB: Febucci.UI.Effects.OffsetAppearance.baseAmount
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: baseAmount
        path: ''
        startLine: 7121
      syntax:
        content:
          CSharp: public float baseAmount
          VB: Public baseAmount As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.OffsetAppearance.baseDirection
      commentId: F:Febucci.UI.Effects.OffsetAppearance.baseDirection
      language: CSharp
      name:
        CSharp: baseDirection
        VB: baseDirection
      nameWithType:
        CSharp: OffsetAppearance.baseDirection
        VB: OffsetAppearance.baseDirection
      qualifiedName:
        CSharp: Febucci.UI.Effects.OffsetAppearance.baseDirection
        VB: Febucci.UI.Effects.OffsetAppearance.baseDirection
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: baseDirection
        path: ''
        startLine: 7123
      syntax:
        content:
          CSharp: public Vector2 baseDirection
          VB: Public baseDirection As Vector2
        return:
          type: Vector2
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.OffsetAppearance.ResetContext(TAnimCore)
      commentId: M:Febucci.UI.Effects.OffsetAppearance.ResetContext(TAnimCore)
      language: CSharp
      name:
        CSharp: ResetContext(TAnimCore)
        VB: ResetContext(TAnimCore)
      nameWithType:
        CSharp: OffsetAppearance.ResetContext(TAnimCore)
        VB: OffsetAppearance.ResetContext(TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.OffsetAppearance.ResetContext(TAnimCore)
        VB: Febucci.UI.Effects.OffsetAppearance.ResetContext(TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ResetContext
        path: ''
        startLine: 7125
      syntax:
        content:
          CSharp: public override void ResetContext(TAnimCore animator)
          VB: Public Overrides Sub ResetContext(animator As TAnimCore)
        parameters:
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.OffsetAppearance.ResetContext*
      overridden: Febucci.UI.Effects.AppearanceScriptableBase.ResetContext(TAnimCore)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.OffsetAppearance.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      commentId: M:Febucci.UI.Effects.OffsetAppearance.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      language: CSharp
      name:
        CSharp: ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: ApplyEffectTo(ByRef CharacterData, TAnimCore)
      nameWithType:
        CSharp: OffsetAppearance.ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: OffsetAppearance.ApplyEffectTo(ByRef CharacterData, TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.OffsetAppearance.ApplyEffectTo(ref Febucci.UI.Core.CharacterData, TAnimCore)
        VB: Febucci.UI.Effects.OffsetAppearance.ApplyEffectTo(ByRef Febucci.UI.Core.CharacterData, TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ApplyEffectTo
        path: ''
        startLine: 7131
      syntax:
        content:
          CSharp: public override void ApplyEffectTo(ref CharacterData character, TAnimCore animator)
          VB: Public Overrides Sub ApplyEffectTo(ByRef character As CharacterData, animator As TAnimCore)
        parameters:
        - id: character
          type: Febucci.UI.Core.CharacterData
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.OffsetAppearance.ApplyEffectTo*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.OffsetAppearance.SetModifier(Febucci.UI.ModifierInfo)
      commentId: M:Febucci.UI.Effects.OffsetAppearance.SetModifier(Febucci.UI.ModifierInfo)
      language: CSharp
      name:
        CSharp: SetModifier(ModifierInfo)
        VB: SetModifier(ModifierInfo)
      nameWithType:
        CSharp: OffsetAppearance.SetModifier(ModifierInfo)
        VB: OffsetAppearance.SetModifier(ModifierInfo)
      qualifiedName:
        CSharp: Febucci.UI.Effects.OffsetAppearance.SetModifier(Febucci.UI.ModifierInfo)
        VB: Febucci.UI.Effects.OffsetAppearance.SetModifier(Febucci.UI.ModifierInfo)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: SetModifier
        path: ''
        startLine: 7136
      syntax:
        content:
          CSharp: public override void SetModifier(ModifierInfo modifier)
          VB: Public Overrides Sub SetModifier(modifier As ModifierInfo)
        parameters:
        - id: modifier
          type: Febucci.UI.ModifierInfo
      overload: Febucci.UI.Effects.OffsetAppearance.SetModifier*
      overridden: Febucci.UI.Effects.AppearanceScriptableBase.SetModifier(Febucci.UI.ModifierInfo)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Effects.RandomDirectionAppearance
    commentId: T:Febucci.UI.Effects.RandomDirectionAppearance
    language: CSharp
    name:
      CSharp: RandomDirectionAppearance
      VB: RandomDirectionAppearance
    nameWithType:
      CSharp: RandomDirectionAppearance
      VB: RandomDirectionAppearance
    qualifiedName:
      CSharp: Febucci.UI.Effects.RandomDirectionAppearance
      VB: Febucci.UI.Effects.RandomDirectionAppearance
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: RandomDirectionAppearance
      path: ''
      startLine: 7153
    syntax:
      content:
        CSharp: 'public sealed class RandomDirectionAppearance : AppearanceScriptableBase'
        VB: >-
          Public NotInheritable Class RandomDirectionAppearance

              Inherits AppearanceScriptableBase
    inheritance:
    - System.Object
    - Febucci.UI.Effects.AnimationScriptableBase
    - Febucci.UI.Effects.AppearanceScriptableBase
    implements:
    - ITagProvider
    inheritedMembers:
    - Febucci.UI.Effects.AppearanceScriptableBase.baseDuration
    - Febucci.UI.Effects.AppearanceScriptableBase.duration
    - Febucci.UI.Effects.AppearanceScriptableBase.GetMaxDuration
    - Febucci.UI.Effects.AppearanceScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
    - Febucci.UI.Effects.AnimationScriptableBase.TagID
    - Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
    - Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(CharacterData@,TAnimCore)
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Febucci.UI.Effects.RandomDirectionAppearance.baseAmount
      commentId: F:Febucci.UI.Effects.RandomDirectionAppearance.baseAmount
      language: CSharp
      name:
        CSharp: baseAmount
        VB: baseAmount
      nameWithType:
        CSharp: RandomDirectionAppearance.baseAmount
        VB: RandomDirectionAppearance.baseAmount
      qualifiedName:
        CSharp: Febucci.UI.Effects.RandomDirectionAppearance.baseAmount
        VB: Febucci.UI.Effects.RandomDirectionAppearance.baseAmount
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: baseAmount
        path: ''
        startLine: 7158
      syntax:
        content:
          CSharp: public float baseAmount
          VB: Public baseAmount As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.RandomDirectionAppearance.ResetContext(TAnimCore)
      commentId: M:Febucci.UI.Effects.RandomDirectionAppearance.ResetContext(TAnimCore)
      language: CSharp
      name:
        CSharp: ResetContext(TAnimCore)
        VB: ResetContext(TAnimCore)
      nameWithType:
        CSharp: RandomDirectionAppearance.ResetContext(TAnimCore)
        VB: RandomDirectionAppearance.ResetContext(TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.RandomDirectionAppearance.ResetContext(TAnimCore)
        VB: Febucci.UI.Effects.RandomDirectionAppearance.ResetContext(TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ResetContext
        path: ''
        startLine: 7162
      syntax:
        content:
          CSharp: public override void ResetContext(TAnimCore animator)
          VB: Public Overrides Sub ResetContext(animator As TAnimCore)
        parameters:
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.RandomDirectionAppearance.ResetContext*
      overridden: Febucci.UI.Effects.AppearanceScriptableBase.ResetContext(TAnimCore)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.RandomDirectionAppearance.OnInitialize
      commentId: M:Febucci.UI.Effects.RandomDirectionAppearance.OnInitialize
      language: CSharp
      name:
        CSharp: OnInitialize()
        VB: OnInitialize()
      nameWithType:
        CSharp: RandomDirectionAppearance.OnInitialize()
        VB: RandomDirectionAppearance.OnInitialize()
      qualifiedName:
        CSharp: Febucci.UI.Effects.RandomDirectionAppearance.OnInitialize()
        VB: Febucci.UI.Effects.RandomDirectionAppearance.OnInitialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: OnInitialize
        path: ''
        startLine: 7168
      syntax:
        content:
          CSharp: protected override void OnInitialize()
          VB: Protected Overrides Sub OnInitialize
      overload: Febucci.UI.Effects.RandomDirectionAppearance.OnInitialize*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: Febucci.UI.Effects.RandomDirectionAppearance.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      commentId: M:Febucci.UI.Effects.RandomDirectionAppearance.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      language: CSharp
      name:
        CSharp: ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: ApplyEffectTo(ByRef CharacterData, TAnimCore)
      nameWithType:
        CSharp: RandomDirectionAppearance.ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: RandomDirectionAppearance.ApplyEffectTo(ByRef CharacterData, TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.RandomDirectionAppearance.ApplyEffectTo(ref Febucci.UI.Core.CharacterData, TAnimCore)
        VB: Febucci.UI.Effects.RandomDirectionAppearance.ApplyEffectTo(ByRef Febucci.UI.Core.CharacterData, TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ApplyEffectTo
        path: ''
        startLine: 7182
      syntax:
        content:
          CSharp: public override void ApplyEffectTo(ref CharacterData character, TAnimCore animator)
          VB: Public Overrides Sub ApplyEffectTo(ByRef character As CharacterData, animator As TAnimCore)
        parameters:
        - id: character
          type: Febucci.UI.Core.CharacterData
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.RandomDirectionAppearance.ApplyEffectTo*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.RandomDirectionAppearance.SetModifier(Febucci.UI.ModifierInfo)
      commentId: M:Febucci.UI.Effects.RandomDirectionAppearance.SetModifier(Febucci.UI.ModifierInfo)
      language: CSharp
      name:
        CSharp: SetModifier(ModifierInfo)
        VB: SetModifier(ModifierInfo)
      nameWithType:
        CSharp: RandomDirectionAppearance.SetModifier(ModifierInfo)
        VB: RandomDirectionAppearance.SetModifier(ModifierInfo)
      qualifiedName:
        CSharp: Febucci.UI.Effects.RandomDirectionAppearance.SetModifier(Febucci.UI.ModifierInfo)
        VB: Febucci.UI.Effects.RandomDirectionAppearance.SetModifier(Febucci.UI.ModifierInfo)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: SetModifier
        path: ''
        startLine: 7194
      syntax:
        content:
          CSharp: public override void SetModifier(ModifierInfo modifier)
          VB: Public Overrides Sub SetModifier(modifier As ModifierInfo)
        parameters:
        - id: modifier
          type: Febucci.UI.ModifierInfo
      overload: Febucci.UI.Effects.RandomDirectionAppearance.SetModifier*
      overridden: Febucci.UI.Effects.AppearanceScriptableBase.SetModifier(Febucci.UI.ModifierInfo)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Effects.RotatingAppearance
    commentId: T:Febucci.UI.Effects.RotatingAppearance
    language: CSharp
    name:
      CSharp: RotatingAppearance
      VB: RotatingAppearance
    nameWithType:
      CSharp: RotatingAppearance
      VB: RotatingAppearance
    qualifiedName:
      CSharp: Febucci.UI.Effects.RotatingAppearance
      VB: Febucci.UI.Effects.RotatingAppearance
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: RotatingAppearance
      path: ''
      startLine: 7211
    syntax:
      content:
        CSharp: 'public sealed class RotatingAppearance : AppearanceScriptableBase'
        VB: >-
          Public NotInheritable Class RotatingAppearance

              Inherits AppearanceScriptableBase
    inheritance:
    - System.Object
    - Febucci.UI.Effects.AnimationScriptableBase
    - Febucci.UI.Effects.AppearanceScriptableBase
    implements:
    - ITagProvider
    inheritedMembers:
    - Febucci.UI.Effects.AppearanceScriptableBase.baseDuration
    - Febucci.UI.Effects.AppearanceScriptableBase.duration
    - Febucci.UI.Effects.AppearanceScriptableBase.GetMaxDuration
    - Febucci.UI.Effects.AppearanceScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
    - Febucci.UI.Effects.AnimationScriptableBase.TagID
    - Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
    - Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
    - Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(CharacterData@,TAnimCore)
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Febucci.UI.Effects.RotatingAppearance.baseTargetAngle
      commentId: F:Febucci.UI.Effects.RotatingAppearance.baseTargetAngle
      language: CSharp
      name:
        CSharp: baseTargetAngle
        VB: baseTargetAngle
      nameWithType:
        CSharp: RotatingAppearance.baseTargetAngle
        VB: RotatingAppearance.baseTargetAngle
      qualifiedName:
        CSharp: Febucci.UI.Effects.RotatingAppearance.baseTargetAngle
        VB: Febucci.UI.Effects.RotatingAppearance.baseTargetAngle
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: baseTargetAngle
        path: ''
        startLine: 7217
      syntax:
        content:
          CSharp: public float baseTargetAngle
          VB: Public baseTargetAngle As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.RotatingAppearance.ResetContext(TAnimCore)
      commentId: M:Febucci.UI.Effects.RotatingAppearance.ResetContext(TAnimCore)
      language: CSharp
      name:
        CSharp: ResetContext(TAnimCore)
        VB: ResetContext(TAnimCore)
      nameWithType:
        CSharp: RotatingAppearance.ResetContext(TAnimCore)
        VB: RotatingAppearance.ResetContext(TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.RotatingAppearance.ResetContext(TAnimCore)
        VB: Febucci.UI.Effects.RotatingAppearance.ResetContext(TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ResetContext
        path: ''
        startLine: 7220
      syntax:
        content:
          CSharp: public override void ResetContext(TAnimCore animator)
          VB: Public Overrides Sub ResetContext(animator As TAnimCore)
        parameters:
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.RotatingAppearance.ResetContext*
      overridden: Febucci.UI.Effects.AppearanceScriptableBase.ResetContext(TAnimCore)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.RotatingAppearance.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      commentId: M:Febucci.UI.Effects.RotatingAppearance.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      language: CSharp
      name:
        CSharp: ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: ApplyEffectTo(ByRef CharacterData, TAnimCore)
      nameWithType:
        CSharp: RotatingAppearance.ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: RotatingAppearance.ApplyEffectTo(ByRef CharacterData, TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.RotatingAppearance.ApplyEffectTo(ref Febucci.UI.Core.CharacterData, TAnimCore)
        VB: Febucci.UI.Effects.RotatingAppearance.ApplyEffectTo(ByRef Febucci.UI.Core.CharacterData, TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ApplyEffectTo
        path: ''
        startLine: 7226
      syntax:
        content:
          CSharp: public override void ApplyEffectTo(ref CharacterData character, TAnimCore animator)
          VB: Public Overrides Sub ApplyEffectTo(ByRef character As CharacterData, animator As TAnimCore)
        parameters:
        - id: character
          type: Febucci.UI.Core.CharacterData
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.RotatingAppearance.ApplyEffectTo*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.RotatingAppearance.SetModifier(Febucci.UI.ModifierInfo)
      commentId: M:Febucci.UI.Effects.RotatingAppearance.SetModifier(Febucci.UI.ModifierInfo)
      language: CSharp
      name:
        CSharp: SetModifier(ModifierInfo)
        VB: SetModifier(ModifierInfo)
      nameWithType:
        CSharp: RotatingAppearance.SetModifier(ModifierInfo)
        VB: RotatingAppearance.SetModifier(ModifierInfo)
      qualifiedName:
        CSharp: Febucci.UI.Effects.RotatingAppearance.SetModifier(Febucci.UI.ModifierInfo)
        VB: Febucci.UI.Effects.RotatingAppearance.SetModifier(Febucci.UI.ModifierInfo)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: SetModifier
        path: ''
        startLine: 7237
      syntax:
        content:
          CSharp: public override void SetModifier(ModifierInfo modifier)
          VB: Public Overrides Sub SetModifier(modifier As ModifierInfo)
        parameters:
        - id: modifier
          type: Febucci.UI.ModifierInfo
      overload: Febucci.UI.Effects.RotatingAppearance.SetModifier*
      overridden: Febucci.UI.Effects.AppearanceScriptableBase.SetModifier(Febucci.UI.ModifierInfo)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Effects.SizeAppearance
    commentId: T:Febucci.UI.Effects.SizeAppearance
    language: CSharp
    name:
      CSharp: SizeAppearance
      VB: SizeAppearance
    nameWithType:
      CSharp: SizeAppearance
      VB: SizeAppearance
    qualifiedName:
      CSharp: Febucci.UI.Effects.SizeAppearance
      VB: Febucci.UI.Effects.SizeAppearance
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: SizeAppearance
      path: ''
      startLine: 7253
    syntax:
      content:
        CSharp: 'public sealed class SizeAppearance : AppearanceScriptableBase'
        VB: >-
          Public NotInheritable Class SizeAppearance

              Inherits AppearanceScriptableBase
    inheritance:
    - System.Object
    - Febucci.UI.Effects.AnimationScriptableBase
    - Febucci.UI.Effects.AppearanceScriptableBase
    implements:
    - ITagProvider
    inheritedMembers:
    - Febucci.UI.Effects.AppearanceScriptableBase.baseDuration
    - Febucci.UI.Effects.AppearanceScriptableBase.duration
    - Febucci.UI.Effects.AppearanceScriptableBase.GetMaxDuration
    - Febucci.UI.Effects.AppearanceScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
    - Febucci.UI.Effects.AnimationScriptableBase.TagID
    - Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
    - Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
    - Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(CharacterData@,TAnimCore)
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Febucci.UI.Effects.SizeAppearance.baseAmplitude
      commentId: F:Febucci.UI.Effects.SizeAppearance.baseAmplitude
      language: CSharp
      name:
        CSharp: baseAmplitude
        VB: baseAmplitude
      nameWithType:
        CSharp: SizeAppearance.baseAmplitude
        VB: SizeAppearance.baseAmplitude
      qualifiedName:
        CSharp: Febucci.UI.Effects.SizeAppearance.baseAmplitude
        VB: Febucci.UI.Effects.SizeAppearance.baseAmplitude
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: baseAmplitude
        path: ''
        startLine: 7259
      syntax:
        content:
          CSharp: public float baseAmplitude
          VB: Public baseAmplitude As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.SizeAppearance.ResetContext(TAnimCore)
      commentId: M:Febucci.UI.Effects.SizeAppearance.ResetContext(TAnimCore)
      language: CSharp
      name:
        CSharp: ResetContext(TAnimCore)
        VB: ResetContext(TAnimCore)
      nameWithType:
        CSharp: SizeAppearance.ResetContext(TAnimCore)
        VB: SizeAppearance.ResetContext(TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.SizeAppearance.ResetContext(TAnimCore)
        VB: Febucci.UI.Effects.SizeAppearance.ResetContext(TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ResetContext
        path: ''
        startLine: 7261
      syntax:
        content:
          CSharp: public override void ResetContext(TAnimCore animator)
          VB: Public Overrides Sub ResetContext(animator As TAnimCore)
        parameters:
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.SizeAppearance.ResetContext*
      overridden: Febucci.UI.Effects.AppearanceScriptableBase.ResetContext(TAnimCore)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.SizeAppearance.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      commentId: M:Febucci.UI.Effects.SizeAppearance.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      language: CSharp
      name:
        CSharp: ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: ApplyEffectTo(ByRef CharacterData, TAnimCore)
      nameWithType:
        CSharp: SizeAppearance.ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: SizeAppearance.ApplyEffectTo(ByRef CharacterData, TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.SizeAppearance.ApplyEffectTo(ref Febucci.UI.Core.CharacterData, TAnimCore)
        VB: Febucci.UI.Effects.SizeAppearance.ApplyEffectTo(ByRef Febucci.UI.Core.CharacterData, TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ApplyEffectTo
        path: ''
        startLine: 7267
      syntax:
        content:
          CSharp: public override void ApplyEffectTo(ref CharacterData character, TAnimCore animator)
          VB: Public Overrides Sub ApplyEffectTo(ByRef character As CharacterData, animator As TAnimCore)
        parameters:
        - id: character
          type: Febucci.UI.Core.CharacterData
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.SizeAppearance.ApplyEffectTo*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.SizeAppearance.SetModifier(Febucci.UI.ModifierInfo)
      commentId: M:Febucci.UI.Effects.SizeAppearance.SetModifier(Febucci.UI.ModifierInfo)
      language: CSharp
      name:
        CSharp: SetModifier(ModifierInfo)
        VB: SetModifier(ModifierInfo)
      nameWithType:
        CSharp: SizeAppearance.SetModifier(ModifierInfo)
        VB: SizeAppearance.SetModifier(ModifierInfo)
      qualifiedName:
        CSharp: Febucci.UI.Effects.SizeAppearance.SetModifier(Febucci.UI.ModifierInfo)
        VB: Febucci.UI.Effects.SizeAppearance.SetModifier(Febucci.UI.ModifierInfo)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: SetModifier
        path: ''
        startLine: 7275
      syntax:
        content:
          CSharp: public override void SetModifier(ModifierInfo modifier)
          VB: Public Overrides Sub SetModifier(modifier As ModifierInfo)
        parameters:
        - id: modifier
          type: Febucci.UI.ModifierInfo
      overload: Febucci.UI.Effects.SizeAppearance.SetModifier*
      overridden: Febucci.UI.Effects.AppearanceScriptableBase.SetModifier(Febucci.UI.ModifierInfo)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Effects.VerticalExpandAppearance
    commentId: T:Febucci.UI.Effects.VerticalExpandAppearance
    language: CSharp
    name:
      CSharp: VerticalExpandAppearance
      VB: VerticalExpandAppearance
    nameWithType:
      CSharp: VerticalExpandAppearance
      VB: VerticalExpandAppearance
    qualifiedName:
      CSharp: Febucci.UI.Effects.VerticalExpandAppearance
      VB: Febucci.UI.Effects.VerticalExpandAppearance
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: VerticalExpandAppearance
      path: ''
      startLine: 7291
    syntax:
      content:
        CSharp: 'public sealed class VerticalExpandAppearance : AppearanceScriptableBase'
        VB: >-
          Public NotInheritable Class VerticalExpandAppearance

              Inherits AppearanceScriptableBase
    inheritance:
    - System.Object
    - Febucci.UI.Effects.AnimationScriptableBase
    - Febucci.UI.Effects.AppearanceScriptableBase
    implements:
    - ITagProvider
    inheritedMembers:
    - Febucci.UI.Effects.AppearanceScriptableBase.baseDuration
    - Febucci.UI.Effects.AppearanceScriptableBase.duration
    - Febucci.UI.Effects.AppearanceScriptableBase.GetMaxDuration
    - Febucci.UI.Effects.AppearanceScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
    - Febucci.UI.Effects.AnimationScriptableBase.TagID
    - Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
    - Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
    - Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(CharacterData@,TAnimCore)
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Febucci.UI.Effects.VerticalExpandAppearance.startsFromBottom
      commentId: F:Febucci.UI.Effects.VerticalExpandAppearance.startsFromBottom
      language: CSharp
      name:
        CSharp: startsFromBottom
        VB: startsFromBottom
      nameWithType:
        CSharp: VerticalExpandAppearance.startsFromBottom
        VB: VerticalExpandAppearance.startsFromBottom
      qualifiedName:
        CSharp: Febucci.UI.Effects.VerticalExpandAppearance.startsFromBottom
        VB: Febucci.UI.Effects.VerticalExpandAppearance.startsFromBottom
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: startsFromBottom
        path: ''
        startLine: 7296
      syntax:
        content:
          CSharp: public bool startsFromBottom
          VB: Public startsFromBottom As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.VerticalExpandAppearance.ResetContext(TAnimCore)
      commentId: M:Febucci.UI.Effects.VerticalExpandAppearance.ResetContext(TAnimCore)
      language: CSharp
      name:
        CSharp: ResetContext(TAnimCore)
        VB: ResetContext(TAnimCore)
      nameWithType:
        CSharp: VerticalExpandAppearance.ResetContext(TAnimCore)
        VB: VerticalExpandAppearance.ResetContext(TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.VerticalExpandAppearance.ResetContext(TAnimCore)
        VB: Febucci.UI.Effects.VerticalExpandAppearance.ResetContext(TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ResetContext
        path: ''
        startLine: 7303
      syntax:
        content:
          CSharp: public override void ResetContext(TAnimCore animator)
          VB: Public Overrides Sub ResetContext(animator As TAnimCore)
        parameters:
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.VerticalExpandAppearance.ResetContext*
      overridden: Febucci.UI.Effects.AppearanceScriptableBase.ResetContext(TAnimCore)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.VerticalExpandAppearance.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      commentId: M:Febucci.UI.Effects.VerticalExpandAppearance.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      language: CSharp
      name:
        CSharp: ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: ApplyEffectTo(ByRef CharacterData, TAnimCore)
      nameWithType:
        CSharp: VerticalExpandAppearance.ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: VerticalExpandAppearance.ApplyEffectTo(ByRef CharacterData, TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.VerticalExpandAppearance.ApplyEffectTo(ref Febucci.UI.Core.CharacterData, TAnimCore)
        VB: Febucci.UI.Effects.VerticalExpandAppearance.ApplyEffectTo(ByRef Febucci.UI.Core.CharacterData, TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ApplyEffectTo
        path: ''
        startLine: 7335
      syntax:
        content:
          CSharp: public override void ApplyEffectTo(ref CharacterData character, TAnimCore animator)
          VB: Public Overrides Sub ApplyEffectTo(ByRef character As CharacterData, animator As TAnimCore)
        parameters:
        - id: character
          type: Febucci.UI.Core.CharacterData
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.VerticalExpandAppearance.ApplyEffectTo*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.VerticalExpandAppearance.SetModifier(Febucci.UI.ModifierInfo)
      commentId: M:Febucci.UI.Effects.VerticalExpandAppearance.SetModifier(Febucci.UI.ModifierInfo)
      language: CSharp
      name:
        CSharp: SetModifier(ModifierInfo)
        VB: SetModifier(ModifierInfo)
      nameWithType:
        CSharp: VerticalExpandAppearance.SetModifier(ModifierInfo)
        VB: VerticalExpandAppearance.SetModifier(ModifierInfo)
      qualifiedName:
        CSharp: Febucci.UI.Effects.VerticalExpandAppearance.SetModifier(Febucci.UI.ModifierInfo)
        VB: Febucci.UI.Effects.VerticalExpandAppearance.SetModifier(Febucci.UI.ModifierInfo)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: SetModifier
        path: ''
        startLine: 7343
      syntax:
        content:
          CSharp: public override void SetModifier(ModifierInfo modifier)
          VB: Public Overrides Sub SetModifier(modifier As ModifierInfo)
        parameters:
        - id: modifier
          type: Febucci.UI.ModifierInfo
      overload: Febucci.UI.Effects.VerticalExpandAppearance.SetModifier*
      overridden: Febucci.UI.Effects.AppearanceScriptableBase.SetModifier(Febucci.UI.ModifierInfo)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Effects.AppearanceScriptableBase
    commentId: T:Febucci.UI.Effects.AppearanceScriptableBase
    language: CSharp
    name:
      CSharp: AppearanceScriptableBase
      VB: AppearanceScriptableBase
    nameWithType:
      CSharp: AppearanceScriptableBase
      VB: AppearanceScriptableBase
    qualifiedName:
      CSharp: Febucci.UI.Effects.AppearanceScriptableBase
      VB: Febucci.UI.Effects.AppearanceScriptableBase
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: AppearanceScriptableBase
      path: ''
      startLine: 7361
    summary: "\nBase class for animating letters in Text Animator\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public abstract class AppearanceScriptableBase : AnimationScriptableBase
        VB: >-
          <Serializable>

          Public MustInherit Class AppearanceScriptableBase

              Inherits AnimationScriptableBase
    inheritance:
    - System.Object
    - Febucci.UI.Effects.AnimationScriptableBase
    implements:
    - ITagProvider
    inheritedMembers:
    - Febucci.UI.Effects.AnimationScriptableBase.TagID
    - Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
    - Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
    - Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(CharacterData@,TAnimCore)
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: Febucci.UI.Effects.AppearanceScriptableBase.baseDuration
      commentId: F:Febucci.UI.Effects.AppearanceScriptableBase.baseDuration
      language: CSharp
      name:
        CSharp: baseDuration
        VB: baseDuration
      nameWithType:
        CSharp: AppearanceScriptableBase.baseDuration
        VB: AppearanceScriptableBase.baseDuration
      qualifiedName:
        CSharp: Febucci.UI.Effects.AppearanceScriptableBase.baseDuration
        VB: Febucci.UI.Effects.AppearanceScriptableBase.baseDuration
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: baseDuration
        path: ''
        startLine: 7364
      syntax:
        content:
          CSharp: public float baseDuration
          VB: Public baseDuration As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.AppearanceScriptableBase.duration
      commentId: F:Febucci.UI.Effects.AppearanceScriptableBase.duration
      language: CSharp
      name:
        CSharp: duration
        VB: duration
      nameWithType:
        CSharp: AppearanceScriptableBase.duration
        VB: AppearanceScriptableBase.duration
      qualifiedName:
        CSharp: Febucci.UI.Effects.AppearanceScriptableBase.duration
        VB: Febucci.UI.Effects.AppearanceScriptableBase.duration
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: duration
        path: ''
        startLine: 7365
      syntax:
        content:
          CSharp: protected float duration
          VB: Protected duration As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: Febucci.UI.Effects.AppearanceScriptableBase.ResetContext(TAnimCore)
      commentId: M:Febucci.UI.Effects.AppearanceScriptableBase.ResetContext(TAnimCore)
      language: CSharp
      name:
        CSharp: ResetContext(TAnimCore)
        VB: ResetContext(TAnimCore)
      nameWithType:
        CSharp: AppearanceScriptableBase.ResetContext(TAnimCore)
        VB: AppearanceScriptableBase.ResetContext(TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.AppearanceScriptableBase.ResetContext(TAnimCore)
        VB: Febucci.UI.Effects.AppearanceScriptableBase.ResetContext(TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ResetContext
        path: ''
        startLine: 7367
      syntax:
        content:
          CSharp: public override void ResetContext(TAnimCore animator)
          VB: Public Overrides Sub ResetContext(animator As TAnimCore)
        parameters:
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.AppearanceScriptableBase.ResetContext*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.ResetContext(TAnimCore)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.AppearanceScriptableBase.GetMaxDuration
      commentId: M:Febucci.UI.Effects.AppearanceScriptableBase.GetMaxDuration
      language: CSharp
      name:
        CSharp: GetMaxDuration()
        VB: GetMaxDuration()
      nameWithType:
        CSharp: AppearanceScriptableBase.GetMaxDuration()
        VB: AppearanceScriptableBase.GetMaxDuration()
      qualifiedName:
        CSharp: Febucci.UI.Effects.AppearanceScriptableBase.GetMaxDuration()
        VB: Febucci.UI.Effects.AppearanceScriptableBase.GetMaxDuration()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: GetMaxDuration
        path: ''
        startLine: 7372
      syntax:
        content:
          CSharp: public override float GetMaxDuration()
          VB: Public Overrides Function GetMaxDuration As Single
        return:
          type: System.Single
      overload: Febucci.UI.Effects.AppearanceScriptableBase.GetMaxDuration*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.GetMaxDuration
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.AppearanceScriptableBase.SetModifier(Febucci.UI.ModifierInfo)
      commentId: M:Febucci.UI.Effects.AppearanceScriptableBase.SetModifier(Febucci.UI.ModifierInfo)
      language: CSharp
      name:
        CSharp: SetModifier(ModifierInfo)
        VB: SetModifier(ModifierInfo)
      nameWithType:
        CSharp: AppearanceScriptableBase.SetModifier(ModifierInfo)
        VB: AppearanceScriptableBase.SetModifier(ModifierInfo)
      qualifiedName:
        CSharp: Febucci.UI.Effects.AppearanceScriptableBase.SetModifier(Febucci.UI.ModifierInfo)
        VB: Febucci.UI.Effects.AppearanceScriptableBase.SetModifier(Febucci.UI.ModifierInfo)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: SetModifier
        path: ''
        startLine: 7373
      syntax:
        content:
          CSharp: public override void SetModifier(ModifierInfo modifier)
          VB: Public Overrides Sub SetModifier(modifier As ModifierInfo)
        parameters:
        - id: modifier
          type: Febucci.UI.ModifierInfo
      overload: Febucci.UI.Effects.AppearanceScriptableBase.SetModifier*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.SetModifier(Febucci.UI.ModifierInfo)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.AppearanceScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
      commentId: M:Febucci.UI.Effects.AppearanceScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
      language: CSharp
      name:
        CSharp: CanApplyEffectTo(CharacterData, TAnimCore)
        VB: CanApplyEffectTo(CharacterData, TAnimCore)
      nameWithType:
        CSharp: AppearanceScriptableBase.CanApplyEffectTo(CharacterData, TAnimCore)
        VB: AppearanceScriptableBase.CanApplyEffectTo(CharacterData, TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.AppearanceScriptableBase.CanApplyEffectTo(CharacterData, TAnimCore)
        VB: Febucci.UI.Effects.AppearanceScriptableBase.CanApplyEffectTo(CharacterData, TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: CanApplyEffectTo
        path: ''
        startLine: 7381
      syntax:
        content:
          CSharp: public override bool CanApplyEffectTo(CharacterData character, TAnimCore animator)
          VB: Public Overrides Function CanApplyEffectTo(character As CharacterData, animator As TAnimCore) As Boolean
        parameters:
        - id: character
          type: CharacterData
        - id: animator
          type: TAnimCore
        return:
          type: System.Boolean
      overload: Febucci.UI.Effects.AppearanceScriptableBase.CanApplyEffectTo*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Effects.BounceBehavior
    commentId: T:Febucci.UI.Effects.BounceBehavior
    language: CSharp
    name:
      CSharp: BounceBehavior
      VB: BounceBehavior
    nameWithType:
      CSharp: BounceBehavior
      VB: BounceBehavior
    qualifiedName:
      CSharp: Febucci.UI.Effects.BounceBehavior
      VB: Febucci.UI.Effects.BounceBehavior
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: BounceBehavior
      path: ''
      startLine: 7391
    syntax:
      content:
        CSharp: 'public sealed class BounceBehavior : BehaviorScriptableSine'
        VB: >-
          Public NotInheritable Class BounceBehavior

              Inherits BehaviorScriptableSine
    inheritance:
    - System.Object
    - Febucci.UI.Effects.AnimationScriptableBase
    - Febucci.UI.Effects.BehaviorScriptableBase
    - Febucci.UI.Effects.BehaviorScriptableSine
    implements:
    - ITagProvider
    inheritedMembers:
    - Febucci.UI.Effects.BehaviorScriptableSine.baseAmplitude
    - Febucci.UI.Effects.BehaviorScriptableSine.baseFrequency
    - Febucci.UI.Effects.BehaviorScriptableSine.baseWaveSize
    - Febucci.UI.Effects.BehaviorScriptableSine.amplitude
    - Febucci.UI.Effects.BehaviorScriptableSine.frequency
    - Febucci.UI.Effects.BehaviorScriptableSine.waveSize
    - Febucci.UI.Effects.BehaviorScriptableSine.ResetContext(TAnimCore)
    - Febucci.UI.Effects.BehaviorScriptableSine.SetModifier(Febucci.UI.ModifierInfo)
    - Febucci.UI.Effects.BehaviorScriptableBase.GetMaxDuration
    - Febucci.UI.Effects.BehaviorScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
    - Febucci.UI.Effects.AnimationScriptableBase.TagID
    - Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
    - Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
    - Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(CharacterData@,TAnimCore)
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Febucci.UI.Effects.BounceBehavior.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      commentId: M:Febucci.UI.Effects.BounceBehavior.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      language: CSharp
      name:
        CSharp: ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: ApplyEffectTo(ByRef CharacterData, TAnimCore)
      nameWithType:
        CSharp: BounceBehavior.ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: BounceBehavior.ApplyEffectTo(ByRef CharacterData, TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.BounceBehavior.ApplyEffectTo(ref Febucci.UI.Core.CharacterData, TAnimCore)
        VB: Febucci.UI.Effects.BounceBehavior.ApplyEffectTo(ByRef Febucci.UI.Core.CharacterData, TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ApplyEffectTo
        path: ''
        startLine: 7416
      syntax:
        content:
          CSharp: public override void ApplyEffectTo(ref CharacterData character, TAnimCore animator)
          VB: Public Overrides Sub ApplyEffectTo(ByRef character As CharacterData, animator As TAnimCore)
        parameters:
        - id: character
          type: Febucci.UI.Core.CharacterData
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.BounceBehavior.ApplyEffectTo*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Effects.DangleBehavior
    commentId: T:Febucci.UI.Effects.DangleBehavior
    language: CSharp
    name:
      CSharp: DangleBehavior
      VB: DangleBehavior
    nameWithType:
      CSharp: DangleBehavior
      VB: DangleBehavior
    qualifiedName:
      CSharp: Febucci.UI.Effects.DangleBehavior
      VB: Febucci.UI.Effects.DangleBehavior
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: DangleBehavior
      path: ''
      startLine: 7431
    syntax:
      content:
        CSharp: 'public sealed class DangleBehavior : BehaviorScriptableSine'
        VB: >-
          Public NotInheritable Class DangleBehavior

              Inherits BehaviorScriptableSine
    inheritance:
    - System.Object
    - Febucci.UI.Effects.AnimationScriptableBase
    - Febucci.UI.Effects.BehaviorScriptableBase
    - Febucci.UI.Effects.BehaviorScriptableSine
    implements:
    - ITagProvider
    inheritedMembers:
    - Febucci.UI.Effects.BehaviorScriptableSine.baseAmplitude
    - Febucci.UI.Effects.BehaviorScriptableSine.baseFrequency
    - Febucci.UI.Effects.BehaviorScriptableSine.baseWaveSize
    - Febucci.UI.Effects.BehaviorScriptableSine.amplitude
    - Febucci.UI.Effects.BehaviorScriptableSine.frequency
    - Febucci.UI.Effects.BehaviorScriptableSine.waveSize
    - Febucci.UI.Effects.BehaviorScriptableSine.SetModifier(Febucci.UI.ModifierInfo)
    - Febucci.UI.Effects.BehaviorScriptableBase.GetMaxDuration
    - Febucci.UI.Effects.BehaviorScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
    - Febucci.UI.Effects.AnimationScriptableBase.TagID
    - Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
    - Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
    - Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(CharacterData@,TAnimCore)
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Febucci.UI.Effects.DangleBehavior.anchorBottom
      commentId: F:Febucci.UI.Effects.DangleBehavior.anchorBottom
      language: CSharp
      name:
        CSharp: anchorBottom
        VB: anchorBottom
      nameWithType:
        CSharp: DangleBehavior.anchorBottom
        VB: DangleBehavior.anchorBottom
      qualifiedName:
        CSharp: Febucci.UI.Effects.DangleBehavior.anchorBottom
        VB: Febucci.UI.Effects.DangleBehavior.anchorBottom
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: anchorBottom
        path: ''
        startLine: 7439
      syntax:
        content:
          CSharp: public bool anchorBottom
          VB: Public anchorBottom As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.DangleBehavior.ResetContext(TAnimCore)
      commentId: M:Febucci.UI.Effects.DangleBehavior.ResetContext(TAnimCore)
      language: CSharp
      name:
        CSharp: ResetContext(TAnimCore)
        VB: ResetContext(TAnimCore)
      nameWithType:
        CSharp: DangleBehavior.ResetContext(TAnimCore)
        VB: DangleBehavior.ResetContext(TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.DangleBehavior.ResetContext(TAnimCore)
        VB: Febucci.UI.Effects.DangleBehavior.ResetContext(TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ResetContext
        path: ''
        startLine: 7445
      syntax:
        content:
          CSharp: public override void ResetContext(TAnimCore animator)
          VB: Public Overrides Sub ResetContext(animator As TAnimCore)
        parameters:
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.DangleBehavior.ResetContext*
      overridden: Febucci.UI.Effects.BehaviorScriptableSine.ResetContext(TAnimCore)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.DangleBehavior.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      commentId: M:Febucci.UI.Effects.DangleBehavior.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      language: CSharp
      name:
        CSharp: ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: ApplyEffectTo(ByRef CharacterData, TAnimCore)
      nameWithType:
        CSharp: DangleBehavior.ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: DangleBehavior.ApplyEffectTo(ByRef CharacterData, TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.DangleBehavior.ApplyEffectTo(ref Febucci.UI.Core.CharacterData, TAnimCore)
        VB: Febucci.UI.Effects.DangleBehavior.ApplyEffectTo(ByRef Febucci.UI.Core.CharacterData, TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ApplyEffectTo
        path: ''
        startLine: 7462
      syntax:
        content:
          CSharp: public override void ApplyEffectTo(ref CharacterData character, TAnimCore animator)
          VB: Public Overrides Sub ApplyEffectTo(ByRef character As CharacterData, animator As TAnimCore)
        parameters:
        - id: character
          type: Febucci.UI.Core.CharacterData
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.DangleBehavior.ApplyEffectTo*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Effects.FadeBehavior
    commentId: T:Febucci.UI.Effects.FadeBehavior
    language: CSharp
    name:
      CSharp: FadeBehavior
      VB: FadeBehavior
    nameWithType:
      CSharp: FadeBehavior
      VB: FadeBehavior
    qualifiedName:
      CSharp: Febucci.UI.Effects.FadeBehavior
      VB: Febucci.UI.Effects.FadeBehavior
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: FadeBehavior
      path: ''
      startLine: 7478
    syntax:
      content:
        CSharp: 'public sealed class FadeBehavior : BehaviorScriptableBase'
        VB: >-
          Public NotInheritable Class FadeBehavior

              Inherits BehaviorScriptableBase
    inheritance:
    - System.Object
    - Febucci.UI.Effects.AnimationScriptableBase
    - Febucci.UI.Effects.BehaviorScriptableBase
    implements:
    - ITagProvider
    inheritedMembers:
    - Febucci.UI.Effects.BehaviorScriptableBase.GetMaxDuration
    - Febucci.UI.Effects.BehaviorScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
    - Febucci.UI.Effects.AnimationScriptableBase.TagID
    - Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
    - Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
    - Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(CharacterData@,TAnimCore)
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Febucci.UI.Effects.FadeBehavior.baseSpeed
      commentId: F:Febucci.UI.Effects.FadeBehavior.baseSpeed
      language: CSharp
      name:
        CSharp: baseSpeed
        VB: baseSpeed
      nameWithType:
        CSharp: FadeBehavior.baseSpeed
        VB: FadeBehavior.baseSpeed
      qualifiedName:
        CSharp: Febucci.UI.Effects.FadeBehavior.baseSpeed
        VB: Febucci.UI.Effects.FadeBehavior.baseSpeed
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: baseSpeed
        path: ''
        startLine: 7484
      syntax:
        content:
          CSharp: public float baseSpeed
          VB: Public baseSpeed As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.FadeBehavior.baseDelay
      commentId: F:Febucci.UI.Effects.FadeBehavior.baseDelay
      language: CSharp
      name:
        CSharp: baseDelay
        VB: baseDelay
      nameWithType:
        CSharp: FadeBehavior.baseDelay
        VB: FadeBehavior.baseDelay
      qualifiedName:
        CSharp: Febucci.UI.Effects.FadeBehavior.baseDelay
        VB: Febucci.UI.Effects.FadeBehavior.baseDelay
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: baseDelay
        path: ''
        startLine: 7485
      syntax:
        content:
          CSharp: public float baseDelay
          VB: Public baseDelay As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.FadeBehavior.ResetContext(TAnimCore)
      commentId: M:Febucci.UI.Effects.FadeBehavior.ResetContext(TAnimCore)
      language: CSharp
      name:
        CSharp: ResetContext(TAnimCore)
        VB: ResetContext(TAnimCore)
      nameWithType:
        CSharp: FadeBehavior.ResetContext(TAnimCore)
        VB: FadeBehavior.ResetContext(TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.FadeBehavior.ResetContext(TAnimCore)
        VB: Febucci.UI.Effects.FadeBehavior.ResetContext(TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ResetContext
        path: ''
        startLine: 7489
      syntax:
        content:
          CSharp: public override void ResetContext(TAnimCore animator)
          VB: Public Overrides Sub ResetContext(animator As TAnimCore)
        parameters:
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.FadeBehavior.ResetContext*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.ResetContext(TAnimCore)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.FadeBehavior.SetModifier(Febucci.UI.ModifierInfo)
      commentId: M:Febucci.UI.Effects.FadeBehavior.SetModifier(Febucci.UI.ModifierInfo)
      language: CSharp
      name:
        CSharp: SetModifier(ModifierInfo)
        VB: SetModifier(ModifierInfo)
      nameWithType:
        CSharp: FadeBehavior.SetModifier(ModifierInfo)
        VB: FadeBehavior.SetModifier(ModifierInfo)
      qualifiedName:
        CSharp: Febucci.UI.Effects.FadeBehavior.SetModifier(Febucci.UI.ModifierInfo)
        VB: Febucci.UI.Effects.FadeBehavior.SetModifier(Febucci.UI.ModifierInfo)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: SetModifier
        path: ''
        startLine: 7498
      syntax:
        content:
          CSharp: public override void SetModifier(ModifierInfo modifier)
          VB: Public Overrides Sub SetModifier(modifier As ModifierInfo)
        parameters:
        - id: modifier
          type: Febucci.UI.ModifierInfo
      overload: Febucci.UI.Effects.FadeBehavior.SetModifier*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.SetModifier(Febucci.UI.ModifierInfo)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.FadeBehavior.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      commentId: M:Febucci.UI.Effects.FadeBehavior.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      language: CSharp
      name:
        CSharp: ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: ApplyEffectTo(ByRef CharacterData, TAnimCore)
      nameWithType:
        CSharp: FadeBehavior.ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: FadeBehavior.ApplyEffectTo(ByRef CharacterData, TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.FadeBehavior.ApplyEffectTo(ref Febucci.UI.Core.CharacterData, TAnimCore)
        VB: Febucci.UI.Effects.FadeBehavior.ApplyEffectTo(ByRef Febucci.UI.Core.CharacterData, TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ApplyEffectTo
        path: ''
        startLine: 7509
      syntax:
        content:
          CSharp: public override void ApplyEffectTo(ref CharacterData character, TAnimCore animator)
          VB: Public Overrides Sub ApplyEffectTo(ByRef character As CharacterData, animator As TAnimCore)
        parameters:
        - id: character
          type: Febucci.UI.Core.CharacterData
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.FadeBehavior.ApplyEffectTo*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Effects.PendulumBehavior
    commentId: T:Febucci.UI.Effects.PendulumBehavior
    language: CSharp
    name:
      CSharp: PendulumBehavior
      VB: PendulumBehavior
    nameWithType:
      CSharp: PendulumBehavior
      VB: PendulumBehavior
    qualifiedName:
      CSharp: Febucci.UI.Effects.PendulumBehavior
      VB: Febucci.UI.Effects.PendulumBehavior
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: PendulumBehavior
      path: ''
      startLine: 7547
    syntax:
      content:
        CSharp: 'public sealed class PendulumBehavior : BehaviorScriptableSine'
        VB: >-
          Public NotInheritable Class PendulumBehavior

              Inherits BehaviorScriptableSine
    inheritance:
    - System.Object
    - Febucci.UI.Effects.AnimationScriptableBase
    - Febucci.UI.Effects.BehaviorScriptableBase
    - Febucci.UI.Effects.BehaviorScriptableSine
    implements:
    - ITagProvider
    inheritedMembers:
    - Febucci.UI.Effects.BehaviorScriptableSine.baseAmplitude
    - Febucci.UI.Effects.BehaviorScriptableSine.baseFrequency
    - Febucci.UI.Effects.BehaviorScriptableSine.baseWaveSize
    - Febucci.UI.Effects.BehaviorScriptableSine.amplitude
    - Febucci.UI.Effects.BehaviorScriptableSine.frequency
    - Febucci.UI.Effects.BehaviorScriptableSine.waveSize
    - Febucci.UI.Effects.BehaviorScriptableSine.SetModifier(Febucci.UI.ModifierInfo)
    - Febucci.UI.Effects.BehaviorScriptableBase.GetMaxDuration
    - Febucci.UI.Effects.BehaviorScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
    - Febucci.UI.Effects.AnimationScriptableBase.TagID
    - Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
    - Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
    - Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(CharacterData@,TAnimCore)
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Febucci.UI.Effects.PendulumBehavior.anchorBottom
      commentId: F:Febucci.UI.Effects.PendulumBehavior.anchorBottom
      language: CSharp
      name:
        CSharp: anchorBottom
        VB: anchorBottom
      nameWithType:
        CSharp: PendulumBehavior.anchorBottom
        VB: PendulumBehavior.anchorBottom
      qualifiedName:
        CSharp: Febucci.UI.Effects.PendulumBehavior.anchorBottom
        VB: Febucci.UI.Effects.PendulumBehavior.anchorBottom
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: anchorBottom
        path: ''
        startLine: 7555
      syntax:
        content:
          CSharp: public bool anchorBottom
          VB: Public anchorBottom As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.PendulumBehavior.ResetContext(TAnimCore)
      commentId: M:Febucci.UI.Effects.PendulumBehavior.ResetContext(TAnimCore)
      language: CSharp
      name:
        CSharp: ResetContext(TAnimCore)
        VB: ResetContext(TAnimCore)
      nameWithType:
        CSharp: PendulumBehavior.ResetContext(TAnimCore)
        VB: PendulumBehavior.ResetContext(TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.PendulumBehavior.ResetContext(TAnimCore)
        VB: Febucci.UI.Effects.PendulumBehavior.ResetContext(TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ResetContext
        path: ''
        startLine: 7560
      syntax:
        content:
          CSharp: public override void ResetContext(TAnimCore animator)
          VB: Public Overrides Sub ResetContext(animator As TAnimCore)
        parameters:
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.PendulumBehavior.ResetContext*
      overridden: Febucci.UI.Effects.BehaviorScriptableSine.ResetContext(TAnimCore)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.PendulumBehavior.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      commentId: M:Febucci.UI.Effects.PendulumBehavior.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      language: CSharp
      name:
        CSharp: ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: ApplyEffectTo(ByRef CharacterData, TAnimCore)
      nameWithType:
        CSharp: PendulumBehavior.ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: PendulumBehavior.ApplyEffectTo(ByRef CharacterData, TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.PendulumBehavior.ApplyEffectTo(ref Febucci.UI.Core.CharacterData, TAnimCore)
        VB: Febucci.UI.Effects.PendulumBehavior.ApplyEffectTo(ByRef Febucci.UI.Core.CharacterData, TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ApplyEffectTo
        path: ''
        startLine: 7578
      syntax:
        content:
          CSharp: public override void ApplyEffectTo(ref CharacterData character, TAnimCore animator)
          VB: Public Overrides Sub ApplyEffectTo(ByRef character As CharacterData, animator As TAnimCore)
        parameters:
        - id: character
          type: Febucci.UI.Core.CharacterData
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.PendulumBehavior.ApplyEffectTo*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Effects.RainbowBehavior
    commentId: T:Febucci.UI.Effects.RainbowBehavior
    language: CSharp
    name:
      CSharp: RainbowBehavior
      VB: RainbowBehavior
    nameWithType:
      CSharp: RainbowBehavior
      VB: RainbowBehavior
    qualifiedName:
      CSharp: Febucci.UI.Effects.RainbowBehavior
      VB: Febucci.UI.Effects.RainbowBehavior
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: RainbowBehavior
      path: ''
      startLine: 7593
    syntax:
      content:
        CSharp: 'public sealed class RainbowBehavior : BehaviorScriptableBase'
        VB: >-
          Public NotInheritable Class RainbowBehavior

              Inherits BehaviorScriptableBase
    inheritance:
    - System.Object
    - Febucci.UI.Effects.AnimationScriptableBase
    - Febucci.UI.Effects.BehaviorScriptableBase
    implements:
    - ITagProvider
    inheritedMembers:
    - Febucci.UI.Effects.BehaviorScriptableBase.GetMaxDuration
    - Febucci.UI.Effects.BehaviorScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
    - Febucci.UI.Effects.AnimationScriptableBase.TagID
    - Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
    - Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
    - Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(CharacterData@,TAnimCore)
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Febucci.UI.Effects.RainbowBehavior.baseFrequency
      commentId: F:Febucci.UI.Effects.RainbowBehavior.baseFrequency
      language: CSharp
      name:
        CSharp: baseFrequency
        VB: baseFrequency
      nameWithType:
        CSharp: RainbowBehavior.baseFrequency
        VB: RainbowBehavior.baseFrequency
      qualifiedName:
        CSharp: Febucci.UI.Effects.RainbowBehavior.baseFrequency
        VB: Febucci.UI.Effects.RainbowBehavior.baseFrequency
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: baseFrequency
        path: ''
        startLine: 7598
      syntax:
        content:
          CSharp: public float baseFrequency
          VB: Public baseFrequency As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.RainbowBehavior.baseWaveSize
      commentId: F:Febucci.UI.Effects.RainbowBehavior.baseWaveSize
      language: CSharp
      name:
        CSharp: baseWaveSize
        VB: baseWaveSize
      nameWithType:
        CSharp: RainbowBehavior.baseWaveSize
        VB: RainbowBehavior.baseWaveSize
      qualifiedName:
        CSharp: Febucci.UI.Effects.RainbowBehavior.baseWaveSize
        VB: Febucci.UI.Effects.RainbowBehavior.baseWaveSize
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: baseWaveSize
        path: ''
        startLine: 7599
      syntax:
        content:
          CSharp: public float baseWaveSize
          VB: Public baseWaveSize As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.RainbowBehavior.SetModifier(Febucci.UI.ModifierInfo)
      commentId: M:Febucci.UI.Effects.RainbowBehavior.SetModifier(Febucci.UI.ModifierInfo)
      language: CSharp
      name:
        CSharp: SetModifier(ModifierInfo)
        VB: SetModifier(ModifierInfo)
      nameWithType:
        CSharp: RainbowBehavior.SetModifier(ModifierInfo)
        VB: RainbowBehavior.SetModifier(ModifierInfo)
      qualifiedName:
        CSharp: Febucci.UI.Effects.RainbowBehavior.SetModifier(Febucci.UI.ModifierInfo)
        VB: Febucci.UI.Effects.RainbowBehavior.SetModifier(Febucci.UI.ModifierInfo)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: SetModifier
        path: ''
        startLine: 7604
      syntax:
        content:
          CSharp: public override void SetModifier(ModifierInfo modifier)
          VB: Public Overrides Sub SetModifier(modifier As ModifierInfo)
        parameters:
        - id: modifier
          type: Febucci.UI.ModifierInfo
      overload: Febucci.UI.Effects.RainbowBehavior.SetModifier*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.SetModifier(Febucci.UI.ModifierInfo)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.RainbowBehavior.ResetContext(TAnimCore)
      commentId: M:Febucci.UI.Effects.RainbowBehavior.ResetContext(TAnimCore)
      language: CSharp
      name:
        CSharp: ResetContext(TAnimCore)
        VB: ResetContext(TAnimCore)
      nameWithType:
        CSharp: RainbowBehavior.ResetContext(TAnimCore)
        VB: RainbowBehavior.ResetContext(TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.RainbowBehavior.ResetContext(TAnimCore)
        VB: Febucci.UI.Effects.RainbowBehavior.ResetContext(TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ResetContext
        path: ''
        startLine: 7615
      syntax:
        content:
          CSharp: public override void ResetContext(TAnimCore animator)
          VB: Public Overrides Sub ResetContext(animator As TAnimCore)
        parameters:
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.RainbowBehavior.ResetContext*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.ResetContext(TAnimCore)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.RainbowBehavior.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      commentId: M:Febucci.UI.Effects.RainbowBehavior.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      language: CSharp
      name:
        CSharp: ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: ApplyEffectTo(ByRef CharacterData, TAnimCore)
      nameWithType:
        CSharp: RainbowBehavior.ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: RainbowBehavior.ApplyEffectTo(ByRef CharacterData, TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.RainbowBehavior.ApplyEffectTo(ref Febucci.UI.Core.CharacterData, TAnimCore)
        VB: Febucci.UI.Effects.RainbowBehavior.ApplyEffectTo(ByRef Febucci.UI.Core.CharacterData, TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ApplyEffectTo
        path: ''
        startLine: 7622
      syntax:
        content:
          CSharp: public override void ApplyEffectTo(ref CharacterData character, TAnimCore animator)
          VB: Public Overrides Sub ApplyEffectTo(ByRef character As CharacterData, animator As TAnimCore)
        parameters:
        - id: character
          type: Febucci.UI.Core.CharacterData
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.RainbowBehavior.ApplyEffectTo*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Effects.RotationBehavior
    commentId: T:Febucci.UI.Effects.RotationBehavior
    language: CSharp
    name:
      CSharp: RotationBehavior
      VB: RotationBehavior
    nameWithType:
      CSharp: RotationBehavior
      VB: RotationBehavior
    qualifiedName:
      CSharp: Febucci.UI.Effects.RotationBehavior
      VB: Febucci.UI.Effects.RotationBehavior
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: RotationBehavior
      path: ''
      startLine: 7639
    syntax:
      content:
        CSharp: 'public sealed class RotationBehavior : BehaviorScriptableBase'
        VB: >-
          Public NotInheritable Class RotationBehavior

              Inherits BehaviorScriptableBase
    inheritance:
    - System.Object
    - Febucci.UI.Effects.AnimationScriptableBase
    - Febucci.UI.Effects.BehaviorScriptableBase
    implements:
    - ITagProvider
    inheritedMembers:
    - Febucci.UI.Effects.BehaviorScriptableBase.GetMaxDuration
    - Febucci.UI.Effects.BehaviorScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
    - Febucci.UI.Effects.AnimationScriptableBase.TagID
    - Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
    - Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
    - Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(CharacterData@,TAnimCore)
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Febucci.UI.Effects.RotationBehavior.baseRotSpeed
      commentId: F:Febucci.UI.Effects.RotationBehavior.baseRotSpeed
      language: CSharp
      name:
        CSharp: baseRotSpeed
        VB: baseRotSpeed
      nameWithType:
        CSharp: RotationBehavior.baseRotSpeed
        VB: RotationBehavior.baseRotSpeed
      qualifiedName:
        CSharp: Febucci.UI.Effects.RotationBehavior.baseRotSpeed
        VB: Febucci.UI.Effects.RotationBehavior.baseRotSpeed
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: baseRotSpeed
        path: ''
        startLine: 7645
      syntax:
        content:
          CSharp: public float baseRotSpeed
          VB: Public baseRotSpeed As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.RotationBehavior.baseDiffBetweenChars
      commentId: F:Febucci.UI.Effects.RotationBehavior.baseDiffBetweenChars
      language: CSharp
      name:
        CSharp: baseDiffBetweenChars
        VB: baseDiffBetweenChars
      nameWithType:
        CSharp: RotationBehavior.baseDiffBetweenChars
        VB: RotationBehavior.baseDiffBetweenChars
      qualifiedName:
        CSharp: Febucci.UI.Effects.RotationBehavior.baseDiffBetweenChars
        VB: Febucci.UI.Effects.RotationBehavior.baseDiffBetweenChars
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: baseDiffBetweenChars
        path: ''
        startLine: 7646
      syntax:
        content:
          CSharp: public float baseDiffBetweenChars
          VB: Public baseDiffBetweenChars As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.RotationBehavior.SetModifier(Febucci.UI.ModifierInfo)
      commentId: M:Febucci.UI.Effects.RotationBehavior.SetModifier(Febucci.UI.ModifierInfo)
      language: CSharp
      name:
        CSharp: SetModifier(ModifierInfo)
        VB: SetModifier(ModifierInfo)
      nameWithType:
        CSharp: RotationBehavior.SetModifier(ModifierInfo)
        VB: RotationBehavior.SetModifier(ModifierInfo)
      qualifiedName:
        CSharp: Febucci.UI.Effects.RotationBehavior.SetModifier(Febucci.UI.ModifierInfo)
        VB: Febucci.UI.Effects.RotationBehavior.SetModifier(Febucci.UI.ModifierInfo)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: SetModifier
        path: ''
        startLine: 7651
      syntax:
        content:
          CSharp: public override void SetModifier(ModifierInfo modifier)
          VB: Public Overrides Sub SetModifier(modifier As ModifierInfo)
        parameters:
        - id: modifier
          type: Febucci.UI.ModifierInfo
      overload: Febucci.UI.Effects.RotationBehavior.SetModifier*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.SetModifier(Febucci.UI.ModifierInfo)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.RotationBehavior.ResetContext(TAnimCore)
      commentId: M:Febucci.UI.Effects.RotationBehavior.ResetContext(TAnimCore)
      language: CSharp
      name:
        CSharp: ResetContext(TAnimCore)
        VB: ResetContext(TAnimCore)
      nameWithType:
        CSharp: RotationBehavior.ResetContext(TAnimCore)
        VB: RotationBehavior.ResetContext(TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.RotationBehavior.ResetContext(TAnimCore)
        VB: Febucci.UI.Effects.RotationBehavior.ResetContext(TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ResetContext
        path: ''
        startLine: 7662
      syntax:
        content:
          CSharp: public override void ResetContext(TAnimCore animator)
          VB: Public Overrides Sub ResetContext(animator As TAnimCore)
        parameters:
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.RotationBehavior.ResetContext*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.ResetContext(TAnimCore)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.RotationBehavior.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      commentId: M:Febucci.UI.Effects.RotationBehavior.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      language: CSharp
      name:
        CSharp: ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: ApplyEffectTo(ByRef CharacterData, TAnimCore)
      nameWithType:
        CSharp: RotationBehavior.ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: RotationBehavior.ApplyEffectTo(ByRef CharacterData, TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.RotationBehavior.ApplyEffectTo(ref Febucci.UI.Core.CharacterData, TAnimCore)
        VB: Febucci.UI.Effects.RotationBehavior.ApplyEffectTo(ByRef Febucci.UI.Core.CharacterData, TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ApplyEffectTo
        path: ''
        startLine: 7668
      syntax:
        content:
          CSharp: public override void ApplyEffectTo(ref CharacterData character, TAnimCore animator)
          VB: Public Overrides Sub ApplyEffectTo(ByRef character As CharacterData, animator As TAnimCore)
        parameters:
        - id: character
          type: Febucci.UI.Core.CharacterData
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.RotationBehavior.ApplyEffectTo*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Effects.ShakeBehavior
    commentId: T:Febucci.UI.Effects.ShakeBehavior
    language: CSharp
    name:
      CSharp: ShakeBehavior
      VB: ShakeBehavior
    nameWithType:
      CSharp: ShakeBehavior
      VB: ShakeBehavior
    qualifiedName:
      CSharp: Febucci.UI.Effects.ShakeBehavior
      VB: Febucci.UI.Effects.ShakeBehavior
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: ShakeBehavior
      path: ''
      startLine: 7681
    syntax:
      content:
        CSharp: 'public sealed class ShakeBehavior : BehaviorScriptableBase'
        VB: >-
          Public NotInheritable Class ShakeBehavior

              Inherits BehaviorScriptableBase
    inheritance:
    - System.Object
    - Febucci.UI.Effects.AnimationScriptableBase
    - Febucci.UI.Effects.BehaviorScriptableBase
    implements:
    - ITagProvider
    inheritedMembers:
    - Febucci.UI.Effects.BehaviorScriptableBase.GetMaxDuration
    - Febucci.UI.Effects.BehaviorScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
    - Febucci.UI.Effects.AnimationScriptableBase.TagID
    - Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
    - Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(CharacterData@,TAnimCore)
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Febucci.UI.Effects.ShakeBehavior.baseAmplitude
      commentId: F:Febucci.UI.Effects.ShakeBehavior.baseAmplitude
      language: CSharp
      name:
        CSharp: baseAmplitude
        VB: baseAmplitude
      nameWithType:
        CSharp: ShakeBehavior.baseAmplitude
        VB: ShakeBehavior.baseAmplitude
      qualifiedName:
        CSharp: Febucci.UI.Effects.ShakeBehavior.baseAmplitude
        VB: Febucci.UI.Effects.ShakeBehavior.baseAmplitude
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: baseAmplitude
        path: ''
        startLine: 7690
      syntax:
        content:
          CSharp: public float baseAmplitude
          VB: Public baseAmplitude As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.ShakeBehavior.baseDelay
      commentId: F:Febucci.UI.Effects.ShakeBehavior.baseDelay
      language: CSharp
      name:
        CSharp: baseDelay
        VB: baseDelay
      nameWithType:
        CSharp: ShakeBehavior.baseDelay
        VB: ShakeBehavior.baseDelay
      qualifiedName:
        CSharp: Febucci.UI.Effects.ShakeBehavior.baseDelay
        VB: Febucci.UI.Effects.ShakeBehavior.baseDelay
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: baseDelay
        path: ''
        startLine: 7691
      syntax:
        content:
          CSharp: public float baseDelay
          VB: Public baseDelay As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.ShakeBehavior.baseWaveSize
      commentId: F:Febucci.UI.Effects.ShakeBehavior.baseWaveSize
      language: CSharp
      name:
        CSharp: baseWaveSize
        VB: baseWaveSize
      nameWithType:
        CSharp: ShakeBehavior.baseWaveSize
        VB: ShakeBehavior.baseWaveSize
      qualifiedName:
        CSharp: Febucci.UI.Effects.ShakeBehavior.baseWaveSize
        VB: Febucci.UI.Effects.ShakeBehavior.baseWaveSize
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: baseWaveSize
        path: ''
        startLine: 7692
      syntax:
        content:
          CSharp: public float baseWaveSize
          VB: Public baseWaveSize As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.ShakeBehavior.OnInitialize
      commentId: M:Febucci.UI.Effects.ShakeBehavior.OnInitialize
      language: CSharp
      name:
        CSharp: OnInitialize()
        VB: OnInitialize()
      nameWithType:
        CSharp: ShakeBehavior.OnInitialize()
        VB: ShakeBehavior.OnInitialize()
      qualifiedName:
        CSharp: Febucci.UI.Effects.ShakeBehavior.OnInitialize()
        VB: Febucci.UI.Effects.ShakeBehavior.OnInitialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: OnInitialize
        path: ''
        startLine: 7705
      syntax:
        content:
          CSharp: protected override void OnInitialize()
          VB: Protected Overrides Sub OnInitialize
      overload: Febucci.UI.Effects.ShakeBehavior.OnInitialize*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: Febucci.UI.Effects.ShakeBehavior.ResetContext(TAnimCore)
      commentId: M:Febucci.UI.Effects.ShakeBehavior.ResetContext(TAnimCore)
      language: CSharp
      name:
        CSharp: ResetContext(TAnimCore)
        VB: ResetContext(TAnimCore)
      nameWithType:
        CSharp: ShakeBehavior.ResetContext(TAnimCore)
        VB: ShakeBehavior.ResetContext(TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.ShakeBehavior.ResetContext(TAnimCore)
        VB: Febucci.UI.Effects.ShakeBehavior.ResetContext(TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ResetContext
        path: ''
        startLine: 7712
      syntax:
        content:
          CSharp: public override void ResetContext(TAnimCore animator)
          VB: Public Overrides Sub ResetContext(animator As TAnimCore)
        parameters:
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.ShakeBehavior.ResetContext*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.ResetContext(TAnimCore)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.ShakeBehavior.SetModifier(Febucci.UI.ModifierInfo)
      commentId: M:Febucci.UI.Effects.ShakeBehavior.SetModifier(Febucci.UI.ModifierInfo)
      language: CSharp
      name:
        CSharp: SetModifier(ModifierInfo)
        VB: SetModifier(ModifierInfo)
      nameWithType:
        CSharp: ShakeBehavior.SetModifier(ModifierInfo)
        VB: ShakeBehavior.SetModifier(ModifierInfo)
      qualifiedName:
        CSharp: Febucci.UI.Effects.ShakeBehavior.SetModifier(Febucci.UI.ModifierInfo)
        VB: Febucci.UI.Effects.ShakeBehavior.SetModifier(Febucci.UI.ModifierInfo)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: SetModifier
        path: ''
        startLine: 7721
      syntax:
        content:
          CSharp: public override void SetModifier(ModifierInfo modifier)
          VB: Public Overrides Sub SetModifier(modifier As ModifierInfo)
        parameters:
        - id: modifier
          type: Febucci.UI.ModifierInfo
      overload: Febucci.UI.Effects.ShakeBehavior.SetModifier*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.SetModifier(Febucci.UI.ModifierInfo)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.ShakeBehavior.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      commentId: M:Febucci.UI.Effects.ShakeBehavior.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      language: CSharp
      name:
        CSharp: ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: ApplyEffectTo(ByRef CharacterData, TAnimCore)
      nameWithType:
        CSharp: ShakeBehavior.ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: ShakeBehavior.ApplyEffectTo(ByRef CharacterData, TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.ShakeBehavior.ApplyEffectTo(ref Febucci.UI.Core.CharacterData, TAnimCore)
        VB: Febucci.UI.Effects.ShakeBehavior.ApplyEffectTo(ByRef Febucci.UI.Core.CharacterData, TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ApplyEffectTo
        path: ''
        startLine: 7735
      syntax:
        content:
          CSharp: public override void ApplyEffectTo(ref CharacterData character, TAnimCore animator)
          VB: Public Overrides Sub ApplyEffectTo(ByRef character As CharacterData, animator As TAnimCore)
        parameters:
        - id: character
          type: Febucci.UI.Core.CharacterData
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.ShakeBehavior.ApplyEffectTo*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Effects.SizeBehavior
    commentId: T:Febucci.UI.Effects.SizeBehavior
    language: CSharp
    name:
      CSharp: SizeBehavior
      VB: SizeBehavior
    nameWithType:
      CSharp: SizeBehavior
      VB: SizeBehavior
    qualifiedName:
      CSharp: Febucci.UI.Effects.SizeBehavior
      VB: Febucci.UI.Effects.SizeBehavior
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: SizeBehavior
      path: ''
      startLine: 7760
    syntax:
      content:
        CSharp: 'public sealed class SizeBehavior : BehaviorScriptableBase'
        VB: >-
          Public NotInheritable Class SizeBehavior

              Inherits BehaviorScriptableBase
    inheritance:
    - System.Object
    - Febucci.UI.Effects.AnimationScriptableBase
    - Febucci.UI.Effects.BehaviorScriptableBase
    implements:
    - ITagProvider
    inheritedMembers:
    - Febucci.UI.Effects.BehaviorScriptableBase.GetMaxDuration
    - Febucci.UI.Effects.BehaviorScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
    - Febucci.UI.Effects.AnimationScriptableBase.TagID
    - Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
    - Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
    - Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(CharacterData@,TAnimCore)
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Febucci.UI.Effects.SizeBehavior.baseAmplitude
      commentId: F:Febucci.UI.Effects.SizeBehavior.baseAmplitude
      language: CSharp
      name:
        CSharp: baseAmplitude
        VB: baseAmplitude
      nameWithType:
        CSharp: SizeBehavior.baseAmplitude
        VB: SizeBehavior.baseAmplitude
      qualifiedName:
        CSharp: Febucci.UI.Effects.SizeBehavior.baseAmplitude
        VB: Febucci.UI.Effects.SizeBehavior.baseAmplitude
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: baseAmplitude
        path: ''
        startLine: 7765
      syntax:
        content:
          CSharp: public float baseAmplitude
          VB: Public baseAmplitude As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.SizeBehavior.baseFrequency
      commentId: F:Febucci.UI.Effects.SizeBehavior.baseFrequency
      language: CSharp
      name:
        CSharp: baseFrequency
        VB: baseFrequency
      nameWithType:
        CSharp: SizeBehavior.baseFrequency
        VB: SizeBehavior.baseFrequency
      qualifiedName:
        CSharp: Febucci.UI.Effects.SizeBehavior.baseFrequency
        VB: Febucci.UI.Effects.SizeBehavior.baseFrequency
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: baseFrequency
        path: ''
        startLine: 7766
      syntax:
        content:
          CSharp: public float baseFrequency
          VB: Public baseFrequency As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.SizeBehavior.baseWaveSize
      commentId: F:Febucci.UI.Effects.SizeBehavior.baseWaveSize
      language: CSharp
      name:
        CSharp: baseWaveSize
        VB: baseWaveSize
      nameWithType:
        CSharp: SizeBehavior.baseWaveSize
        VB: SizeBehavior.baseWaveSize
      qualifiedName:
        CSharp: Febucci.UI.Effects.SizeBehavior.baseWaveSize
        VB: Febucci.UI.Effects.SizeBehavior.baseWaveSize
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: baseWaveSize
        path: ''
        startLine: 7767
      syntax:
        content:
          CSharp: public float baseWaveSize
          VB: Public baseWaveSize As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.SizeBehavior.ResetContext(TAnimCore)
      commentId: M:Febucci.UI.Effects.SizeBehavior.ResetContext(TAnimCore)
      language: CSharp
      name:
        CSharp: ResetContext(TAnimCore)
        VB: ResetContext(TAnimCore)
      nameWithType:
        CSharp: SizeBehavior.ResetContext(TAnimCore)
        VB: SizeBehavior.ResetContext(TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.SizeBehavior.ResetContext(TAnimCore)
        VB: Febucci.UI.Effects.SizeBehavior.ResetContext(TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ResetContext
        path: ''
        startLine: 7772
      syntax:
        content:
          CSharp: public override void ResetContext(TAnimCore animator)
          VB: Public Overrides Sub ResetContext(animator As TAnimCore)
        parameters:
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.SizeBehavior.ResetContext*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.ResetContext(TAnimCore)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.SizeBehavior.SetModifier(Febucci.UI.ModifierInfo)
      commentId: M:Febucci.UI.Effects.SizeBehavior.SetModifier(Febucci.UI.ModifierInfo)
      language: CSharp
      name:
        CSharp: SetModifier(ModifierInfo)
        VB: SetModifier(ModifierInfo)
      nameWithType:
        CSharp: SizeBehavior.SetModifier(ModifierInfo)
        VB: SizeBehavior.SetModifier(ModifierInfo)
      qualifiedName:
        CSharp: Febucci.UI.Effects.SizeBehavior.SetModifier(Febucci.UI.ModifierInfo)
        VB: Febucci.UI.Effects.SizeBehavior.SetModifier(Febucci.UI.ModifierInfo)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: SetModifier
        path: ''
        startLine: 7779
      syntax:
        content:
          CSharp: public override void SetModifier(ModifierInfo modifier)
          VB: Public Overrides Sub SetModifier(modifier As ModifierInfo)
        parameters:
        - id: modifier
          type: Febucci.UI.ModifierInfo
      overload: Febucci.UI.Effects.SizeBehavior.SetModifier*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.SetModifier(Febucci.UI.ModifierInfo)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.SizeBehavior.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      commentId: M:Febucci.UI.Effects.SizeBehavior.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      language: CSharp
      name:
        CSharp: ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: ApplyEffectTo(ByRef CharacterData, TAnimCore)
      nameWithType:
        CSharp: SizeBehavior.ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: SizeBehavior.ApplyEffectTo(ByRef CharacterData, TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.SizeBehavior.ApplyEffectTo(ref Febucci.UI.Core.CharacterData, TAnimCore)
        VB: Febucci.UI.Effects.SizeBehavior.ApplyEffectTo(ByRef Febucci.UI.Core.CharacterData, TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ApplyEffectTo
        path: ''
        startLine: 7789
      syntax:
        content:
          CSharp: public override void ApplyEffectTo(ref CharacterData character, TAnimCore animator)
          VB: Public Overrides Sub ApplyEffectTo(ByRef character As CharacterData, animator As TAnimCore)
        parameters:
        - id: character
          type: Febucci.UI.Core.CharacterData
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.SizeBehavior.ApplyEffectTo*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Effects.SlideBehavior
    commentId: T:Febucci.UI.Effects.SlideBehavior
    language: CSharp
    name:
      CSharp: SlideBehavior
      VB: SlideBehavior
    nameWithType:
      CSharp: SlideBehavior
      VB: SlideBehavior
    qualifiedName:
      CSharp: Febucci.UI.Effects.SlideBehavior
      VB: Febucci.UI.Effects.SlideBehavior
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: SlideBehavior
      path: ''
      startLine: 7802
    syntax:
      content:
        CSharp: 'public sealed class SlideBehavior : BehaviorScriptableSine'
        VB: >-
          Public NotInheritable Class SlideBehavior

              Inherits BehaviorScriptableSine
    inheritance:
    - System.Object
    - Febucci.UI.Effects.AnimationScriptableBase
    - Febucci.UI.Effects.BehaviorScriptableBase
    - Febucci.UI.Effects.BehaviorScriptableSine
    implements:
    - ITagProvider
    inheritedMembers:
    - Febucci.UI.Effects.BehaviorScriptableSine.baseAmplitude
    - Febucci.UI.Effects.BehaviorScriptableSine.baseFrequency
    - Febucci.UI.Effects.BehaviorScriptableSine.baseWaveSize
    - Febucci.UI.Effects.BehaviorScriptableSine.amplitude
    - Febucci.UI.Effects.BehaviorScriptableSine.frequency
    - Febucci.UI.Effects.BehaviorScriptableSine.waveSize
    - Febucci.UI.Effects.BehaviorScriptableSine.ResetContext(TAnimCore)
    - Febucci.UI.Effects.BehaviorScriptableSine.SetModifier(Febucci.UI.ModifierInfo)
    - Febucci.UI.Effects.BehaviorScriptableBase.GetMaxDuration
    - Febucci.UI.Effects.BehaviorScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
    - Febucci.UI.Effects.AnimationScriptableBase.TagID
    - Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
    - Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
    - Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(CharacterData@,TAnimCore)
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Febucci.UI.Effects.SlideBehavior.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      commentId: M:Febucci.UI.Effects.SlideBehavior.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      language: CSharp
      name:
        CSharp: ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: ApplyEffectTo(ByRef CharacterData, TAnimCore)
      nameWithType:
        CSharp: SlideBehavior.ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: SlideBehavior.ApplyEffectTo(ByRef CharacterData, TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.SlideBehavior.ApplyEffectTo(ref Febucci.UI.Core.CharacterData, TAnimCore)
        VB: Febucci.UI.Effects.SlideBehavior.ApplyEffectTo(ByRef Febucci.UI.Core.CharacterData, TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ApplyEffectTo
        path: ''
        startLine: 7812
      syntax:
        content:
          CSharp: public override void ApplyEffectTo(ref CharacterData character, TAnimCore animator)
          VB: Public Overrides Sub ApplyEffectTo(ByRef character As CharacterData, animator As TAnimCore)
        parameters:
        - id: character
          type: Febucci.UI.Core.CharacterData
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.SlideBehavior.ApplyEffectTo*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Effects.SwingBehavior
    commentId: T:Febucci.UI.Effects.SwingBehavior
    language: CSharp
    name:
      CSharp: SwingBehavior
      VB: SwingBehavior
    nameWithType:
      CSharp: SwingBehavior
      VB: SwingBehavior
    qualifiedName:
      CSharp: Febucci.UI.Effects.SwingBehavior
      VB: Febucci.UI.Effects.SwingBehavior
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: SwingBehavior
      path: ''
      startLine: 7831
    syntax:
      content:
        CSharp: 'public sealed class SwingBehavior : BehaviorScriptableSine'
        VB: >-
          Public NotInheritable Class SwingBehavior

              Inherits BehaviorScriptableSine
    inheritance:
    - System.Object
    - Febucci.UI.Effects.AnimationScriptableBase
    - Febucci.UI.Effects.BehaviorScriptableBase
    - Febucci.UI.Effects.BehaviorScriptableSine
    implements:
    - ITagProvider
    inheritedMembers:
    - Febucci.UI.Effects.BehaviorScriptableSine.baseAmplitude
    - Febucci.UI.Effects.BehaviorScriptableSine.baseFrequency
    - Febucci.UI.Effects.BehaviorScriptableSine.baseWaveSize
    - Febucci.UI.Effects.BehaviorScriptableSine.amplitude
    - Febucci.UI.Effects.BehaviorScriptableSine.frequency
    - Febucci.UI.Effects.BehaviorScriptableSine.waveSize
    - Febucci.UI.Effects.BehaviorScriptableSine.ResetContext(TAnimCore)
    - Febucci.UI.Effects.BehaviorScriptableSine.SetModifier(Febucci.UI.ModifierInfo)
    - Febucci.UI.Effects.BehaviorScriptableBase.GetMaxDuration
    - Febucci.UI.Effects.BehaviorScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
    - Febucci.UI.Effects.AnimationScriptableBase.TagID
    - Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
    - Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
    - Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(CharacterData@,TAnimCore)
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Febucci.UI.Effects.SwingBehavior.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      commentId: M:Febucci.UI.Effects.SwingBehavior.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      language: CSharp
      name:
        CSharp: ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: ApplyEffectTo(ByRef CharacterData, TAnimCore)
      nameWithType:
        CSharp: SwingBehavior.ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: SwingBehavior.ApplyEffectTo(ByRef CharacterData, TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.SwingBehavior.ApplyEffectTo(ref Febucci.UI.Core.CharacterData, TAnimCore)
        VB: Febucci.UI.Effects.SwingBehavior.ApplyEffectTo(ByRef Febucci.UI.Core.CharacterData, TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ApplyEffectTo
        path: ''
        startLine: 7839
      syntax:
        content:
          CSharp: public override void ApplyEffectTo(ref CharacterData character, TAnimCore animator)
          VB: Public Overrides Sub ApplyEffectTo(ByRef character As CharacterData, animator As TAnimCore)
        parameters:
        - id: character
          type: Febucci.UI.Core.CharacterData
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.SwingBehavior.ApplyEffectTo*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Effects.WaveBehavior
    commentId: T:Febucci.UI.Effects.WaveBehavior
    language: CSharp
    name:
      CSharp: WaveBehavior
      VB: WaveBehavior
    nameWithType:
      CSharp: WaveBehavior
      VB: WaveBehavior
    qualifiedName:
      CSharp: Febucci.UI.Effects.WaveBehavior
      VB: Febucci.UI.Effects.WaveBehavior
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: WaveBehavior
      path: ''
      startLine: 7850
    syntax:
      content:
        CSharp: 'public sealed class WaveBehavior : BehaviorScriptableSine'
        VB: >-
          Public NotInheritable Class WaveBehavior

              Inherits BehaviorScriptableSine
    inheritance:
    - System.Object
    - Febucci.UI.Effects.AnimationScriptableBase
    - Febucci.UI.Effects.BehaviorScriptableBase
    - Febucci.UI.Effects.BehaviorScriptableSine
    implements:
    - ITagProvider
    inheritedMembers:
    - Febucci.UI.Effects.BehaviorScriptableSine.baseAmplitude
    - Febucci.UI.Effects.BehaviorScriptableSine.baseFrequency
    - Febucci.UI.Effects.BehaviorScriptableSine.baseWaveSize
    - Febucci.UI.Effects.BehaviorScriptableSine.amplitude
    - Febucci.UI.Effects.BehaviorScriptableSine.frequency
    - Febucci.UI.Effects.BehaviorScriptableSine.waveSize
    - Febucci.UI.Effects.BehaviorScriptableSine.ResetContext(TAnimCore)
    - Febucci.UI.Effects.BehaviorScriptableSine.SetModifier(Febucci.UI.ModifierInfo)
    - Febucci.UI.Effects.BehaviorScriptableBase.GetMaxDuration
    - Febucci.UI.Effects.BehaviorScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
    - Febucci.UI.Effects.AnimationScriptableBase.TagID
    - Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
    - Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
    - Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(CharacterData@,TAnimCore)
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Febucci.UI.Effects.WaveBehavior.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      commentId: M:Febucci.UI.Effects.WaveBehavior.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      language: CSharp
      name:
        CSharp: ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: ApplyEffectTo(ByRef CharacterData, TAnimCore)
      nameWithType:
        CSharp: WaveBehavior.ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: WaveBehavior.ApplyEffectTo(ByRef CharacterData, TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.WaveBehavior.ApplyEffectTo(ref Febucci.UI.Core.CharacterData, TAnimCore)
        VB: Febucci.UI.Effects.WaveBehavior.ApplyEffectTo(ByRef Febucci.UI.Core.CharacterData, TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ApplyEffectTo
        path: ''
        startLine: 7858
      syntax:
        content:
          CSharp: public override void ApplyEffectTo(ref CharacterData character, TAnimCore animator)
          VB: Public Overrides Sub ApplyEffectTo(ByRef character As CharacterData, animator As TAnimCore)
        parameters:
        - id: character
          type: Febucci.UI.Core.CharacterData
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.WaveBehavior.ApplyEffectTo*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Effects.WiggleBehavior
    commentId: T:Febucci.UI.Effects.WiggleBehavior
    language: CSharp
    name:
      CSharp: WiggleBehavior
      VB: WiggleBehavior
    nameWithType:
      CSharp: WiggleBehavior
      VB: WiggleBehavior
    qualifiedName:
      CSharp: Febucci.UI.Effects.WiggleBehavior
      VB: Febucci.UI.Effects.WiggleBehavior
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: WiggleBehavior
      path: ''
      startLine: 7872
    syntax:
      content:
        CSharp: 'public sealed class WiggleBehavior : BehaviorScriptableSine'
        VB: >-
          Public NotInheritable Class WiggleBehavior

              Inherits BehaviorScriptableSine
    inheritance:
    - System.Object
    - Febucci.UI.Effects.AnimationScriptableBase
    - Febucci.UI.Effects.BehaviorScriptableBase
    - Febucci.UI.Effects.BehaviorScriptableSine
    implements:
    - ITagProvider
    inheritedMembers:
    - Febucci.UI.Effects.BehaviorScriptableSine.baseAmplitude
    - Febucci.UI.Effects.BehaviorScriptableSine.baseFrequency
    - Febucci.UI.Effects.BehaviorScriptableSine.baseWaveSize
    - Febucci.UI.Effects.BehaviorScriptableSine.amplitude
    - Febucci.UI.Effects.BehaviorScriptableSine.frequency
    - Febucci.UI.Effects.BehaviorScriptableSine.waveSize
    - Febucci.UI.Effects.BehaviorScriptableSine.ResetContext(TAnimCore)
    - Febucci.UI.Effects.BehaviorScriptableSine.SetModifier(Febucci.UI.ModifierInfo)
    - Febucci.UI.Effects.BehaviorScriptableBase.GetMaxDuration
    - Febucci.UI.Effects.BehaviorScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
    - Febucci.UI.Effects.AnimationScriptableBase.TagID
    - Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
    - Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(CharacterData@,TAnimCore)
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Febucci.UI.Effects.WiggleBehavior.OnInitialize
      commentId: M:Febucci.UI.Effects.WiggleBehavior.OnInitialize
      language: CSharp
      name:
        CSharp: OnInitialize()
        VB: OnInitialize()
      nameWithType:
        CSharp: WiggleBehavior.OnInitialize()
        VB: WiggleBehavior.OnInitialize()
      qualifiedName:
        CSharp: Febucci.UI.Effects.WiggleBehavior.OnInitialize()
        VB: Febucci.UI.Effects.WiggleBehavior.OnInitialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: OnInitialize
        path: ''
        startLine: 7884
      syntax:
        content:
          CSharp: protected override void OnInitialize()
          VB: Protected Overrides Sub OnInitialize
      overload: Febucci.UI.Effects.WiggleBehavior.OnInitialize*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: Febucci.UI.Effects.WiggleBehavior.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      commentId: M:Febucci.UI.Effects.WiggleBehavior.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      language: CSharp
      name:
        CSharp: ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: ApplyEffectTo(ByRef CharacterData, TAnimCore)
      nameWithType:
        CSharp: WiggleBehavior.ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: WiggleBehavior.ApplyEffectTo(ByRef CharacterData, TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.WiggleBehavior.ApplyEffectTo(ref Febucci.UI.Core.CharacterData, TAnimCore)
        VB: Febucci.UI.Effects.WiggleBehavior.ApplyEffectTo(ByRef Febucci.UI.Core.CharacterData, TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ApplyEffectTo
        path: ''
        startLine: 7897
      syntax:
        content:
          CSharp: public override void ApplyEffectTo(ref CharacterData character, TAnimCore animator)
          VB: Public Overrides Sub ApplyEffectTo(ByRef character As CharacterData, animator As TAnimCore)
        parameters:
        - id: character
          type: Febucci.UI.Core.CharacterData
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.WiggleBehavior.ApplyEffectTo*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Effects.BehaviorScriptableBase
    commentId: T:Febucci.UI.Effects.BehaviorScriptableBase
    language: CSharp
    name:
      CSharp: BehaviorScriptableBase
      VB: BehaviorScriptableBase
    nameWithType:
      CSharp: BehaviorScriptableBase
      VB: BehaviorScriptableBase
    qualifiedName:
      CSharp: Febucci.UI.Effects.BehaviorScriptableBase
      VB: Febucci.UI.Effects.BehaviorScriptableBase
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: BehaviorScriptableBase
      path: ''
      startLine: 7916
    summary: "\nBase class for animating letters in Text Animator\n"
    example: []
    syntax:
      content:
        CSharp: 'public abstract class BehaviorScriptableBase : AnimationScriptableBase'
        VB: >-
          Public MustInherit Class BehaviorScriptableBase

              Inherits AnimationScriptableBase
    inheritance:
    - System.Object
    - Febucci.UI.Effects.AnimationScriptableBase
    implements:
    - ITagProvider
    inheritedMembers:
    - Febucci.UI.Effects.AnimationScriptableBase.TagID
    - Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
    - Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
    - Febucci.UI.Effects.AnimationScriptableBase.ResetContext(TAnimCore)
    - Febucci.UI.Effects.AnimationScriptableBase.SetModifier(Febucci.UI.ModifierInfo)
    - Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(CharacterData@,TAnimCore)
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: Febucci.UI.Effects.BehaviorScriptableBase.GetMaxDuration
      commentId: M:Febucci.UI.Effects.BehaviorScriptableBase.GetMaxDuration
      language: CSharp
      name:
        CSharp: GetMaxDuration()
        VB: GetMaxDuration()
      nameWithType:
        CSharp: BehaviorScriptableBase.GetMaxDuration()
        VB: BehaviorScriptableBase.GetMaxDuration()
      qualifiedName:
        CSharp: Febucci.UI.Effects.BehaviorScriptableBase.GetMaxDuration()
        VB: Febucci.UI.Effects.BehaviorScriptableBase.GetMaxDuration()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: GetMaxDuration
        path: ''
        startLine: 7918
      syntax:
        content:
          CSharp: public override float GetMaxDuration()
          VB: Public Overrides Function GetMaxDuration As Single
        return:
          type: System.Single
      overload: Febucci.UI.Effects.BehaviorScriptableBase.GetMaxDuration*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.GetMaxDuration
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.BehaviorScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
      commentId: M:Febucci.UI.Effects.BehaviorScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
      language: CSharp
      name:
        CSharp: CanApplyEffectTo(CharacterData, TAnimCore)
        VB: CanApplyEffectTo(CharacterData, TAnimCore)
      nameWithType:
        CSharp: BehaviorScriptableBase.CanApplyEffectTo(CharacterData, TAnimCore)
        VB: BehaviorScriptableBase.CanApplyEffectTo(CharacterData, TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.BehaviorScriptableBase.CanApplyEffectTo(CharacterData, TAnimCore)
        VB: Febucci.UI.Effects.BehaviorScriptableBase.CanApplyEffectTo(CharacterData, TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: CanApplyEffectTo
        path: ''
        startLine: 7919
      syntax:
        content:
          CSharp: public override bool CanApplyEffectTo(CharacterData character, TAnimCore animator)
          VB: Public Overrides Function CanApplyEffectTo(character As CharacterData, animator As TAnimCore) As Boolean
        parameters:
        - id: character
          type: CharacterData
        - id: animator
          type: TAnimCore
        return:
          type: System.Boolean
      overload: Febucci.UI.Effects.BehaviorScriptableBase.CanApplyEffectTo*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Effects.BehaviorScriptableSine
    commentId: T:Febucci.UI.Effects.BehaviorScriptableSine
    language: CSharp
    name:
      CSharp: BehaviorScriptableSine
      VB: BehaviorScriptableSine
    nameWithType:
      CSharp: BehaviorScriptableSine
      VB: BehaviorScriptableSine
    qualifiedName:
      CSharp: Febucci.UI.Effects.BehaviorScriptableSine
      VB: Febucci.UI.Effects.BehaviorScriptableSine
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: BehaviorScriptableSine
      path: ''
      startLine: 7927
    syntax:
      content:
        CSharp: 'public abstract class BehaviorScriptableSine : BehaviorScriptableBase'
        VB: >-
          Public MustInherit Class BehaviorScriptableSine

              Inherits BehaviorScriptableBase
    inheritance:
    - System.Object
    - Febucci.UI.Effects.AnimationScriptableBase
    - Febucci.UI.Effects.BehaviorScriptableBase
    implements:
    - ITagProvider
    inheritedMembers:
    - Febucci.UI.Effects.BehaviorScriptableBase.GetMaxDuration
    - Febucci.UI.Effects.BehaviorScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
    - Febucci.UI.Effects.AnimationScriptableBase.TagID
    - Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
    - Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
    - Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(CharacterData@,TAnimCore)
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: Febucci.UI.Effects.BehaviorScriptableSine.baseAmplitude
      commentId: F:Febucci.UI.Effects.BehaviorScriptableSine.baseAmplitude
      language: CSharp
      name:
        CSharp: baseAmplitude
        VB: baseAmplitude
      nameWithType:
        CSharp: BehaviorScriptableSine.baseAmplitude
        VB: BehaviorScriptableSine.baseAmplitude
      qualifiedName:
        CSharp: Febucci.UI.Effects.BehaviorScriptableSine.baseAmplitude
        VB: Febucci.UI.Effects.BehaviorScriptableSine.baseAmplitude
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: baseAmplitude
        path: ''
        startLine: 7930
      syntax:
        content:
          CSharp: public float baseAmplitude
          VB: Public baseAmplitude As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.BehaviorScriptableSine.baseFrequency
      commentId: F:Febucci.UI.Effects.BehaviorScriptableSine.baseFrequency
      language: CSharp
      name:
        CSharp: baseFrequency
        VB: baseFrequency
      nameWithType:
        CSharp: BehaviorScriptableSine.baseFrequency
        VB: BehaviorScriptableSine.baseFrequency
      qualifiedName:
        CSharp: Febucci.UI.Effects.BehaviorScriptableSine.baseFrequency
        VB: Febucci.UI.Effects.BehaviorScriptableSine.baseFrequency
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: baseFrequency
        path: ''
        startLine: 7931
      syntax:
        content:
          CSharp: public float baseFrequency
          VB: Public baseFrequency As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.BehaviorScriptableSine.baseWaveSize
      commentId: F:Febucci.UI.Effects.BehaviorScriptableSine.baseWaveSize
      language: CSharp
      name:
        CSharp: baseWaveSize
        VB: baseWaveSize
      nameWithType:
        CSharp: BehaviorScriptableSine.baseWaveSize
        VB: BehaviorScriptableSine.baseWaveSize
      qualifiedName:
        CSharp: Febucci.UI.Effects.BehaviorScriptableSine.baseWaveSize
        VB: Febucci.UI.Effects.BehaviorScriptableSine.baseWaveSize
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: baseWaveSize
        path: ''
        startLine: 7932
      syntax:
        content:
          CSharp: public float baseWaveSize
          VB: Public baseWaveSize As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.BehaviorScriptableSine.amplitude
      commentId: F:Febucci.UI.Effects.BehaviorScriptableSine.amplitude
      language: CSharp
      name:
        CSharp: amplitude
        VB: amplitude
      nameWithType:
        CSharp: BehaviorScriptableSine.amplitude
        VB: BehaviorScriptableSine.amplitude
      qualifiedName:
        CSharp: Febucci.UI.Effects.BehaviorScriptableSine.amplitude
        VB: Febucci.UI.Effects.BehaviorScriptableSine.amplitude
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: amplitude
        path: ''
        startLine: 7935
      syntax:
        content:
          CSharp: protected float amplitude
          VB: Protected amplitude As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: Febucci.UI.Effects.BehaviorScriptableSine.frequency
      commentId: F:Febucci.UI.Effects.BehaviorScriptableSine.frequency
      language: CSharp
      name:
        CSharp: frequency
        VB: frequency
      nameWithType:
        CSharp: BehaviorScriptableSine.frequency
        VB: BehaviorScriptableSine.frequency
      qualifiedName:
        CSharp: Febucci.UI.Effects.BehaviorScriptableSine.frequency
        VB: Febucci.UI.Effects.BehaviorScriptableSine.frequency
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: frequency
        path: ''
        startLine: 7936
      syntax:
        content:
          CSharp: protected float frequency
          VB: Protected frequency As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: Febucci.UI.Effects.BehaviorScriptableSine.waveSize
      commentId: F:Febucci.UI.Effects.BehaviorScriptableSine.waveSize
      language: CSharp
      name:
        CSharp: waveSize
        VB: waveSize
      nameWithType:
        CSharp: BehaviorScriptableSine.waveSize
        VB: BehaviorScriptableSine.waveSize
      qualifiedName:
        CSharp: Febucci.UI.Effects.BehaviorScriptableSine.waveSize
        VB: Febucci.UI.Effects.BehaviorScriptableSine.waveSize
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: waveSize
        path: ''
        startLine: 7937
      syntax:
        content:
          CSharp: protected float waveSize
          VB: Protected waveSize As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: Febucci.UI.Effects.BehaviorScriptableSine.ResetContext(TAnimCore)
      commentId: M:Febucci.UI.Effects.BehaviorScriptableSine.ResetContext(TAnimCore)
      language: CSharp
      name:
        CSharp: ResetContext(TAnimCore)
        VB: ResetContext(TAnimCore)
      nameWithType:
        CSharp: BehaviorScriptableSine.ResetContext(TAnimCore)
        VB: BehaviorScriptableSine.ResetContext(TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.BehaviorScriptableSine.ResetContext(TAnimCore)
        VB: Febucci.UI.Effects.BehaviorScriptableSine.ResetContext(TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ResetContext
        path: ''
        startLine: 7940
      syntax:
        content:
          CSharp: public override void ResetContext(TAnimCore animator)
          VB: Public Overrides Sub ResetContext(animator As TAnimCore)
        parameters:
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.BehaviorScriptableSine.ResetContext*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.ResetContext(TAnimCore)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.BehaviorScriptableSine.SetModifier(Febucci.UI.ModifierInfo)
      commentId: M:Febucci.UI.Effects.BehaviorScriptableSine.SetModifier(Febucci.UI.ModifierInfo)
      language: CSharp
      name:
        CSharp: SetModifier(ModifierInfo)
        VB: SetModifier(ModifierInfo)
      nameWithType:
        CSharp: BehaviorScriptableSine.SetModifier(ModifierInfo)
        VB: BehaviorScriptableSine.SetModifier(ModifierInfo)
      qualifiedName:
        CSharp: Febucci.UI.Effects.BehaviorScriptableSine.SetModifier(Febucci.UI.ModifierInfo)
        VB: Febucci.UI.Effects.BehaviorScriptableSine.SetModifier(Febucci.UI.ModifierInfo)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: SetModifier
        path: ''
        startLine: 7947
      syntax:
        content:
          CSharp: public override void SetModifier(ModifierInfo modifier)
          VB: Public Overrides Sub SetModifier(modifier As ModifierInfo)
        parameters:
        - id: modifier
          type: Febucci.UI.ModifierInfo
      overload: Febucci.UI.Effects.BehaviorScriptableSine.SetModifier*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.SetModifier(Febucci.UI.ModifierInfo)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Effects.CompositeAnimation
    commentId: T:Febucci.UI.Effects.CompositeAnimation
    language: CSharp
    name:
      CSharp: CompositeAnimation
      VB: CompositeAnimation
    nameWithType:
      CSharp: CompositeAnimation
      VB: CompositeAnimation
    qualifiedName:
      CSharp: Febucci.UI.Effects.CompositeAnimation
      VB: Febucci.UI.Effects.CompositeAnimation
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: CompositeAnimation
      path: ''
      startLine: 7969
    summary: "\nApplies multiples animations, allowing user to use one tag for all of them\n"
    example: []
    syntax:
      content:
        CSharp: 'public sealed class CompositeAnimation : AnimationScriptableBase'
        VB: >-
          Public NotInheritable Class CompositeAnimation

              Inherits AnimationScriptableBase
    inheritance:
    - System.Object
    - Febucci.UI.Effects.AnimationScriptableBase
    implements:
    - ITagProvider
    inheritedMembers:
    - Febucci.UI.Effects.AnimationScriptableBase.TagID
    - Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Febucci.UI.Effects.CompositeAnimation.animations
      commentId: F:Febucci.UI.Effects.CompositeAnimation.animations
      language: CSharp
      name:
        CSharp: animations
        VB: animations
      nameWithType:
        CSharp: CompositeAnimation.animations
        VB: CompositeAnimation.animations
      qualifiedName:
        CSharp: Febucci.UI.Effects.CompositeAnimation.animations
        VB: Febucci.UI.Effects.CompositeAnimation.animations
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: animations
        path: ''
        startLine: 7974
      syntax:
        content:
          CSharp: public AnimationScriptableBase[] animations
          VB: Public animations As AnimationScriptableBase()
        return:
          type: Febucci.UI.Effects.AnimationScriptableBase[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.CompositeAnimation.OnInitialize
      commentId: M:Febucci.UI.Effects.CompositeAnimation.OnInitialize
      language: CSharp
      name:
        CSharp: OnInitialize()
        VB: OnInitialize()
      nameWithType:
        CSharp: CompositeAnimation.OnInitialize()
        VB: CompositeAnimation.OnInitialize()
      qualifiedName:
        CSharp: Febucci.UI.Effects.CompositeAnimation.OnInitialize()
        VB: Febucci.UI.Effects.CompositeAnimation.OnInitialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: OnInitialize
        path: ''
        startLine: 7976
      syntax:
        content:
          CSharp: protected override void OnInitialize()
          VB: Protected Overrides Sub OnInitialize
      overload: Febucci.UI.Effects.CompositeAnimation.OnInitialize*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: Febucci.UI.Effects.CompositeAnimation.ResetContext(TAnimCore)
      commentId: M:Febucci.UI.Effects.CompositeAnimation.ResetContext(TAnimCore)
      language: CSharp
      name:
        CSharp: ResetContext(TAnimCore)
        VB: ResetContext(TAnimCore)
      nameWithType:
        CSharp: CompositeAnimation.ResetContext(TAnimCore)
        VB: CompositeAnimation.ResetContext(TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.CompositeAnimation.ResetContext(TAnimCore)
        VB: Febucci.UI.Effects.CompositeAnimation.ResetContext(TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ResetContext
        path: ''
        startLine: 7988
      syntax:
        content:
          CSharp: public override void ResetContext(TAnimCore animator)
          VB: Public Overrides Sub ResetContext(animator As TAnimCore)
        parameters:
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.CompositeAnimation.ResetContext*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.ResetContext(TAnimCore)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.CompositeAnimation.SetModifier(Febucci.UI.ModifierInfo)
      commentId: M:Febucci.UI.Effects.CompositeAnimation.SetModifier(Febucci.UI.ModifierInfo)
      language: CSharp
      name:
        CSharp: SetModifier(ModifierInfo)
        VB: SetModifier(ModifierInfo)
      nameWithType:
        CSharp: CompositeAnimation.SetModifier(ModifierInfo)
        VB: CompositeAnimation.SetModifier(ModifierInfo)
      qualifiedName:
        CSharp: Febucci.UI.Effects.CompositeAnimation.SetModifier(Febucci.UI.ModifierInfo)
        VB: Febucci.UI.Effects.CompositeAnimation.SetModifier(Febucci.UI.ModifierInfo)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: SetModifier
        path: ''
        startLine: 7996
      syntax:
        content:
          CSharp: public override void SetModifier(ModifierInfo modifier)
          VB: Public Overrides Sub SetModifier(modifier As ModifierInfo)
        parameters:
        - id: modifier
          type: Febucci.UI.ModifierInfo
      overload: Febucci.UI.Effects.CompositeAnimation.SetModifier*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.SetModifier(Febucci.UI.ModifierInfo)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.CompositeAnimation.ApplyEffectTo(CharacterData@,TAnimCore)
      commentId: M:Febucci.UI.Effects.CompositeAnimation.ApplyEffectTo(CharacterData@,TAnimCore)
      language: CSharp
      name:
        CSharp: ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: ApplyEffectTo(ByRef CharacterData, TAnimCore)
      nameWithType:
        CSharp: CompositeAnimation.ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: CompositeAnimation.ApplyEffectTo(ByRef CharacterData, TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.CompositeAnimation.ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: Febucci.UI.Effects.CompositeAnimation.ApplyEffectTo(ByRef CharacterData, TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ApplyEffectTo
        path: ''
        startLine: 8005
      syntax:
        content:
          CSharp: public override void ApplyEffectTo(ref CharacterData character, TAnimCore animator)
          VB: Public Overrides Sub ApplyEffectTo(ByRef character As CharacterData, animator As TAnimCore)
        parameters:
        - id: character
          type: CharacterData
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.CompositeAnimation.ApplyEffectTo*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(CharacterData@,TAnimCore)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.CompositeAnimation.CanApplyEffectTo(CharacterData,TAnimCore)
      commentId: M:Febucci.UI.Effects.CompositeAnimation.CanApplyEffectTo(CharacterData,TAnimCore)
      language: CSharp
      name:
        CSharp: CanApplyEffectTo(CharacterData, TAnimCore)
        VB: CanApplyEffectTo(CharacterData, TAnimCore)
      nameWithType:
        CSharp: CompositeAnimation.CanApplyEffectTo(CharacterData, TAnimCore)
        VB: CompositeAnimation.CanApplyEffectTo(CharacterData, TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.CompositeAnimation.CanApplyEffectTo(CharacterData, TAnimCore)
        VB: Febucci.UI.Effects.CompositeAnimation.CanApplyEffectTo(CharacterData, TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: CanApplyEffectTo
        path: ''
        startLine: 8015
      syntax:
        content:
          CSharp: public override bool CanApplyEffectTo(CharacterData character, TAnimCore animator)
          VB: Public Overrides Function CanApplyEffectTo(character As CharacterData, animator As TAnimCore) As Boolean
        parameters:
        - id: character
          type: CharacterData
        - id: animator
          type: TAnimCore
        return:
          type: System.Boolean
      overload: Febucci.UI.Effects.CompositeAnimation.CanApplyEffectTo*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.CompositeAnimation.GetMaxDuration
      commentId: M:Febucci.UI.Effects.CompositeAnimation.GetMaxDuration
      language: CSharp
      name:
        CSharp: GetMaxDuration()
        VB: GetMaxDuration()
      nameWithType:
        CSharp: CompositeAnimation.GetMaxDuration()
        VB: CompositeAnimation.GetMaxDuration()
      qualifiedName:
        CSharp: Febucci.UI.Effects.CompositeAnimation.GetMaxDuration()
        VB: Febucci.UI.Effects.CompositeAnimation.GetMaxDuration()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: GetMaxDuration
        path: ''
        startLine: 8017
      syntax:
        content:
          CSharp: public override float GetMaxDuration()
          VB: Public Overrides Function GetMaxDuration As Single
        return:
          type: System.Single
      overload: Febucci.UI.Effects.CompositeAnimation.GetMaxDuration*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.GetMaxDuration
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Effects.CompositeWithEmission
    commentId: T:Febucci.UI.Effects.CompositeWithEmission
    language: CSharp
    name:
      CSharp: CompositeWithEmission
      VB: CompositeWithEmission
    nameWithType:
      CSharp: CompositeWithEmission
      VB: CompositeWithEmission
    qualifiedName:
      CSharp: Febucci.UI.Effects.CompositeWithEmission
      VB: Febucci.UI.Effects.CompositeWithEmission
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: CompositeWithEmission
      path: ''
      startLine: 8054
    summary: "\nApplies multiples animations, allowing user to use one tag for all of them\n"
    example: []
    syntax:
      content:
        CSharp: 'public sealed class CompositeWithEmission : AnimationScriptableBase'
        VB: >-
          Public NotInheritable Class CompositeWithEmission

              Inherits AnimationScriptableBase
    inheritance:
    - System.Object
    - Febucci.UI.Effects.AnimationScriptableBase
    implements:
    - ITagProvider
    inheritedMembers:
    - Febucci.UI.Effects.AnimationScriptableBase.TagID
    - Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Febucci.UI.Effects.CompositeWithEmission.timeMode
      commentId: F:Febucci.UI.Effects.CompositeWithEmission.timeMode
      language: CSharp
      name:
        CSharp: timeMode
        VB: timeMode
      nameWithType:
        CSharp: CompositeWithEmission.timeMode
        VB: CompositeWithEmission.timeMode
      qualifiedName:
        CSharp: Febucci.UI.Effects.CompositeWithEmission.timeMode
        VB: Febucci.UI.Effects.CompositeWithEmission.timeMode
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: timeMode
        path: ''
        startLine: 8059
      syntax:
        content:
          CSharp: public TimeMode timeMode
          VB: Public timeMode As TimeMode
        return:
          type: Febucci.UI.Effects.TimeMode
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.CompositeWithEmission.emissionCurve
      commentId: F:Febucci.UI.Effects.CompositeWithEmission.emissionCurve
      language: CSharp
      name:
        CSharp: emissionCurve
        VB: emissionCurve
      nameWithType:
        CSharp: CompositeWithEmission.emissionCurve
        VB: CompositeWithEmission.emissionCurve
      qualifiedName:
        CSharp: Febucci.UI.Effects.CompositeWithEmission.emissionCurve
        VB: Febucci.UI.Effects.CompositeWithEmission.emissionCurve
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: emissionCurve
        path: ''
        startLine: 8060
      syntax:
        content:
          CSharp: public EmissionCurve emissionCurve
          VB: Public emissionCurve As EmissionCurve
        return:
          type: Febucci.UI.Effects.EmissionCurve
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.CompositeWithEmission.animations
      commentId: F:Febucci.UI.Effects.CompositeWithEmission.animations
      language: CSharp
      name:
        CSharp: animations
        VB: animations
      nameWithType:
        CSharp: CompositeWithEmission.animations
        VB: CompositeWithEmission.animations
      qualifiedName:
        CSharp: Febucci.UI.Effects.CompositeWithEmission.animations
        VB: Febucci.UI.Effects.CompositeWithEmission.animations
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: animations
        path: ''
        startLine: 8061
      syntax:
        content:
          CSharp: public AnimationScriptableBase[] animations
          VB: Public animations As AnimationScriptableBase()
        return:
          type: Febucci.UI.Effects.AnimationScriptableBase[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.CompositeWithEmission.OnInitialize
      commentId: M:Febucci.UI.Effects.CompositeWithEmission.OnInitialize
      language: CSharp
      name:
        CSharp: OnInitialize()
        VB: OnInitialize()
      nameWithType:
        CSharp: CompositeWithEmission.OnInitialize()
        VB: CompositeWithEmission.OnInitialize()
      qualifiedName:
        CSharp: Febucci.UI.Effects.CompositeWithEmission.OnInitialize()
        VB: Febucci.UI.Effects.CompositeWithEmission.OnInitialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: OnInitialize
        path: ''
        startLine: 8063
      syntax:
        content:
          CSharp: protected override void OnInitialize()
          VB: Protected Overrides Sub OnInitialize
      overload: Febucci.UI.Effects.CompositeWithEmission.OnInitialize*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: Febucci.UI.Effects.CompositeWithEmission.ResetContext(TAnimCore)
      commentId: M:Febucci.UI.Effects.CompositeWithEmission.ResetContext(TAnimCore)
      language: CSharp
      name:
        CSharp: ResetContext(TAnimCore)
        VB: ResetContext(TAnimCore)
      nameWithType:
        CSharp: CompositeWithEmission.ResetContext(TAnimCore)
        VB: CompositeWithEmission.ResetContext(TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.CompositeWithEmission.ResetContext(TAnimCore)
        VB: Febucci.UI.Effects.CompositeWithEmission.ResetContext(TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ResetContext
        path: ''
        startLine: 8079
      syntax:
        content:
          CSharp: public override void ResetContext(TAnimCore animator)
          VB: Public Overrides Sub ResetContext(animator As TAnimCore)
        parameters:
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.CompositeWithEmission.ResetContext*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.ResetContext(TAnimCore)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.CompositeWithEmission.SetModifier(Febucci.UI.ModifierInfo)
      commentId: M:Febucci.UI.Effects.CompositeWithEmission.SetModifier(Febucci.UI.ModifierInfo)
      language: CSharp
      name:
        CSharp: SetModifier(ModifierInfo)
        VB: SetModifier(ModifierInfo)
      nameWithType:
        CSharp: CompositeWithEmission.SetModifier(ModifierInfo)
        VB: CompositeWithEmission.SetModifier(ModifierInfo)
      qualifiedName:
        CSharp: Febucci.UI.Effects.CompositeWithEmission.SetModifier(Febucci.UI.ModifierInfo)
        VB: Febucci.UI.Effects.CompositeWithEmission.SetModifier(Febucci.UI.ModifierInfo)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: SetModifier
        path: ''
        startLine: 8087
      syntax:
        content:
          CSharp: public override void SetModifier(ModifierInfo modifier)
          VB: Public Overrides Sub SetModifier(modifier As ModifierInfo)
        parameters:
        - id: modifier
          type: Febucci.UI.ModifierInfo
      overload: Febucci.UI.Effects.CompositeWithEmission.SetModifier*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.SetModifier(Febucci.UI.ModifierInfo)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.CompositeWithEmission.ApplyEffectTo(CharacterData@,TAnimCore)
      commentId: M:Febucci.UI.Effects.CompositeWithEmission.ApplyEffectTo(CharacterData@,TAnimCore)
      language: CSharp
      name:
        CSharp: ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: ApplyEffectTo(ByRef CharacterData, TAnimCore)
      nameWithType:
        CSharp: CompositeWithEmission.ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: CompositeWithEmission.ApplyEffectTo(ByRef CharacterData, TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.CompositeWithEmission.ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: Febucci.UI.Effects.CompositeWithEmission.ApplyEffectTo(ByRef CharacterData, TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ApplyEffectTo
        path: ''
        startLine: 8097
      syntax:
        content:
          CSharp: public override void ApplyEffectTo(ref CharacterData character, TAnimCore animator)
          VB: Public Overrides Sub ApplyEffectTo(ByRef character As CharacterData, animator As TAnimCore)
        parameters:
        - id: character
          type: CharacterData
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.CompositeWithEmission.ApplyEffectTo*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(CharacterData@,TAnimCore)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.CompositeWithEmission.CanApplyEffectTo(CharacterData,TAnimCore)
      commentId: M:Febucci.UI.Effects.CompositeWithEmission.CanApplyEffectTo(CharacterData,TAnimCore)
      language: CSharp
      name:
        CSharp: CanApplyEffectTo(CharacterData, TAnimCore)
        VB: CanApplyEffectTo(CharacterData, TAnimCore)
      nameWithType:
        CSharp: CompositeWithEmission.CanApplyEffectTo(CharacterData, TAnimCore)
        VB: CompositeWithEmission.CanApplyEffectTo(CharacterData, TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.CompositeWithEmission.CanApplyEffectTo(CharacterData, TAnimCore)
        VB: Febucci.UI.Effects.CompositeWithEmission.CanApplyEffectTo(CharacterData, TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: CanApplyEffectTo
        path: ''
        startLine: 8123
      syntax:
        content:
          CSharp: public override bool CanApplyEffectTo(CharacterData character, TAnimCore animator)
          VB: Public Overrides Function CanApplyEffectTo(character As CharacterData, animator As TAnimCore) As Boolean
        parameters:
        - id: character
          type: CharacterData
        - id: animator
          type: TAnimCore
        return:
          type: System.Boolean
      overload: Febucci.UI.Effects.CompositeWithEmission.CanApplyEffectTo*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.CompositeWithEmission.GetMaxDuration
      commentId: M:Febucci.UI.Effects.CompositeWithEmission.GetMaxDuration
      language: CSharp
      name:
        CSharp: GetMaxDuration()
        VB: GetMaxDuration()
      nameWithType:
        CSharp: CompositeWithEmission.GetMaxDuration()
        VB: CompositeWithEmission.GetMaxDuration()
      qualifiedName:
        CSharp: Febucci.UI.Effects.CompositeWithEmission.GetMaxDuration()
        VB: Febucci.UI.Effects.CompositeWithEmission.GetMaxDuration()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: GetMaxDuration
        path: ''
        startLine: 8125
      syntax:
        content:
          CSharp: public override float GetMaxDuration()
          VB: Public Overrides Function GetMaxDuration As Single
        return:
          type: System.Single
      overload: Febucci.UI.Effects.CompositeWithEmission.GetMaxDuration*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.GetMaxDuration
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Effects.UniformCurveAnimation
    commentId: T:Febucci.UI.Effects.UniformCurveAnimation
    language: CSharp
    name:
      CSharp: UniformCurveAnimation
      VB: UniformCurveAnimation
    nameWithType:
      CSharp: UniformCurveAnimation
      VB: UniformCurveAnimation
    qualifiedName:
      CSharp: Febucci.UI.Effects.UniformCurveAnimation
      VB: Febucci.UI.Effects.UniformCurveAnimation
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: UniformCurveAnimation
      path: ''
      startLine: 8150
    syntax:
      content:
        CSharp: 'public sealed class UniformCurveAnimation : AnimationScriptableBase'
        VB: >-
          Public NotInheritable Class UniformCurveAnimation

              Inherits AnimationScriptableBase
    inheritance:
    - System.Object
    - Febucci.UI.Effects.AnimationScriptableBase
    implements:
    - ITagProvider
    inheritedMembers:
    - Febucci.UI.Effects.AnimationScriptableBase.TagID
    - Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
    - Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
    - Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(CharacterData@,TAnimCore)
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Febucci.UI.Effects.UniformCurveAnimation.timeMode
      commentId: F:Febucci.UI.Effects.UniformCurveAnimation.timeMode
      language: CSharp
      name:
        CSharp: timeMode
        VB: timeMode
      nameWithType:
        CSharp: UniformCurveAnimation.timeMode
        VB: UniformCurveAnimation.timeMode
      qualifiedName:
        CSharp: Febucci.UI.Effects.UniformCurveAnimation.timeMode
        VB: Febucci.UI.Effects.UniformCurveAnimation.timeMode
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: timeMode
        path: ''
        startLine: 8155
      syntax:
        content:
          CSharp: public TimeMode timeMode
          VB: Public timeMode As TimeMode
        return:
          type: Febucci.UI.Effects.TimeMode
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.UniformCurveAnimation.emissionCurve
      commentId: F:Febucci.UI.Effects.UniformCurveAnimation.emissionCurve
      language: CSharp
      name:
        CSharp: emissionCurve
        VB: emissionCurve
      nameWithType:
        CSharp: UniformCurveAnimation.emissionCurve
        VB: UniformCurveAnimation.emissionCurve
      qualifiedName:
        CSharp: Febucci.UI.Effects.UniformCurveAnimation.emissionCurve
        VB: Febucci.UI.Effects.UniformCurveAnimation.emissionCurve
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: emissionCurve
        path: ''
        startLine: 8156
      syntax:
        content:
          CSharp: public EmissionCurve emissionCurve
          VB: Public emissionCurve As EmissionCurve
        return:
          type: Febucci.UI.Effects.EmissionCurve
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.UniformCurveAnimation.animationData
      commentId: F:Febucci.UI.Effects.UniformCurveAnimation.animationData
      language: CSharp
      name:
        CSharp: animationData
        VB: animationData
      nameWithType:
        CSharp: UniformCurveAnimation.animationData
        VB: UniformCurveAnimation.animationData
      qualifiedName:
        CSharp: Febucci.UI.Effects.UniformCurveAnimation.animationData
        VB: Febucci.UI.Effects.UniformCurveAnimation.animationData
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: animationData
        path: ''
        startLine: 8157
      syntax:
        content:
          CSharp: public AnimationData animationData
          VB: Public animationData As AnimationData
        return:
          type: Febucci.UI.Effects.AnimationData
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.UniformCurveAnimation.ResetContext(TAnimCore)
      commentId: M:Febucci.UI.Effects.UniformCurveAnimation.ResetContext(TAnimCore)
      language: CSharp
      name:
        CSharp: ResetContext(TAnimCore)
        VB: ResetContext(TAnimCore)
      nameWithType:
        CSharp: UniformCurveAnimation.ResetContext(TAnimCore)
        VB: UniformCurveAnimation.ResetContext(TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.UniformCurveAnimation.ResetContext(TAnimCore)
        VB: Febucci.UI.Effects.UniformCurveAnimation.ResetContext(TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ResetContext
        path: ''
        startLine: 8166
      syntax:
        content:
          CSharp: public override void ResetContext(TAnimCore animator)
          VB: Public Overrides Sub ResetContext(animator As TAnimCore)
        parameters:
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.UniformCurveAnimation.ResetContext*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.ResetContext(TAnimCore)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.UniformCurveAnimation.SetModifier(Febucci.UI.ModifierInfo)
      commentId: M:Febucci.UI.Effects.UniformCurveAnimation.SetModifier(Febucci.UI.ModifierInfo)
      language: CSharp
      name:
        CSharp: SetModifier(ModifierInfo)
        VB: SetModifier(ModifierInfo)
      nameWithType:
        CSharp: UniformCurveAnimation.SetModifier(ModifierInfo)
        VB: UniformCurveAnimation.SetModifier(ModifierInfo)
      qualifiedName:
        CSharp: Febucci.UI.Effects.UniformCurveAnimation.SetModifier(Febucci.UI.ModifierInfo)
        VB: Febucci.UI.Effects.UniformCurveAnimation.SetModifier(Febucci.UI.ModifierInfo)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: SetModifier
        path: ''
        startLine: 8172
      syntax:
        content:
          CSharp: public override void SetModifier(ModifierInfo modifier)
          VB: Public Overrides Sub SetModifier(modifier As ModifierInfo)
        parameters:
        - id: modifier
          type: Febucci.UI.ModifierInfo
      overload: Febucci.UI.Effects.UniformCurveAnimation.SetModifier*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.SetModifier(Febucci.UI.ModifierInfo)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.UniformCurveAnimation.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      commentId: M:Febucci.UI.Effects.UniformCurveAnimation.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      language: CSharp
      name:
        CSharp: ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: ApplyEffectTo(ByRef CharacterData, TAnimCore)
      nameWithType:
        CSharp: UniformCurveAnimation.ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: UniformCurveAnimation.ApplyEffectTo(ByRef CharacterData, TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.UniformCurveAnimation.ApplyEffectTo(ref Febucci.UI.Core.CharacterData, TAnimCore)
        VB: Febucci.UI.Effects.UniformCurveAnimation.ApplyEffectTo(ByRef Febucci.UI.Core.CharacterData, TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ApplyEffectTo
        path: ''
        startLine: 8187
      syntax:
        content:
          CSharp: public override void ApplyEffectTo(ref CharacterData character, TAnimCore animator)
          VB: Public Overrides Sub ApplyEffectTo(ByRef character As CharacterData, animator As TAnimCore)
        parameters:
        - id: character
          type: Febucci.UI.Core.CharacterData
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.UniformCurveAnimation.ApplyEffectTo*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.UniformCurveAnimation.GetMaxDuration
      commentId: M:Febucci.UI.Effects.UniformCurveAnimation.GetMaxDuration
      language: CSharp
      name:
        CSharp: GetMaxDuration()
        VB: GetMaxDuration()
      nameWithType:
        CSharp: UniformCurveAnimation.GetMaxDuration()
        VB: UniformCurveAnimation.GetMaxDuration()
      qualifiedName:
        CSharp: Febucci.UI.Effects.UniformCurveAnimation.GetMaxDuration()
        VB: Febucci.UI.Effects.UniformCurveAnimation.GetMaxDuration()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: GetMaxDuration
        path: ''
        startLine: 8210
      syntax:
        content:
          CSharp: public override float GetMaxDuration()
          VB: Public Overrides Function GetMaxDuration As Single
        return:
          type: System.Single
      overload: Febucci.UI.Effects.UniformCurveAnimation.GetMaxDuration*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.GetMaxDuration
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.UniformCurveAnimation.CanApplyEffectTo(CharacterData,TAnimCore)
      commentId: M:Febucci.UI.Effects.UniformCurveAnimation.CanApplyEffectTo(CharacterData,TAnimCore)
      language: CSharp
      name:
        CSharp: CanApplyEffectTo(CharacterData, TAnimCore)
        VB: CanApplyEffectTo(CharacterData, TAnimCore)
      nameWithType:
        CSharp: UniformCurveAnimation.CanApplyEffectTo(CharacterData, TAnimCore)
        VB: UniformCurveAnimation.CanApplyEffectTo(CharacterData, TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.UniformCurveAnimation.CanApplyEffectTo(CharacterData, TAnimCore)
        VB: Febucci.UI.Effects.UniformCurveAnimation.CanApplyEffectTo(CharacterData, TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: CanApplyEffectTo
        path: ''
        startLine: 8212
      syntax:
        content:
          CSharp: public override bool CanApplyEffectTo(CharacterData character, TAnimCore animator)
          VB: Public Overrides Function CanApplyEffectTo(character As CharacterData, animator As TAnimCore) As Boolean
        parameters:
        - id: character
          type: CharacterData
        - id: animator
          type: TAnimCore
        return:
          type: System.Boolean
      overload: Febucci.UI.Effects.UniformCurveAnimation.CanApplyEffectTo*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Effects.VertexCurveAnimation
    commentId: T:Febucci.UI.Effects.VertexCurveAnimation
    language: CSharp
    name:
      CSharp: VertexCurveAnimation
      VB: VertexCurveAnimation
    nameWithType:
      CSharp: VertexCurveAnimation
      VB: VertexCurveAnimation
    qualifiedName:
      CSharp: Febucci.UI.Effects.VertexCurveAnimation
      VB: Febucci.UI.Effects.VertexCurveAnimation
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: VertexCurveAnimation
      path: ''
      startLine: 8222
    syntax:
      content:
        CSharp: 'public sealed class VertexCurveAnimation : AnimationScriptableBase'
        VB: >-
          Public NotInheritable Class VertexCurveAnimation

              Inherits AnimationScriptableBase
    inheritance:
    - System.Object
    - Febucci.UI.Effects.AnimationScriptableBase
    implements:
    - ITagProvider
    inheritedMembers:
    - Febucci.UI.Effects.AnimationScriptableBase.TagID
    - Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
    - Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
    - Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(CharacterData@,TAnimCore)
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: Febucci.UI.Effects.VertexCurveAnimation.timeMode
      commentId: F:Febucci.UI.Effects.VertexCurveAnimation.timeMode
      language: CSharp
      name:
        CSharp: timeMode
        VB: timeMode
      nameWithType:
        CSharp: VertexCurveAnimation.timeMode
        VB: VertexCurveAnimation.timeMode
      qualifiedName:
        CSharp: Febucci.UI.Effects.VertexCurveAnimation.timeMode
        VB: Febucci.UI.Effects.VertexCurveAnimation.timeMode
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: timeMode
        path: ''
        startLine: 8227
      syntax:
        content:
          CSharp: public TimeMode timeMode
          VB: Public timeMode As TimeMode
        return:
          type: Febucci.UI.Effects.TimeMode
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.VertexCurveAnimation.emissionCurve
      commentId: F:Febucci.UI.Effects.VertexCurveAnimation.emissionCurve
      language: CSharp
      name:
        CSharp: emissionCurve
        VB: emissionCurve
      nameWithType:
        CSharp: VertexCurveAnimation.emissionCurve
        VB: VertexCurveAnimation.emissionCurve
      qualifiedName:
        CSharp: Febucci.UI.Effects.VertexCurveAnimation.emissionCurve
        VB: Febucci.UI.Effects.VertexCurveAnimation.emissionCurve
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: emissionCurve
        path: ''
        startLine: 8228
      syntax:
        content:
          CSharp: public EmissionCurve emissionCurve
          VB: Public emissionCurve As EmissionCurve
        return:
          type: Febucci.UI.Effects.EmissionCurve
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.VertexCurveAnimation.VertexData
      commentId: P:Febucci.UI.Effects.VertexCurveAnimation.VertexData
      language: CSharp
      name:
        CSharp: VertexData
        VB: VertexData
      nameWithType:
        CSharp: VertexCurveAnimation.VertexData
        VB: VertexCurveAnimation.VertexData
      qualifiedName:
        CSharp: Febucci.UI.Effects.VertexCurveAnimation.VertexData
        VB: Febucci.UI.Effects.VertexCurveAnimation.VertexData
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: VertexData
        path: ''
        startLine: 8231
      syntax:
        content:
          CSharp: public AnimationData[] VertexData { get; set; }
          VB: Public Property VertexData As AnimationData()
        parameters: []
        return:
          type: Febucci.UI.Effects.AnimationData[]
      overload: Febucci.UI.Effects.VertexCurveAnimation.VertexData*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Febucci.UI.Effects.VertexCurveAnimation.ResetContext(TAnimCore)
      commentId: M:Febucci.UI.Effects.VertexCurveAnimation.ResetContext(TAnimCore)
      language: CSharp
      name:
        CSharp: ResetContext(TAnimCore)
        VB: ResetContext(TAnimCore)
      nameWithType:
        CSharp: VertexCurveAnimation.ResetContext(TAnimCore)
        VB: VertexCurveAnimation.ResetContext(TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.VertexCurveAnimation.ResetContext(TAnimCore)
        VB: Febucci.UI.Effects.VertexCurveAnimation.ResetContext(TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ResetContext
        path: ''
        startLine: 8253
      syntax:
        content:
          CSharp: public override void ResetContext(TAnimCore animator)
          VB: Public Overrides Sub ResetContext(animator As TAnimCore)
        parameters:
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.VertexCurveAnimation.ResetContext*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.ResetContext(TAnimCore)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.VertexCurveAnimation.SetModifier(Febucci.UI.ModifierInfo)
      commentId: M:Febucci.UI.Effects.VertexCurveAnimation.SetModifier(Febucci.UI.ModifierInfo)
      language: CSharp
      name:
        CSharp: SetModifier(ModifierInfo)
        VB: SetModifier(ModifierInfo)
      nameWithType:
        CSharp: VertexCurveAnimation.SetModifier(ModifierInfo)
        VB: VertexCurveAnimation.SetModifier(ModifierInfo)
      qualifiedName:
        CSharp: Febucci.UI.Effects.VertexCurveAnimation.SetModifier(Febucci.UI.ModifierInfo)
        VB: Febucci.UI.Effects.VertexCurveAnimation.SetModifier(Febucci.UI.ModifierInfo)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: SetModifier
        path: ''
        startLine: 8260
      syntax:
        content:
          CSharp: public override void SetModifier(ModifierInfo modifier)
          VB: Public Overrides Sub SetModifier(modifier As ModifierInfo)
        parameters:
        - id: modifier
          type: Febucci.UI.ModifierInfo
      overload: Febucci.UI.Effects.VertexCurveAnimation.SetModifier*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.SetModifier(Febucci.UI.ModifierInfo)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.VertexCurveAnimation.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      commentId: M:Febucci.UI.Effects.VertexCurveAnimation.ApplyEffectTo(Febucci.UI.Core.CharacterData@,TAnimCore)
      language: CSharp
      name:
        CSharp: ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: ApplyEffectTo(ByRef CharacterData, TAnimCore)
      nameWithType:
        CSharp: VertexCurveAnimation.ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: VertexCurveAnimation.ApplyEffectTo(ByRef CharacterData, TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.VertexCurveAnimation.ApplyEffectTo(ref Febucci.UI.Core.CharacterData, TAnimCore)
        VB: Febucci.UI.Effects.VertexCurveAnimation.ApplyEffectTo(ByRef Febucci.UI.Core.CharacterData, TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ApplyEffectTo
        path: ''
        startLine: 8275
      syntax:
        content:
          CSharp: public override void ApplyEffectTo(ref CharacterData character, TAnimCore animator)
          VB: Public Overrides Sub ApplyEffectTo(ByRef character As CharacterData, animator As TAnimCore)
        parameters:
        - id: character
          type: Febucci.UI.Core.CharacterData
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.VertexCurveAnimation.ApplyEffectTo*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.VertexCurveAnimation.GetMaxDuration
      commentId: M:Febucci.UI.Effects.VertexCurveAnimation.GetMaxDuration
      language: CSharp
      name:
        CSharp: GetMaxDuration()
        VB: GetMaxDuration()
      nameWithType:
        CSharp: VertexCurveAnimation.GetMaxDuration()
        VB: VertexCurveAnimation.GetMaxDuration()
      qualifiedName:
        CSharp: Febucci.UI.Effects.VertexCurveAnimation.GetMaxDuration()
        VB: Febucci.UI.Effects.VertexCurveAnimation.GetMaxDuration()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: GetMaxDuration
        path: ''
        startLine: 8297
      syntax:
        content:
          CSharp: public override float GetMaxDuration()
          VB: Public Overrides Function GetMaxDuration As Single
        return:
          type: System.Single
      overload: Febucci.UI.Effects.VertexCurveAnimation.GetMaxDuration*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.GetMaxDuration
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Febucci.UI.Effects.VertexCurveAnimation.CanApplyEffectTo(CharacterData,TAnimCore)
      commentId: M:Febucci.UI.Effects.VertexCurveAnimation.CanApplyEffectTo(CharacterData,TAnimCore)
      language: CSharp
      name:
        CSharp: CanApplyEffectTo(CharacterData, TAnimCore)
        VB: CanApplyEffectTo(CharacterData, TAnimCore)
      nameWithType:
        CSharp: VertexCurveAnimation.CanApplyEffectTo(CharacterData, TAnimCore)
        VB: VertexCurveAnimation.CanApplyEffectTo(CharacterData, TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.VertexCurveAnimation.CanApplyEffectTo(CharacterData, TAnimCore)
        VB: Febucci.UI.Effects.VertexCurveAnimation.CanApplyEffectTo(CharacterData, TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: CanApplyEffectTo
        path: ''
        startLine: 8298
      syntax:
        content:
          CSharp: public override bool CanApplyEffectTo(CharacterData character, TAnimCore animator)
          VB: Public Overrides Function CanApplyEffectTo(character As CharacterData, animator As TAnimCore) As Boolean
        parameters:
        - id: character
          type: CharacterData
        - id: animator
          type: TAnimCore
        return:
          type: System.Boolean
      overload: Febucci.UI.Effects.VertexCurveAnimation.CanApplyEffectTo*
      overridden: Febucci.UI.Effects.AnimationScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Febucci.UI.Effects.AnimationData
    commentId: T:Febucci.UI.Effects.AnimationData
    language: CSharp
    name:
      CSharp: AnimationData
      VB: AnimationData
    nameWithType:
      CSharp: AnimationData
      VB: AnimationData
    qualifiedName:
      CSharp: Febucci.UI.Effects.AnimationData
      VB: Febucci.UI.Effects.AnimationData
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: AnimationData
      path: ''
      startLine: 8331
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class AnimationData
        VB: >-
          <Serializable>

          Public Class AnimationData
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Febucci.UI.Effects.AnimationData.movementX
      commentId: F:Febucci.UI.Effects.AnimationData.movementX
      language: CSharp
      name:
        CSharp: movementX
        VB: movementX
      nameWithType:
        CSharp: AnimationData.movementX
        VB: AnimationData.movementX
      qualifiedName:
        CSharp: Febucci.UI.Effects.AnimationData.movementX
        VB: Febucci.UI.Effects.AnimationData.movementX
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: movementX
        path: ''
        startLine: 8336
      syntax:
        content:
          CSharp: public FloatCurve movementX
          VB: Public movementX As FloatCurve
        return:
          type: Febucci.UI.Effects.FloatCurve
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.AnimationData.movementY
      commentId: F:Febucci.UI.Effects.AnimationData.movementY
      language: CSharp
      name:
        CSharp: movementY
        VB: movementY
      nameWithType:
        CSharp: AnimationData.movementY
        VB: AnimationData.movementY
      qualifiedName:
        CSharp: Febucci.UI.Effects.AnimationData.movementY
        VB: Febucci.UI.Effects.AnimationData.movementY
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: movementY
        path: ''
        startLine: 8337
      syntax:
        content:
          CSharp: public FloatCurve movementY
          VB: Public movementY As FloatCurve
        return:
          type: Febucci.UI.Effects.FloatCurve
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.AnimationData.movementZ
      commentId: F:Febucci.UI.Effects.AnimationData.movementZ
      language: CSharp
      name:
        CSharp: movementZ
        VB: movementZ
      nameWithType:
        CSharp: AnimationData.movementZ
        VB: AnimationData.movementZ
      qualifiedName:
        CSharp: Febucci.UI.Effects.AnimationData.movementZ
        VB: Febucci.UI.Effects.AnimationData.movementZ
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: movementZ
        path: ''
        startLine: 8338
      syntax:
        content:
          CSharp: public FloatCurve movementZ
          VB: Public movementZ As FloatCurve
        return:
          type: Febucci.UI.Effects.FloatCurve
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.AnimationData.scaleX
      commentId: F:Febucci.UI.Effects.AnimationData.scaleX
      language: CSharp
      name:
        CSharp: scaleX
        VB: scaleX
      nameWithType:
        CSharp: AnimationData.scaleX
        VB: AnimationData.scaleX
      qualifiedName:
        CSharp: Febucci.UI.Effects.AnimationData.scaleX
        VB: Febucci.UI.Effects.AnimationData.scaleX
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: scaleX
        path: ''
        startLine: 8341
      syntax:
        content:
          CSharp: public FloatCurve scaleX
          VB: Public scaleX As FloatCurve
        return:
          type: Febucci.UI.Effects.FloatCurve
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.AnimationData.scaleY
      commentId: F:Febucci.UI.Effects.AnimationData.scaleY
      language: CSharp
      name:
        CSharp: scaleY
        VB: scaleY
      nameWithType:
        CSharp: AnimationData.scaleY
        VB: AnimationData.scaleY
      qualifiedName:
        CSharp: Febucci.UI.Effects.AnimationData.scaleY
        VB: Febucci.UI.Effects.AnimationData.scaleY
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: scaleY
        path: ''
        startLine: 8342
      syntax:
        content:
          CSharp: public FloatCurve scaleY
          VB: Public scaleY As FloatCurve
        return:
          type: Febucci.UI.Effects.FloatCurve
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.AnimationData.rotX
      commentId: F:Febucci.UI.Effects.AnimationData.rotX
      language: CSharp
      name:
        CSharp: rotX
        VB: rotX
      nameWithType:
        CSharp: AnimationData.rotX
        VB: AnimationData.rotX
      qualifiedName:
        CSharp: Febucci.UI.Effects.AnimationData.rotX
        VB: Febucci.UI.Effects.AnimationData.rotX
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: rotX
        path: ''
        startLine: 8345
      syntax:
        content:
          CSharp: public FloatCurve rotX
          VB: Public rotX As FloatCurve
        return:
          type: Febucci.UI.Effects.FloatCurve
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.AnimationData.rotY
      commentId: F:Febucci.UI.Effects.AnimationData.rotY
      language: CSharp
      name:
        CSharp: rotY
        VB: rotY
      nameWithType:
        CSharp: AnimationData.rotY
        VB: AnimationData.rotY
      qualifiedName:
        CSharp: Febucci.UI.Effects.AnimationData.rotY
        VB: Febucci.UI.Effects.AnimationData.rotY
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: rotY
        path: ''
        startLine: 8346
      syntax:
        content:
          CSharp: public FloatCurve rotY
          VB: Public rotY As FloatCurve
        return:
          type: Febucci.UI.Effects.FloatCurve
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.AnimationData.rotZ
      commentId: F:Febucci.UI.Effects.AnimationData.rotZ
      language: CSharp
      name:
        CSharp: rotZ
        VB: rotZ
      nameWithType:
        CSharp: AnimationData.rotZ
        VB: AnimationData.rotZ
      qualifiedName:
        CSharp: Febucci.UI.Effects.AnimationData.rotZ
        VB: Febucci.UI.Effects.AnimationData.rotZ
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: rotZ
        path: ''
        startLine: 8347
      syntax:
        content:
          CSharp: public FloatCurve rotZ
          VB: Public rotZ As FloatCurve
        return:
          type: Febucci.UI.Effects.FloatCurve
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.AnimationData.colorCurve
      commentId: F:Febucci.UI.Effects.AnimationData.colorCurve
      language: CSharp
      name:
        CSharp: colorCurve
        VB: colorCurve
      nameWithType:
        CSharp: AnimationData.colorCurve
        VB: AnimationData.colorCurve
      qualifiedName:
        CSharp: Febucci.UI.Effects.AnimationData.colorCurve
        VB: Febucci.UI.Effects.AnimationData.colorCurve
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: colorCurve
        path: ''
        startLine: 8350
      syntax:
        content:
          CSharp: public ColorCurve colorCurve
          VB: Public colorCurve As ColorCurve
        return:
          type: Febucci.UI.Effects.ColorCurve
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.AnimationData.TryCalculatingMatrix(Febucci.UI.Core.CharacterData,System.Single,System.Single,Matrix4x4@,Vector3@)
      commentId: M:Febucci.UI.Effects.AnimationData.TryCalculatingMatrix(Febucci.UI.Core.CharacterData,System.Single,System.Single,Matrix4x4@,Vector3@)
      language: CSharp
      name:
        CSharp: TryCalculatingMatrix(CharacterData, Single, Single, out Matrix4x4, out Vector3)
        VB: TryCalculatingMatrix(CharacterData, Single, Single, ByRef Matrix4x4, ByRef Vector3)
      nameWithType:
        CSharp: AnimationData.TryCalculatingMatrix(CharacterData, Single, Single, out Matrix4x4, out Vector3)
        VB: AnimationData.TryCalculatingMatrix(CharacterData, Single, Single, ByRef Matrix4x4, ByRef Vector3)
      qualifiedName:
        CSharp: Febucci.UI.Effects.AnimationData.TryCalculatingMatrix(Febucci.UI.Core.CharacterData, System.Single, System.Single, out Matrix4x4, out Vector3)
        VB: Febucci.UI.Effects.AnimationData.TryCalculatingMatrix(Febucci.UI.Core.CharacterData, System.Single, System.Single, ByRef Matrix4x4, ByRef Vector3)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: TryCalculatingMatrix
        path: ''
        startLine: 8356
      syntax:
        content:
          CSharp: public bool TryCalculatingMatrix(CharacterData character, float timePassed, float weight, out Matrix4x4 matrix, out Vector3 offset)
          VB: Public Function TryCalculatingMatrix(character As CharacterData, timePassed As Single, weight As Single, ByRef matrix As Matrix4x4, ByRef offset As Vector3) As Boolean
        parameters:
        - id: character
          type: Febucci.UI.Core.CharacterData
        - id: timePassed
          type: System.Single
        - id: weight
          type: System.Single
        - id: matrix
          type: Matrix4x4
        - id: offset
          type: Vector3
        return:
          type: System.Boolean
      overload: Febucci.UI.Effects.AnimationData.TryCalculatingMatrix*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.AnimationData.TryCalculatingColor(Febucci.UI.Core.CharacterData,System.Single,System.Single,Color32@)
      commentId: M:Febucci.UI.Effects.AnimationData.TryCalculatingColor(Febucci.UI.Core.CharacterData,System.Single,System.Single,Color32@)
      language: CSharp
      name:
        CSharp: TryCalculatingColor(CharacterData, Single, Single, out Color32)
        VB: TryCalculatingColor(CharacterData, Single, Single, ByRef Color32)
      nameWithType:
        CSharp: AnimationData.TryCalculatingColor(CharacterData, Single, Single, out Color32)
        VB: AnimationData.TryCalculatingColor(CharacterData, Single, Single, ByRef Color32)
      qualifiedName:
        CSharp: Febucci.UI.Effects.AnimationData.TryCalculatingColor(Febucci.UI.Core.CharacterData, System.Single, System.Single, out Color32)
        VB: Febucci.UI.Effects.AnimationData.TryCalculatingColor(Febucci.UI.Core.CharacterData, System.Single, System.Single, ByRef Color32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: TryCalculatingColor
        path: ''
        startLine: 8401
      syntax:
        content:
          CSharp: public bool TryCalculatingColor(CharacterData character, float timePassed, float weight, out Color32 color)
          VB: Public Function TryCalculatingColor(character As CharacterData, timePassed As Single, weight As Single, ByRef color As Color32) As Boolean
        parameters:
        - id: character
          type: Febucci.UI.Core.CharacterData
        - id: timePassed
          type: System.Single
        - id: weight
          type: System.Single
        - id: color
          type: Color32
        return:
          type: System.Boolean
      overload: Febucci.UI.Effects.AnimationData.TryCalculatingColor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Febucci.UI.Effects.ColorCurveProperty
    commentId: T:Febucci.UI.Effects.ColorCurveProperty
    language: CSharp
    name:
      CSharp: ColorCurveProperty
      VB: ColorCurveProperty
    nameWithType:
      CSharp: ColorCurveProperty
      VB: ColorCurveProperty
    qualifiedName:
      CSharp: Febucci.UI.Effects.ColorCurveProperty
      VB: Febucci.UI.Effects.ColorCurveProperty
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: ColorCurveProperty
      path: ''
      startLine: 8418
    syntax:
      content:
        CSharp: 'public class ColorCurveProperty : PropertyAttribute'
        VB: >-
          Public Class ColorCurveProperty

              Inherits PropertyAttribute
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Febucci.UI.Effects.ColorCurve
    commentId: T:Febucci.UI.Effects.ColorCurve
    language: CSharp
    name:
      CSharp: ColorCurve
      VB: ColorCurve
    nameWithType:
      CSharp: ColorCurve
      VB: ColorCurve
    qualifiedName:
      CSharp: Febucci.UI.Effects.ColorCurve
      VB: Febucci.UI.Effects.ColorCurve
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: ColorCurve
      path: ''
      startLine: 8423
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public struct ColorCurve
        VB: >-
          <Serializable>

          Public Structure ColorCurve
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Febucci.UI.Effects.ColorCurve.enabled
      commentId: F:Febucci.UI.Effects.ColorCurve.enabled
      language: CSharp
      name:
        CSharp: enabled
        VB: enabled
      nameWithType:
        CSharp: ColorCurve.enabled
        VB: ColorCurve.enabled
      qualifiedName:
        CSharp: Febucci.UI.Effects.ColorCurve.enabled
        VB: Febucci.UI.Effects.ColorCurve.enabled
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: enabled
        path: ''
        startLine: 8426
      syntax:
        content:
          CSharp: public bool enabled
          VB: Public enabled As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.ColorCurve.colorOverTime
      commentId: F:Febucci.UI.Effects.ColorCurve.colorOverTime
      language: CSharp
      name:
        CSharp: colorOverTime
        VB: colorOverTime
      nameWithType:
        CSharp: ColorCurve.colorOverTime
        VB: ColorCurve.colorOverTime
      qualifiedName:
        CSharp: Febucci.UI.Effects.ColorCurve.colorOverTime
        VB: Febucci.UI.Effects.ColorCurve.colorOverTime
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: colorOverTime
        path: ''
        startLine: 8428
      syntax:
        content:
          CSharp: public Gradient colorOverTime
          VB: Public colorOverTime As Gradient
        return:
          type: Gradient
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.ColorCurve.waveSize
      commentId: F:Febucci.UI.Effects.ColorCurve.waveSize
      language: CSharp
      name:
        CSharp: waveSize
        VB: waveSize
      nameWithType:
        CSharp: ColorCurve.waveSize
        VB: ColorCurve.waveSize
      qualifiedName:
        CSharp: Febucci.UI.Effects.ColorCurve.waveSize
        VB: Febucci.UI.Effects.ColorCurve.waveSize
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: waveSize
        path: ''
        startLine: 8429
      syntax:
        content:
          CSharp: public float waveSize
          VB: Public waveSize As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.ColorCurve.duration
      commentId: F:Febucci.UI.Effects.ColorCurve.duration
      language: CSharp
      name:
        CSharp: duration
        VB: duration
      nameWithType:
        CSharp: ColorCurve.duration
        VB: ColorCurve.duration
      qualifiedName:
        CSharp: Febucci.UI.Effects.ColorCurve.duration
        VB: Febucci.UI.Effects.ColorCurve.duration
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: duration
        path: ''
        startLine: 8430
      syntax:
        content:
          CSharp: public float duration
          VB: Public duration As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.ColorCurve.#ctor(System.Single)
      commentId: M:Febucci.UI.Effects.ColorCurve.#ctor(System.Single)
      language: CSharp
      name:
        CSharp: ColorCurve(Single)
        VB: ColorCurve(Single)
      nameWithType:
        CSharp: ColorCurve.ColorCurve(Single)
        VB: ColorCurve.ColorCurve(Single)
      qualifiedName:
        CSharp: Febucci.UI.Effects.ColorCurve.ColorCurve(System.Single)
        VB: Febucci.UI.Effects.ColorCurve.ColorCurve(System.Single)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: .ctor
        path: ''
        startLine: 8432
      syntax:
        content:
          CSharp: public ColorCurve(float waveSize)
          VB: Public Sub New(waveSize As Single)
        parameters:
        - id: waveSize
          type: System.Single
      overload: Febucci.UI.Effects.ColorCurve.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.ColorCurve.Evaluate(System.Single,System.Int32)
      commentId: M:Febucci.UI.Effects.ColorCurve.Evaluate(System.Single,System.Int32)
      language: CSharp
      name:
        CSharp: Evaluate(Single, Int32)
        VB: Evaluate(Single, Int32)
      nameWithType:
        CSharp: ColorCurve.Evaluate(Single, Int32)
        VB: ColorCurve.Evaluate(Single, Int32)
      qualifiedName:
        CSharp: Febucci.UI.Effects.ColorCurve.Evaluate(System.Single, System.Int32)
        VB: Febucci.UI.Effects.ColorCurve.Evaluate(System.Single, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: Evaluate
        path: ''
        startLine: 8454
      syntax:
        content:
          CSharp: public Color32 Evaluate(float time, int charIndex)
          VB: Public Function Evaluate(time As Single, charIndex As Integer) As Color32
        parameters:
        - id: time
          type: System.Single
        - id: charIndex
          type: System.Int32
        return:
          type: Color32
      overload: Febucci.UI.Effects.ColorCurve.Evaluate*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Febucci.UI.Effects.EmissionCurveProperty
    commentId: T:Febucci.UI.Effects.EmissionCurveProperty
    language: CSharp
    name:
      CSharp: EmissionCurveProperty
      VB: EmissionCurveProperty
    nameWithType:
      CSharp: EmissionCurveProperty
      VB: EmissionCurveProperty
    qualifiedName:
      CSharp: Febucci.UI.Effects.EmissionCurveProperty
      VB: Febucci.UI.Effects.EmissionCurveProperty
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: EmissionCurveProperty
      path: ''
      startLine: 8465
    syntax:
      content:
        CSharp: 'public class EmissionCurveProperty : PropertyAttribute'
        VB: >-
          Public Class EmissionCurveProperty

              Inherits PropertyAttribute
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Febucci.UI.Effects.EmissionCurve
    commentId: T:Febucci.UI.Effects.EmissionCurve
    language: CSharp
    name:
      CSharp: EmissionCurve
      VB: EmissionCurve
    nameWithType:
      CSharp: EmissionCurve
      VB: EmissionCurve
    qualifiedName:
      CSharp: Febucci.UI.Effects.EmissionCurve
      VB: Febucci.UI.Effects.EmissionCurve
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: EmissionCurve
      path: ''
      startLine: 8470
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class EmissionCurve
        VB: >-
          <Serializable>

          Public Class EmissionCurve
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Febucci.UI.Effects.EmissionCurve.cycles
      commentId: F:Febucci.UI.Effects.EmissionCurve.cycles
      language: CSharp
      name:
        CSharp: cycles
        VB: cycles
      nameWithType:
        CSharp: EmissionCurve.cycles
        VB: EmissionCurve.cycles
      qualifiedName:
        CSharp: Febucci.UI.Effects.EmissionCurve.cycles
        VB: Febucci.UI.Effects.EmissionCurve.cycles
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: cycles
        path: ''
        startLine: 8473
      syntax:
        content:
          CSharp: public int cycles
          VB: Public cycles As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.EmissionCurve.duration
      commentId: F:Febucci.UI.Effects.EmissionCurve.duration
      language: CSharp
      name:
        CSharp: duration
        VB: duration
      nameWithType:
        CSharp: EmissionCurve.duration
        VB: EmissionCurve.duration
      qualifiedName:
        CSharp: Febucci.UI.Effects.EmissionCurve.duration
        VB: Febucci.UI.Effects.EmissionCurve.duration
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: duration
        path: ''
        startLine: 8474
      syntax:
        content:
          CSharp: public float duration
          VB: Public duration As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.EmissionCurve.GetMaxDuration
      commentId: M:Febucci.UI.Effects.EmissionCurve.GetMaxDuration
      language: CSharp
      name:
        CSharp: GetMaxDuration()
        VB: GetMaxDuration()
      nameWithType:
        CSharp: EmissionCurve.GetMaxDuration()
        VB: EmissionCurve.GetMaxDuration()
      qualifiedName:
        CSharp: Febucci.UI.Effects.EmissionCurve.GetMaxDuration()
        VB: Febucci.UI.Effects.EmissionCurve.GetMaxDuration()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: GetMaxDuration
        path: ''
        startLine: 8475
      syntax:
        content:
          CSharp: public float GetMaxDuration()
          VB: Public Function GetMaxDuration As Single
        return:
          type: System.Single
      overload: Febucci.UI.Effects.EmissionCurve.GetMaxDuration*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.EmissionCurve.weightOverTime
      commentId: F:Febucci.UI.Effects.EmissionCurve.weightOverTime
      language: CSharp
      name:
        CSharp: weightOverTime
        VB: weightOverTime
      nameWithType:
        CSharp: EmissionCurve.weightOverTime
        VB: EmissionCurve.weightOverTime
      qualifiedName:
        CSharp: Febucci.UI.Effects.EmissionCurve.weightOverTime
        VB: Febucci.UI.Effects.EmissionCurve.weightOverTime
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: weightOverTime
        path: ''
        startLine: 8476
      syntax:
        content:
          CSharp: public AnimationCurve weightOverTime
          VB: Public weightOverTime As AnimationCurve
        return:
          type: AnimationCurve
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.EmissionCurve.#ctor
      commentId: M:Febucci.UI.Effects.EmissionCurve.#ctor
      language: CSharp
      name:
        CSharp: EmissionCurve()
        VB: EmissionCurve()
      nameWithType:
        CSharp: EmissionCurve.EmissionCurve()
        VB: EmissionCurve.EmissionCurve()
      qualifiedName:
        CSharp: Febucci.UI.Effects.EmissionCurve.EmissionCurve()
        VB: Febucci.UI.Effects.EmissionCurve.EmissionCurve()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: .ctor
        path: ''
        startLine: 8477
      syntax:
        content:
          CSharp: public EmissionCurve()
          VB: Public Sub New
      overload: Febucci.UI.Effects.EmissionCurve.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.EmissionCurve.#ctor(Keyframe[])
      commentId: M:Febucci.UI.Effects.EmissionCurve.#ctor(Keyframe[])
      language: CSharp
      name:
        CSharp: EmissionCurve(Keyframe[])
        VB: EmissionCurve(Keyframe())
      nameWithType:
        CSharp: EmissionCurve.EmissionCurve(Keyframe[])
        VB: EmissionCurve.EmissionCurve(Keyframe())
      qualifiedName:
        CSharp: Febucci.UI.Effects.EmissionCurve.EmissionCurve(Keyframe[])
        VB: Febucci.UI.Effects.EmissionCurve.EmissionCurve(Keyframe())
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: .ctor
        path: ''
        startLine: 8489
      syntax:
        content:
          CSharp: public EmissionCurve(params Keyframe[] keyframes)
          VB: Public Sub New(ParamArray keyframes As Keyframe())
        parameters:
        - id: keyframes
          type: Keyframe[]
      overload: Febucci.UI.Effects.EmissionCurve.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.EmissionCurve.Evaluate(System.Single)
      commentId: M:Febucci.UI.Effects.EmissionCurve.Evaluate(System.Single)
      language: CSharp
      name:
        CSharp: Evaluate(Single)
        VB: Evaluate(Single)
      nameWithType:
        CSharp: EmissionCurve.Evaluate(Single)
        VB: EmissionCurve.Evaluate(Single)
      qualifiedName:
        CSharp: Febucci.UI.Effects.EmissionCurve.Evaluate(System.Single)
        VB: Febucci.UI.Effects.EmissionCurve.Evaluate(System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: Evaluate
        path: ''
        startLine: 8496
      syntax:
        content:
          CSharp: public float Evaluate(float timePassed)
          VB: Public Function Evaluate(timePassed As Single) As Single
        parameters:
        - id: timePassed
          type: System.Single
        return:
          type: System.Single
      overload: Febucci.UI.Effects.EmissionCurve.Evaluate*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Febucci.UI.Effects.FloatCurveProperty
    commentId: T:Febucci.UI.Effects.FloatCurveProperty
    language: CSharp
    name:
      CSharp: FloatCurveProperty
      VB: FloatCurveProperty
    nameWithType:
      CSharp: FloatCurveProperty
      VB: FloatCurveProperty
    qualifiedName:
      CSharp: Febucci.UI.Effects.FloatCurveProperty
      VB: Febucci.UI.Effects.FloatCurveProperty
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: FloatCurveProperty
      path: ''
      startLine: 8509
    syntax:
      content:
        CSharp: 'public class FloatCurveProperty : PropertyAttribute'
        VB: >-
          Public Class FloatCurveProperty

              Inherits PropertyAttribute
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Febucci.UI.Effects.FloatCurve
    commentId: T:Febucci.UI.Effects.FloatCurve
    language: CSharp
    name:
      CSharp: FloatCurve
      VB: FloatCurve
    nameWithType:
      CSharp: FloatCurve
      VB: FloatCurve
    qualifiedName:
      CSharp: Febucci.UI.Effects.FloatCurve
      VB: Febucci.UI.Effects.FloatCurve
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: FloatCurve
      path: ''
      startLine: 8514
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public struct FloatCurve
        VB: >-
          <Serializable>

          Public Structure FloatCurve
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Febucci.UI.Effects.FloatCurve.enabled
      commentId: F:Febucci.UI.Effects.FloatCurve.enabled
      language: CSharp
      name:
        CSharp: enabled
        VB: enabled
      nameWithType:
        CSharp: FloatCurve.enabled
        VB: FloatCurve.enabled
      qualifiedName:
        CSharp: Febucci.UI.Effects.FloatCurve.enabled
        VB: Febucci.UI.Effects.FloatCurve.enabled
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: enabled
        path: ''
        startLine: 8517
      syntax:
        content:
          CSharp: public bool enabled
          VB: Public enabled As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.FloatCurve.weightOverTime
      commentId: F:Febucci.UI.Effects.FloatCurve.weightOverTime
      language: CSharp
      name:
        CSharp: weightOverTime
        VB: weightOverTime
      nameWithType:
        CSharp: FloatCurve.weightOverTime
        VB: FloatCurve.weightOverTime
      qualifiedName:
        CSharp: Febucci.UI.Effects.FloatCurve.weightOverTime
        VB: Febucci.UI.Effects.FloatCurve.weightOverTime
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: weightOverTime
        path: ''
        startLine: 8520
      syntax:
        content:
          CSharp: public AnimationCurve weightOverTime
          VB: Public weightOverTime As AnimationCurve
        return:
          type: AnimationCurve
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.FloatCurve.amplitude
      commentId: F:Febucci.UI.Effects.FloatCurve.amplitude
      language: CSharp
      name:
        CSharp: amplitude
        VB: amplitude
      nameWithType:
        CSharp: FloatCurve.amplitude
        VB: FloatCurve.amplitude
      qualifiedName:
        CSharp: Febucci.UI.Effects.FloatCurve.amplitude
        VB: Febucci.UI.Effects.FloatCurve.amplitude
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: amplitude
        path: ''
        startLine: 8521
      syntax:
        content:
          CSharp: public float amplitude
          VB: Public amplitude As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.FloatCurve.waveSize
      commentId: F:Febucci.UI.Effects.FloatCurve.waveSize
      language: CSharp
      name:
        CSharp: waveSize
        VB: waveSize
      nameWithType:
        CSharp: FloatCurve.waveSize
        VB: FloatCurve.waveSize
      qualifiedName:
        CSharp: Febucci.UI.Effects.FloatCurve.waveSize
        VB: Febucci.UI.Effects.FloatCurve.waveSize
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: waveSize
        path: ''
        startLine: 8522
      syntax:
        content:
          CSharp: public float waveSize
          VB: Public waveSize As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.FloatCurve.#ctor(System.Single,System.Single,System.Single)
      commentId: M:Febucci.UI.Effects.FloatCurve.#ctor(System.Single,System.Single,System.Single)
      language: CSharp
      name:
        CSharp: FloatCurve(Single, Single, Single)
        VB: FloatCurve(Single, Single, Single)
      nameWithType:
        CSharp: FloatCurve.FloatCurve(Single, Single, Single)
        VB: FloatCurve.FloatCurve(Single, Single, Single)
      qualifiedName:
        CSharp: Febucci.UI.Effects.FloatCurve.FloatCurve(System.Single, System.Single, System.Single)
        VB: Febucci.UI.Effects.FloatCurve.FloatCurve(System.Single, System.Single, System.Single)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: .ctor
        path: ''
        startLine: 8524
      syntax:
        content:
          CSharp: public FloatCurve(float amplitude, float waveSize, float defaultAmplitude)
          VB: Public Sub New(amplitude As Single, waveSize As Single, defaultAmplitude As Single)
        parameters:
        - id: amplitude
          type: System.Single
        - id: waveSize
          type: System.Single
        - id: defaultAmplitude
          type: System.Single
      overload: Febucci.UI.Effects.FloatCurve.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.FloatCurve.Evaluate(System.Single,System.Int32)
      commentId: M:Febucci.UI.Effects.FloatCurve.Evaluate(System.Single,System.Int32)
      language: CSharp
      name:
        CSharp: Evaluate(Single, Int32)
        VB: Evaluate(Single, Int32)
      nameWithType:
        CSharp: FloatCurve.Evaluate(Single, Int32)
        VB: FloatCurve.Evaluate(Single, Int32)
      qualifiedName:
        CSharp: Febucci.UI.Effects.FloatCurve.Evaluate(System.Single, System.Int32)
        VB: Febucci.UI.Effects.FloatCurve.Evaluate(System.Single, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: Evaluate
        path: ''
        startLine: 8535
      syntax:
        content:
          CSharp: public float Evaluate(float passedTime, int charIndex)
          VB: Public Function Evaluate(passedTime As Single, charIndex As Integer) As Single
        parameters:
        - id: passedTime
          type: System.Single
        - id: charIndex
          type: System.Int32
        return:
          type: System.Single
      overload: Febucci.UI.Effects.FloatCurve.Evaluate*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Febucci.UI.Effects.TimeMode
    commentId: T:Febucci.UI.Effects.TimeMode
    language: CSharp
    name:
      CSharp: TimeMode
      VB: TimeMode
    nameWithType:
      CSharp: TimeMode
      VB: TimeMode
    qualifiedName:
      CSharp: Febucci.UI.Effects.TimeMode
      VB: Febucci.UI.Effects.TimeMode
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: TimeMode
      path: ''
      startLine: 8545
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public struct TimeMode
        VB: >-
          <Serializable>

          Public Structure TimeMode
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Febucci.UI.Effects.TimeMode.startDelay
      commentId: F:Febucci.UI.Effects.TimeMode.startDelay
      language: CSharp
      name:
        CSharp: startDelay
        VB: startDelay
      nameWithType:
        CSharp: TimeMode.startDelay
        VB: TimeMode.startDelay
      qualifiedName:
        CSharp: Febucci.UI.Effects.TimeMode.startDelay
        VB: Febucci.UI.Effects.TimeMode.startDelay
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: startDelay
        path: ''
        startLine: 8548
      syntax:
        content:
          CSharp: public float startDelay
          VB: Public startDelay As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.TimeMode.useUniformTime
      commentId: F:Febucci.UI.Effects.TimeMode.useUniformTime
      language: CSharp
      name:
        CSharp: useUniformTime
        VB: useUniformTime
      nameWithType:
        CSharp: TimeMode.useUniformTime
        VB: TimeMode.useUniformTime
      qualifiedName:
        CSharp: Febucci.UI.Effects.TimeMode.useUniformTime
        VB: Febucci.UI.Effects.TimeMode.useUniformTime
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: useUniformTime
        path: ''
        startLine: 8549
      syntax:
        content:
          CSharp: public bool useUniformTime
          VB: Public useUniformTime As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.TimeMode.waveSize
      commentId: F:Febucci.UI.Effects.TimeMode.waveSize
      language: CSharp
      name:
        CSharp: waveSize
        VB: waveSize
      nameWithType:
        CSharp: TimeMode.waveSize
        VB: TimeMode.waveSize
      qualifiedName:
        CSharp: Febucci.UI.Effects.TimeMode.waveSize
        VB: Febucci.UI.Effects.TimeMode.waveSize
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: waveSize
        path: ''
        startLine: 8550
      syntax:
        content:
          CSharp: public float waveSize
          VB: Public waveSize As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.TimeMode.timeSpeed
      commentId: F:Febucci.UI.Effects.TimeMode.timeSpeed
      language: CSharp
      name:
        CSharp: timeSpeed
        VB: timeSpeed
      nameWithType:
        CSharp: TimeMode.timeSpeed
        VB: TimeMode.timeSpeed
      qualifiedName:
        CSharp: Febucci.UI.Effects.TimeMode.timeSpeed
        VB: Febucci.UI.Effects.TimeMode.timeSpeed
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: timeSpeed
        path: ''
        startLine: 8551
      syntax:
        content:
          CSharp: public float timeSpeed
          VB: Public timeSpeed As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.TimeMode.#ctor(System.Boolean)
      commentId: M:Febucci.UI.Effects.TimeMode.#ctor(System.Boolean)
      language: CSharp
      name:
        CSharp: TimeMode(Boolean)
        VB: TimeMode(Boolean)
      nameWithType:
        CSharp: TimeMode.TimeMode(Boolean)
        VB: TimeMode.TimeMode(Boolean)
      qualifiedName:
        CSharp: Febucci.UI.Effects.TimeMode.TimeMode(System.Boolean)
        VB: Febucci.UI.Effects.TimeMode.TimeMode(System.Boolean)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: .ctor
        path: ''
        startLine: 8553
      syntax:
        content:
          CSharp: public TimeMode(bool useUniformTime)
          VB: Public Sub New(useUniformTime As Boolean)
        parameters:
        - id: useUniformTime
          type: System.Boolean
      overload: Febucci.UI.Effects.TimeMode.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.TimeMode.GetTime(System.Single,System.Single,System.Int32)
      commentId: M:Febucci.UI.Effects.TimeMode.GetTime(System.Single,System.Single,System.Int32)
      language: CSharp
      name:
        CSharp: GetTime(Single, Single, Int32)
        VB: GetTime(Single, Single, Int32)
      nameWithType:
        CSharp: TimeMode.GetTime(Single, Single, Int32)
        VB: TimeMode.GetTime(Single, Single, Int32)
      qualifiedName:
        CSharp: Febucci.UI.Effects.TimeMode.GetTime(System.Single, System.Single, System.Int32)
        VB: Febucci.UI.Effects.TimeMode.GetTime(System.Single, System.Single, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: GetTime
        path: ''
        startLine: 8563
      syntax:
        content:
          CSharp: public float GetTime(float animatorTime, float charTime, int charIndex)
          VB: Public Function GetTime(animatorTime As Single, charTime As Single, charIndex As Integer) As Single
        parameters:
        - id: animatorTime
          type: System.Single
        - id: charTime
          type: System.Single
        - id: charIndex
          type: System.Int32
        return:
          type: System.Single
      overload: Febucci.UI.Effects.TimeMode.GetTime*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Febucci.UI.Effects.AnimationScriptableBase
    commentId: T:Febucci.UI.Effects.AnimationScriptableBase
    language: CSharp
    name:
      CSharp: AnimationScriptableBase
      VB: AnimationScriptableBase
    nameWithType:
      CSharp: AnimationScriptableBase
      VB: AnimationScriptableBase
    qualifiedName:
      CSharp: Febucci.UI.Effects.AnimationScriptableBase
      VB: Febucci.UI.Effects.AnimationScriptableBase
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: AnimationScriptableBase
      path: ''
      startLine: 8580
    summary: "\nBase class for animating letters in Text Animator\n"
    example: []
    syntax:
      content:
        CSharp: 'public abstract class AnimationScriptableBase : ScriptableObject'
        VB: >-
          Public MustInherit Class AnimationScriptableBase

              Inherits ScriptableObject
    inheritance:
    - System.Object
    implements:
    - ITagProvider
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: Febucci.UI.Effects.AnimationScriptableBase.TagID
      commentId: P:Febucci.UI.Effects.AnimationScriptableBase.TagID
      language: CSharp
      name:
        CSharp: TagID
        VB: TagID
      nameWithType:
        CSharp: AnimationScriptableBase.TagID
        VB: AnimationScriptableBase.TagID
      qualifiedName:
        CSharp: Febucci.UI.Effects.AnimationScriptableBase.TagID
        VB: Febucci.UI.Effects.AnimationScriptableBase.TagID
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: TagID
        path: ''
        startLine: 8583
      syntax:
        content:
          CSharp: public string TagID { get; set; }
          VB: Public Property TagID As String
        parameters: []
        return:
          type: System.String
      overload: Febucci.UI.Effects.AnimationScriptableBase.TagID*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
      commentId: M:Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
      language: CSharp
      name:
        CSharp: InitializeOnce()
        VB: InitializeOnce()
      nameWithType:
        CSharp: AnimationScriptableBase.InitializeOnce()
        VB: AnimationScriptableBase.InitializeOnce()
      qualifiedName:
        CSharp: Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce()
        VB: Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: InitializeOnce
        path: ''
        startLine: 8591
      syntax:
        content:
          CSharp: public void InitializeOnce()
          VB: Public Sub InitializeOnce
      overload: Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
      commentId: M:Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
      language: CSharp
      name:
        CSharp: OnInitialize()
        VB: OnInitialize()
      nameWithType:
        CSharp: AnimationScriptableBase.OnInitialize()
        VB: AnimationScriptableBase.OnInitialize()
      qualifiedName:
        CSharp: Febucci.UI.Effects.AnimationScriptableBase.OnInitialize()
        VB: Febucci.UI.Effects.AnimationScriptableBase.OnInitialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: OnInitialize
        path: ''
        startLine: 8600
      syntax:
        content:
          CSharp: protected virtual void OnInitialize()
          VB: Protected Overridable Sub OnInitialize
      overload: Febucci.UI.Effects.AnimationScriptableBase.OnInitialize*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: Febucci.UI.Effects.AnimationScriptableBase.ResetContext(TAnimCore)
      commentId: M:Febucci.UI.Effects.AnimationScriptableBase.ResetContext(TAnimCore)
      language: CSharp
      name:
        CSharp: ResetContext(TAnimCore)
        VB: ResetContext(TAnimCore)
      nameWithType:
        CSharp: AnimationScriptableBase.ResetContext(TAnimCore)
        VB: AnimationScriptableBase.ResetContext(TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.AnimationScriptableBase.ResetContext(TAnimCore)
        VB: Febucci.UI.Effects.AnimationScriptableBase.ResetContext(TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ResetContext
        path: ''
        startLine: 8613
      summary: "\nResets the effect context (base variables) for every region, before applying modifiers (if any) with <xref href=\"Febucci.UI.Effects.AnimationScriptableBase.SetModifier(Febucci.UI.ModifierInfo)\" data-throw-if-not-resolved=\"false\"></xref>\n"
      example: []
      syntax:
        content:
          CSharp: public abstract void ResetContext(TAnimCore animator)
          VB: Public MustOverride Sub ResetContext(animator As TAnimCore)
        parameters:
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.AnimationScriptableBase.ResetContext*
      modifiers:
        CSharp:
        - public
        - abstract
        VB:
        - Public
        - MustOverride
      references:
        Febucci.UI.Effects.AnimationScriptableBase.SetModifier(Febucci.UI.ModifierInfo): 
    - id: Febucci.UI.Effects.AnimationScriptableBase.SetModifier(Febucci.UI.ModifierInfo)
      commentId: M:Febucci.UI.Effects.AnimationScriptableBase.SetModifier(Febucci.UI.ModifierInfo)
      language: CSharp
      name:
        CSharp: SetModifier(ModifierInfo)
        VB: SetModifier(ModifierInfo)
      nameWithType:
        CSharp: AnimationScriptableBase.SetModifier(ModifierInfo)
        VB: AnimationScriptableBase.SetModifier(ModifierInfo)
      qualifiedName:
        CSharp: Febucci.UI.Effects.AnimationScriptableBase.SetModifier(Febucci.UI.ModifierInfo)
        VB: Febucci.UI.Effects.AnimationScriptableBase.SetModifier(Febucci.UI.ModifierInfo)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: SetModifier
        path: ''
        startLine: 8619
      summary: "\nChanges an effect&apos; base variable based on the passed parameter.\n"
      example: []
      syntax:
        content:
          CSharp: public virtual void SetModifier(ModifierInfo modifier)
          VB: Public Overridable Sub SetModifier(modifier As ModifierInfo)
        parameters:
        - id: modifier
          type: Febucci.UI.ModifierInfo
          description: ''
      overload: Febucci.UI.Effects.AnimationScriptableBase.SetModifier*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: Febucci.UI.Effects.AnimationScriptableBase.GetMaxDuration
      commentId: M:Febucci.UI.Effects.AnimationScriptableBase.GetMaxDuration
      language: CSharp
      name:
        CSharp: GetMaxDuration()
        VB: GetMaxDuration()
      nameWithType:
        CSharp: AnimationScriptableBase.GetMaxDuration()
        VB: AnimationScriptableBase.GetMaxDuration()
      qualifiedName:
        CSharp: Febucci.UI.Effects.AnimationScriptableBase.GetMaxDuration()
        VB: Febucci.UI.Effects.AnimationScriptableBase.GetMaxDuration()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: GetMaxDuration
        path: ''
        startLine: 8620
      syntax:
        content:
          CSharp: public abstract float GetMaxDuration()
          VB: Public MustOverride Function GetMaxDuration As Single
        return:
          type: System.Single
      overload: Febucci.UI.Effects.AnimationScriptableBase.GetMaxDuration*
      modifiers:
        CSharp:
        - public
        - abstract
        VB:
        - Public
        - MustOverride
    - id: Febucci.UI.Effects.AnimationScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
      commentId: M:Febucci.UI.Effects.AnimationScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
      language: CSharp
      name:
        CSharp: CanApplyEffectTo(CharacterData, TAnimCore)
        VB: CanApplyEffectTo(CharacterData, TAnimCore)
      nameWithType:
        CSharp: AnimationScriptableBase.CanApplyEffectTo(CharacterData, TAnimCore)
        VB: AnimationScriptableBase.CanApplyEffectTo(CharacterData, TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.AnimationScriptableBase.CanApplyEffectTo(CharacterData, TAnimCore)
        VB: Febucci.UI.Effects.AnimationScriptableBase.CanApplyEffectTo(CharacterData, TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: CanApplyEffectTo
        path: ''
        startLine: 8621
      syntax:
        content:
          CSharp: public abstract bool CanApplyEffectTo(CharacterData character, TAnimCore animator)
          VB: Public MustOverride Function CanApplyEffectTo(character As CharacterData, animator As TAnimCore) As Boolean
        parameters:
        - id: character
          type: CharacterData
        - id: animator
          type: TAnimCore
        return:
          type: System.Boolean
      overload: Febucci.UI.Effects.AnimationScriptableBase.CanApplyEffectTo*
      modifiers:
        CSharp:
        - public
        - abstract
        VB:
        - Public
        - MustOverride
    - id: Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(CharacterData@,TAnimCore)
      commentId: M:Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(CharacterData@,TAnimCore)
      language: CSharp
      name:
        CSharp: ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: ApplyEffectTo(ByRef CharacterData, TAnimCore)
      nameWithType:
        CSharp: AnimationScriptableBase.ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: AnimationScriptableBase.ApplyEffectTo(ByRef CharacterData, TAnimCore)
      qualifiedName:
        CSharp: Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(ref CharacterData, TAnimCore)
        VB: Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(ByRef CharacterData, TAnimCore)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: ApplyEffectTo
        path: ''
        startLine: 8622
      syntax:
        content:
          CSharp: public abstract void ApplyEffectTo(ref CharacterData character, TAnimCore animator)
          VB: Public MustOverride Sub ApplyEffectTo(ByRef character As CharacterData, animator As TAnimCore)
        parameters:
        - id: character
          type: CharacterData
        - id: animator
          type: TAnimCore
      overload: Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo*
      modifiers:
        CSharp:
        - public
        - abstract
        VB:
        - Public
        - MustOverride
  - id: Febucci.UI.Effects.AnimationsDatabase
    commentId: T:Febucci.UI.Effects.AnimationsDatabase
    language: CSharp
    name:
      CSharp: AnimationsDatabase
      VB: AnimationsDatabase
    nameWithType:
      CSharp: AnimationsDatabase
      VB: AnimationsDatabase
    qualifiedName:
      CSharp: Febucci.UI.Effects.AnimationsDatabase
      VB: Febucci.UI.Effects.AnimationsDatabase
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: AnimationsDatabase
      path: ''
      startLine: 8633
    summary: "\nContains animations that will be recognized and used by Text Animator\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class AnimationsDatabase : Database<AnimationScriptableBase>
        VB: >-
          <Serializable>

          Public Class AnimationsDatabase

              Inherits Database(Of AnimationScriptableBase)
    inheritance:
    - System.Object
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Febucci.UI.Effects.Tween
    commentId: T:Febucci.UI.Effects.Tween
    language: CSharp
    name:
      CSharp: Tween
      VB: Tween
    nameWithType:
      CSharp: Tween
      VB: Tween
    qualifiedName:
      CSharp: Febucci.UI.Effects.Tween
      VB: Febucci.UI.Effects.Tween
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Effects
    source:
      id: Tween
      path: ''
      startLine: 9174
    summary: "\nHelper class used to interpolate effects.\n"
    example: []
    syntax:
      content:
        CSharp: public static class Tween
        VB: Public Module Tween
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: Febucci.UI.Effects.Tween.EaseIn(System.Single)
      commentId: M:Febucci.UI.Effects.Tween.EaseIn(System.Single)
      language: CSharp
      name:
        CSharp: EaseIn(Single)
        VB: EaseIn(Single)
      nameWithType:
        CSharp: Tween.EaseIn(Single)
        VB: Tween.EaseIn(Single)
      qualifiedName:
        CSharp: Febucci.UI.Effects.Tween.EaseIn(System.Single)
        VB: Febucci.UI.Effects.Tween.EaseIn(System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: EaseIn
        path: ''
        startLine: 9176
      syntax:
        content:
          CSharp: public static float EaseIn(float t)
          VB: Public Shared Function EaseIn(t As Single) As Single
        parameters:
        - id: t
          type: System.Single
        return:
          type: System.Single
      overload: Febucci.UI.Effects.Tween.EaseIn*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Febucci.UI.Effects.Tween.Flip(System.Single)
      commentId: M:Febucci.UI.Effects.Tween.Flip(System.Single)
      language: CSharp
      name:
        CSharp: Flip(Single)
        VB: Flip(Single)
      nameWithType:
        CSharp: Tween.Flip(Single)
        VB: Tween.Flip(Single)
      qualifiedName:
        CSharp: Febucci.UI.Effects.Tween.Flip(System.Single)
        VB: Febucci.UI.Effects.Tween.Flip(System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: Flip
        path: ''
        startLine: 9181
      syntax:
        content:
          CSharp: public static float Flip(float x)
          VB: Public Shared Function Flip(x As Single) As Single
        parameters:
        - id: x
          type: System.Single
        return:
          type: System.Single
      overload: Febucci.UI.Effects.Tween.Flip*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Febucci.UI.Effects.Tween.Square(System.Single)
      commentId: M:Febucci.UI.Effects.Tween.Square(System.Single)
      language: CSharp
      name:
        CSharp: Square(Single)
        VB: Square(Single)
      nameWithType:
        CSharp: Tween.Square(Single)
        VB: Tween.Square(Single)
      qualifiedName:
        CSharp: Febucci.UI.Effects.Tween.Square(System.Single)
        VB: Febucci.UI.Effects.Tween.Square(System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: Square
        path: ''
        startLine: 9186
      syntax:
        content:
          CSharp: public static float Square(float t)
          VB: Public Shared Function Square(t As Single) As Single
        parameters:
        - id: t
          type: System.Single
        return:
          type: System.Single
      overload: Febucci.UI.Effects.Tween.Square*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Febucci.UI.Effects.Tween.EaseOut(System.Single)
      commentId: M:Febucci.UI.Effects.Tween.EaseOut(System.Single)
      language: CSharp
      name:
        CSharp: EaseOut(Single)
        VB: EaseOut(Single)
      nameWithType:
        CSharp: Tween.EaseOut(Single)
        VB: Tween.EaseOut(Single)
      qualifiedName:
        CSharp: Febucci.UI.Effects.Tween.EaseOut(System.Single)
        VB: Febucci.UI.Effects.Tween.EaseOut(System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: EaseOut
        path: ''
        startLine: 9191
      syntax:
        content:
          CSharp: public static float EaseOut(float t)
          VB: Public Shared Function EaseOut(t As Single) As Single
        parameters:
        - id: t
          type: System.Single
        return:
          type: System.Single
      overload: Febucci.UI.Effects.Tween.EaseOut*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Febucci.UI.Effects.Tween.EaseInOut(System.Single)
      commentId: M:Febucci.UI.Effects.Tween.EaseInOut(System.Single)
      language: CSharp
      name:
        CSharp: EaseInOut(Single)
        VB: EaseInOut(Single)
      nameWithType:
        CSharp: Tween.EaseInOut(Single)
        VB: Tween.EaseInOut(Single)
      qualifiedName:
        CSharp: Febucci.UI.Effects.Tween.EaseInOut(System.Single)
        VB: Febucci.UI.Effects.Tween.EaseInOut(System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: EaseInOut
        path: ''
        startLine: 9196
      syntax:
        content:
          CSharp: public static float EaseInOut(float t)
          VB: Public Shared Function EaseInOut(t As Single) As Single
        parameters:
        - id: t
          type: System.Single
        return:
          type: System.Single
      overload: Febucci.UI.Effects.Tween.EaseInOut*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Febucci.UI.Effects.Tween.BounceOut(System.Single)
      commentId: M:Febucci.UI.Effects.Tween.BounceOut(System.Single)
      language: CSharp
      name:
        CSharp: BounceOut(Single)
        VB: BounceOut(Single)
      nameWithType:
        CSharp: Tween.BounceOut(Single)
        VB: Tween.BounceOut(Single)
      qualifiedName:
        CSharp: Febucci.UI.Effects.Tween.BounceOut(System.Single)
        VB: Febucci.UI.Effects.Tween.BounceOut(System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Effects
      source:
        id: BounceOut
        path: ''
        startLine: 9202
      syntax:
        content:
          CSharp: public static float BounceOut(float t)
          VB: Public Shared Function BounceOut(t As Single) As Single
        parameters:
        - id: t
          type: System.Single
        return:
          type: System.Single
      overload: Febucci.UI.Effects.Tween.BounceOut*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
- id: Febucci.UI.Styles
  commentId: N:Febucci.UI.Styles
  language: CSharp
  name:
    CSharp: Febucci.UI.Styles
    VB: Febucci.UI.Styles
  nameWithType:
    CSharp: Febucci.UI.Styles
    VB: Febucci.UI.Styles
  qualifiedName:
    CSharp: Febucci.UI.Styles
    VB: Febucci.UI.Styles
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: Febucci.UI.Styles.Style
    commentId: T:Febucci.UI.Styles.Style
    language: CSharp
    name:
      CSharp: Style
      VB: Style
    nameWithType:
      CSharp: Style
      VB: Style
    qualifiedName:
      CSharp: Febucci.UI.Styles.Style
      VB: Febucci.UI.Styles.Style
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Styles
    source:
      id: Style
      path: ''
      startLine: 8813
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public struct Style
        VB: >-
          <Serializable>

          Public Structure Style
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Febucci.UI.Styles.Style.styleTag
      commentId: F:Febucci.UI.Styles.Style.styleTag
      language: CSharp
      name:
        CSharp: styleTag
        VB: styleTag
      nameWithType:
        CSharp: Style.styleTag
        VB: Style.styleTag
      qualifiedName:
        CSharp: Febucci.UI.Styles.Style.styleTag
        VB: Febucci.UI.Styles.Style.styleTag
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Styles
      source:
        id: styleTag
        path: ''
        startLine: 8816
      syntax:
        content:
          CSharp: public string styleTag
          VB: Public styleTag As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Styles.Style.openingTag
      commentId: F:Febucci.UI.Styles.Style.openingTag
      language: CSharp
      name:
        CSharp: openingTag
        VB: openingTag
      nameWithType:
        CSharp: Style.openingTag
        VB: Style.openingTag
      qualifiedName:
        CSharp: Febucci.UI.Styles.Style.openingTag
        VB: Febucci.UI.Styles.Style.openingTag
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Styles
      source:
        id: openingTag
        path: ''
        startLine: 8818
      syntax:
        content:
          CSharp: public string openingTag
          VB: Public openingTag As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Styles.Style.closingTag
      commentId: F:Febucci.UI.Styles.Style.closingTag
      language: CSharp
      name:
        CSharp: closingTag
        VB: closingTag
      nameWithType:
        CSharp: Style.closingTag
        VB: Style.closingTag
      qualifiedName:
        CSharp: Febucci.UI.Styles.Style.closingTag
        VB: Febucci.UI.Styles.Style.closingTag
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Styles
      source:
        id: closingTag
        path: ''
        startLine: 8819
      syntax:
        content:
          CSharp: public string closingTag
          VB: Public closingTag As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Styles.Style.#ctor(System.String,System.String,System.String)
      commentId: M:Febucci.UI.Styles.Style.#ctor(System.String,System.String,System.String)
      language: CSharp
      name:
        CSharp: Style(String, String, String)
        VB: Style(String, String, String)
      nameWithType:
        CSharp: Style.Style(String, String, String)
        VB: Style.Style(String, String, String)
      qualifiedName:
        CSharp: Febucci.UI.Styles.Style.Style(System.String, System.String, System.String)
        VB: Febucci.UI.Styles.Style.Style(System.String, System.String, System.String)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Styles
      source:
        id: .ctor
        path: ''
        startLine: 8821
      syntax:
        content:
          CSharp: public Style(string styleTag, string openingTag, string closingTag)
          VB: Public Sub New(styleTag As String, openingTag As String, closingTag As String)
        parameters:
        - id: styleTag
          type: System.String
        - id: openingTag
          type: System.String
        - id: closingTag
          type: System.String
      overload: Febucci.UI.Styles.Style.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Febucci.UI.Styles.StyleSheetScriptable
    commentId: T:Febucci.UI.Styles.StyleSheetScriptable
    language: CSharp
    name:
      CSharp: StyleSheetScriptable
      VB: StyleSheetScriptable
    nameWithType:
      CSharp: StyleSheetScriptable
      VB: StyleSheetScriptable
    qualifiedName:
      CSharp: Febucci.UI.Styles.StyleSheetScriptable
      VB: Febucci.UI.Styles.StyleSheetScriptable
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Febucci.UI.Styles
    source:
      id: StyleSheetScriptable
      path: ''
      startLine: 8838
    summary: "\nContains a list of styles that can be used in the text\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class StyleSheetScriptable : ScriptableObject
        VB: >-
          <Serializable>

          Public Class StyleSheetScriptable

              Inherits ScriptableObject
    inheritance:
    - System.Object
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Febucci.UI.Styles.StyleSheetScriptable.Styles
      commentId: P:Febucci.UI.Styles.StyleSheetScriptable.Styles
      language: CSharp
      name:
        CSharp: Styles
        VB: Styles
      nameWithType:
        CSharp: StyleSheetScriptable.Styles
        VB: StyleSheetScriptable.Styles
      qualifiedName:
        CSharp: Febucci.UI.Styles.StyleSheetScriptable.Styles
        VB: Febucci.UI.Styles.StyleSheetScriptable.Styles
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Styles
      source:
        id: Styles
        path: ''
        startLine: 8844
      syntax:
        content:
          CSharp: public Style[] Styles { get; set; }
          VB: Public Property Styles As Style()
        parameters: []
        return:
          type: Febucci.UI.Styles.Style[]
      overload: Febucci.UI.Styles.StyleSheetScriptable.Styles*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Febucci.UI.Styles.StyleSheetScriptable.BuildOnce
      commentId: M:Febucci.UI.Styles.StyleSheetScriptable.BuildOnce
      language: CSharp
      name:
        CSharp: BuildOnce()
        VB: BuildOnce()
      nameWithType:
        CSharp: StyleSheetScriptable.BuildOnce()
        VB: StyleSheetScriptable.BuildOnce()
      qualifiedName:
        CSharp: Febucci.UI.Styles.StyleSheetScriptable.BuildOnce()
        VB: Febucci.UI.Styles.StyleSheetScriptable.BuildOnce()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Styles
      source:
        id: BuildOnce
        path: ''
        startLine: 8857
      syntax:
        content:
          CSharp: public void BuildOnce()
          VB: Public Sub BuildOnce
      overload: Febucci.UI.Styles.StyleSheetScriptable.BuildOnce*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Styles.StyleSheetScriptable.ForceBuildRefresh
      commentId: M:Febucci.UI.Styles.StyleSheetScriptable.ForceBuildRefresh
      language: CSharp
      name:
        CSharp: ForceBuildRefresh()
        VB: ForceBuildRefresh()
      nameWithType:
        CSharp: StyleSheetScriptable.ForceBuildRefresh()
        VB: StyleSheetScriptable.ForceBuildRefresh()
      qualifiedName:
        CSharp: Febucci.UI.Styles.StyleSheetScriptable.ForceBuildRefresh()
        VB: Febucci.UI.Styles.StyleSheetScriptable.ForceBuildRefresh()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Styles
      source:
        id: ForceBuildRefresh
        path: ''
        startLine: 8882
      syntax:
        content:
          CSharp: public void ForceBuildRefresh()
          VB: Public Sub ForceBuildRefresh
      overload: Febucci.UI.Styles.StyleSheetScriptable.ForceBuildRefresh*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Febucci.UI.Styles.StyleSheetScriptable.TryGetStyle(System.String,Febucci.UI.Styles.Style@)
      commentId: M:Febucci.UI.Styles.StyleSheetScriptable.TryGetStyle(System.String,Febucci.UI.Styles.Style@)
      language: CSharp
      name:
        CSharp: TryGetStyle(String, out Style)
        VB: TryGetStyle(String, ByRef Style)
      nameWithType:
        CSharp: StyleSheetScriptable.TryGetStyle(String, out Style)
        VB: StyleSheetScriptable.TryGetStyle(String, ByRef Style)
      qualifiedName:
        CSharp: Febucci.UI.Styles.StyleSheetScriptable.TryGetStyle(System.String, out Febucci.UI.Styles.Style)
        VB: Febucci.UI.Styles.StyleSheetScriptable.TryGetStyle(System.String, ByRef Febucci.UI.Styles.Style)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Febucci.UI.Styles
      source:
        id: TryGetStyle
        path: ''
        startLine: 8888
      syntax:
        content:
          CSharp: public virtual bool TryGetStyle(string tag, out Style result)
          VB: Public Overridable Function TryGetStyle(tag As String, ByRef result As Style) As Boolean
        parameters:
        - id: tag
          type: System.String
        - id: result
          type: Febucci.UI.Styles.Style
        return:
          type: System.Boolean
      overload: Febucci.UI.Styles.StyleSheetScriptable.TryGetStyle*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
references:
  Rect:
    name:
      CSharp:
      - id: Rect
        name: Rect
        nameWithType: Rect
        qualifiedName: Rect
        isExternal: true
      VB:
      - id: Rect
        name: Rect
        nameWithType: Rect
        qualifiedName: Rect
        isExternal: true
    isDefinition: true
  SerializedProperty:
    name:
      CSharp:
      - id: SerializedProperty
        name: SerializedProperty
        nameWithType: SerializedProperty
        qualifiedName: SerializedProperty
        isExternal: true
      VB:
      - id: SerializedProperty
        name: SerializedProperty
        nameWithType: SerializedProperty
        qualifiedName: SerializedProperty
        isExternal: true
    isDefinition: true
  GUIContent:
    name:
      CSharp:
      - id: GUIContent
        name: GUIContent
        nameWithType: GUIContent
        qualifiedName: GUIContent
        isExternal: true
      VB:
      - id: GUIContent
        name: GUIContent
        nameWithType: GUIContent
        qualifiedName: GUIContent
        isExternal: true
    isDefinition: true
  Febucci.Attributes.CharsDisplayTimeAttributeDrawer.OnGUI*:
    name:
      CSharp:
      - id: Febucci.Attributes.CharsDisplayTimeAttributeDrawer.OnGUI*
        name: OnGUI
        nameWithType: CharsDisplayTimeAttributeDrawer.OnGUI
        qualifiedName: Febucci.Attributes.CharsDisplayTimeAttributeDrawer.OnGUI
      VB:
      - id: Febucci.Attributes.CharsDisplayTimeAttributeDrawer.OnGUI*
        name: OnGUI
        nameWithType: CharsDisplayTimeAttributeDrawer.OnGUI
        qualifiedName: Febucci.Attributes.CharsDisplayTimeAttributeDrawer.OnGUI
    isDefinition: true
    commentId: Overload:Febucci.Attributes.CharsDisplayTimeAttributeDrawer.OnGUI
  Febucci.Attributes.CharsDisplayTimeAttributeDrawer:
    name:
      CSharp:
      - id: Febucci.Attributes.CharsDisplayTimeAttributeDrawer
        name: CharsDisplayTimeAttributeDrawer
        nameWithType: CharsDisplayTimeAttributeDrawer
        qualifiedName: Febucci.Attributes.CharsDisplayTimeAttributeDrawer
      VB:
      - id: Febucci.Attributes.CharsDisplayTimeAttributeDrawer
        name: CharsDisplayTimeAttributeDrawer
        nameWithType: CharsDisplayTimeAttributeDrawer
        qualifiedName: Febucci.Attributes.CharsDisplayTimeAttributeDrawer
    isDefinition: true
    commentId: T:Febucci.Attributes.CharsDisplayTimeAttributeDrawer
  Febucci.Attributes.MinValueAttributeDrawer.OnGUI*:
    name:
      CSharp:
      - id: Febucci.Attributes.MinValueAttributeDrawer.OnGUI*
        name: OnGUI
        nameWithType: MinValueAttributeDrawer.OnGUI
        qualifiedName: Febucci.Attributes.MinValueAttributeDrawer.OnGUI
      VB:
      - id: Febucci.Attributes.MinValueAttributeDrawer.OnGUI*
        name: OnGUI
        nameWithType: MinValueAttributeDrawer.OnGUI
        qualifiedName: Febucci.Attributes.MinValueAttributeDrawer.OnGUI
    isDefinition: true
    commentId: Overload:Febucci.Attributes.MinValueAttributeDrawer.OnGUI
  Febucci.Attributes.MinValueAttributeDrawer:
    name:
      CSharp:
      - id: Febucci.Attributes.MinValueAttributeDrawer
        name: MinValueAttributeDrawer
        nameWithType: MinValueAttributeDrawer
        qualifiedName: Febucci.Attributes.MinValueAttributeDrawer
      VB:
      - id: Febucci.Attributes.MinValueAttributeDrawer
        name: MinValueAttributeDrawer
        nameWithType: MinValueAttributeDrawer
        qualifiedName: Febucci.Attributes.MinValueAttributeDrawer
    isDefinition: true
    commentId: T:Febucci.Attributes.MinValueAttributeDrawer
  Febucci.Attributes.NotZeroAttributeDrawer.OnGUI*:
    name:
      CSharp:
      - id: Febucci.Attributes.NotZeroAttributeDrawer.OnGUI*
        name: OnGUI
        nameWithType: NotZeroAttributeDrawer.OnGUI
        qualifiedName: Febucci.Attributes.NotZeroAttributeDrawer.OnGUI
      VB:
      - id: Febucci.Attributes.NotZeroAttributeDrawer.OnGUI*
        name: OnGUI
        nameWithType: NotZeroAttributeDrawer.OnGUI
        qualifiedName: Febucci.Attributes.NotZeroAttributeDrawer.OnGUI
    isDefinition: true
    commentId: Overload:Febucci.Attributes.NotZeroAttributeDrawer.OnGUI
  Febucci.Attributes.NotZeroAttributeDrawer:
    name:
      CSharp:
      - id: Febucci.Attributes.NotZeroAttributeDrawer
        name: NotZeroAttributeDrawer
        nameWithType: NotZeroAttributeDrawer
        qualifiedName: Febucci.Attributes.NotZeroAttributeDrawer
      VB:
      - id: Febucci.Attributes.NotZeroAttributeDrawer
        name: NotZeroAttributeDrawer
        nameWithType: NotZeroAttributeDrawer
        qualifiedName: Febucci.Attributes.NotZeroAttributeDrawer
    isDefinition: true
    commentId: T:Febucci.Attributes.NotZeroAttributeDrawer
  Febucci.Attributes.PositiveValueAttributeDrawer.OnGUI*:
    name:
      CSharp:
      - id: Febucci.Attributes.PositiveValueAttributeDrawer.OnGUI*
        name: OnGUI
        nameWithType: PositiveValueAttributeDrawer.OnGUI
        qualifiedName: Febucci.Attributes.PositiveValueAttributeDrawer.OnGUI
      VB:
      - id: Febucci.Attributes.PositiveValueAttributeDrawer.OnGUI*
        name: OnGUI
        nameWithType: PositiveValueAttributeDrawer.OnGUI
        qualifiedName: Febucci.Attributes.PositiveValueAttributeDrawer.OnGUI
    isDefinition: true
    commentId: Overload:Febucci.Attributes.PositiveValueAttributeDrawer.OnGUI
  Febucci.Attributes.PositiveValueAttributeDrawer:
    name:
      CSharp:
      - id: Febucci.Attributes.PositiveValueAttributeDrawer
        name: PositiveValueAttributeDrawer
        nameWithType: PositiveValueAttributeDrawer
        qualifiedName: Febucci.Attributes.PositiveValueAttributeDrawer
      VB:
      - id: Febucci.Attributes.PositiveValueAttributeDrawer
        name: PositiveValueAttributeDrawer
        nameWithType: PositiveValueAttributeDrawer
        qualifiedName: Febucci.Attributes.PositiveValueAttributeDrawer
    isDefinition: true
    commentId: T:Febucci.Attributes.PositiveValueAttributeDrawer
  Febucci.Attributes.CharsDisplayTimeAttribute:
    name:
      CSharp:
      - id: Febucci.Attributes.CharsDisplayTimeAttribute
        name: CharsDisplayTimeAttribute
        nameWithType: CharsDisplayTimeAttribute
        qualifiedName: Febucci.Attributes.CharsDisplayTimeAttribute
      VB:
      - id: Febucci.Attributes.CharsDisplayTimeAttribute
        name: CharsDisplayTimeAttribute
        nameWithType: CharsDisplayTimeAttribute
        qualifiedName: Febucci.Attributes.CharsDisplayTimeAttribute
    isDefinition: true
    commentId: T:Febucci.Attributes.CharsDisplayTimeAttribute
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Single:
    name:
      CSharp:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      VB:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Single
  Febucci.Attributes.MinValueAttribute.#ctor*:
    name:
      CSharp:
      - id: Febucci.Attributes.MinValueAttribute.#ctor*
        name: MinValueAttribute
        nameWithType: MinValueAttribute.MinValueAttribute
        qualifiedName: Febucci.Attributes.MinValueAttribute.MinValueAttribute
      VB:
      - id: Febucci.Attributes.MinValueAttribute.#ctor*
        name: MinValueAttribute
        nameWithType: MinValueAttribute.MinValueAttribute
        qualifiedName: Febucci.Attributes.MinValueAttribute.MinValueAttribute
    isDefinition: true
    commentId: Overload:Febucci.Attributes.MinValueAttribute.#ctor
  Febucci.Attributes.MinValueAttribute:
    name:
      CSharp:
      - id: Febucci.Attributes.MinValueAttribute
        name: MinValueAttribute
        nameWithType: MinValueAttribute
        qualifiedName: Febucci.Attributes.MinValueAttribute
      VB:
      - id: Febucci.Attributes.MinValueAttribute
        name: MinValueAttribute
        nameWithType: MinValueAttribute
        qualifiedName: Febucci.Attributes.MinValueAttribute
    isDefinition: true
    commentId: T:Febucci.Attributes.MinValueAttribute
  Febucci.Attributes.NotZeroAttribute:
    name:
      CSharp:
      - id: Febucci.Attributes.NotZeroAttribute
        name: NotZeroAttribute
        nameWithType: NotZeroAttribute
        qualifiedName: Febucci.Attributes.NotZeroAttribute
      VB:
      - id: Febucci.Attributes.NotZeroAttribute
        name: NotZeroAttribute
        nameWithType: NotZeroAttribute
        qualifiedName: Febucci.Attributes.NotZeroAttribute
    isDefinition: true
    commentId: T:Febucci.Attributes.NotZeroAttribute
  Febucci.Attributes.PositiveValueAttribute:
    name:
      CSharp:
      - id: Febucci.Attributes.PositiveValueAttribute
        name: PositiveValueAttribute
        nameWithType: PositiveValueAttribute
        qualifiedName: Febucci.Attributes.PositiveValueAttribute
      VB:
      - id: Febucci.Attributes.PositiveValueAttribute
        name: PositiveValueAttribute
        nameWithType: PositiveValueAttribute
        qualifiedName: Febucci.Attributes.PositiveValueAttribute
    isDefinition: true
    commentId: T:Febucci.Attributes.PositiveValueAttribute
  Febucci.Attributes:
    name:
      CSharp:
      - name: Febucci.Attributes
        nameWithType: Febucci.Attributes
        qualifiedName: Febucci.Attributes
      VB:
      - name: Febucci.Attributes
        nameWithType: Febucci.Attributes
        qualifiedName: Febucci.Attributes
    isDefinition: true
    commentId: N:Febucci.Attributes
  Febucci.UI.TextAnimatorSettingsDrawer.OnInspectorGUI*:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimatorSettingsDrawer.OnInspectorGUI*
        name: OnInspectorGUI
        nameWithType: TextAnimatorSettingsDrawer.OnInspectorGUI
        qualifiedName: Febucci.UI.TextAnimatorSettingsDrawer.OnInspectorGUI
      VB:
      - id: Febucci.UI.TextAnimatorSettingsDrawer.OnInspectorGUI*
        name: OnInspectorGUI
        nameWithType: TextAnimatorSettingsDrawer.OnInspectorGUI
        qualifiedName: Febucci.UI.TextAnimatorSettingsDrawer.OnInspectorGUI
    isDefinition: true
    commentId: Overload:Febucci.UI.TextAnimatorSettingsDrawer.OnInspectorGUI
  Febucci.UI.TextAnimatorSettingsDrawer:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimatorSettingsDrawer
        name: TextAnimatorSettingsDrawer
        nameWithType: TextAnimatorSettingsDrawer
        qualifiedName: Febucci.UI.TextAnimatorSettingsDrawer
      VB:
      - id: Febucci.UI.TextAnimatorSettingsDrawer
        name: TextAnimatorSettingsDrawer
        nameWithType: TextAnimatorSettingsDrawer
        qualifiedName: Febucci.UI.TextAnimatorSettingsDrawer
    isDefinition: true
    commentId: T:Febucci.UI.TextAnimatorSettingsDrawer
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  Febucci.UI.TextAnimatorSetupWindow.ResetToBuiltIn*:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimatorSetupWindow.ResetToBuiltIn*
        name: ResetToBuiltIn
        nameWithType: TextAnimatorSetupWindow.ResetToBuiltIn
        qualifiedName: Febucci.UI.TextAnimatorSetupWindow.ResetToBuiltIn
      VB:
      - id: Febucci.UI.TextAnimatorSetupWindow.ResetToBuiltIn*
        name: ResetToBuiltIn
        nameWithType: TextAnimatorSetupWindow.ResetToBuiltIn
        qualifiedName: Febucci.UI.TextAnimatorSetupWindow.ResetToBuiltIn
    isDefinition: true
    commentId: Overload:Febucci.UI.TextAnimatorSetupWindow.ResetToBuiltIn
  DatabaseType:
    name:
      CSharp:
      - name: DatabaseType
        nameWithType: DatabaseType
        qualifiedName: DatabaseType
      VB:
      - name: DatabaseType
        nameWithType: DatabaseType
        qualifiedName: DatabaseType
    isDefinition: true
    commentId: '!:DatabaseType'
  '{DatabaseType}':
    name:
      CSharp:
      - name: DatabaseType
        nameWithType: DatabaseType
        qualifiedName: DatabaseType
      VB:
      - name: DatabaseType
        nameWithType: DatabaseType
        qualifiedName: DatabaseType
    isDefinition: false
    definition: DatabaseType
    commentId: '!:DatabaseType'
  EffectCategory:
    name:
      CSharp:
      - id: EffectCategory
        name: EffectCategory
        nameWithType: EffectCategory
        qualifiedName: EffectCategory
        isExternal: true
      VB:
      - id: EffectCategory
        name: EffectCategory
        nameWithType: EffectCategory
        qualifiedName: EffectCategory
        isExternal: true
    isDefinition: true
    commentId: '!:EffectCategory'
  Febucci.UI.TextAnimatorSetupWindow._CreateDatabase*:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimatorSetupWindow._CreateDatabase*
        name: _CreateDatabase
        nameWithType: TextAnimatorSetupWindow._CreateDatabase
        qualifiedName: Febucci.UI.TextAnimatorSetupWindow._CreateDatabase
      VB:
      - id: Febucci.UI.TextAnimatorSetupWindow._CreateDatabase*
        name: _CreateDatabase
        nameWithType: TextAnimatorSetupWindow._CreateDatabase
        qualifiedName: Febucci.UI.TextAnimatorSetupWindow._CreateDatabase
    isDefinition: true
    commentId: Overload:Febucci.UI.TextAnimatorSetupWindow._CreateDatabase
  Febucci.UI.TextAnimatorSetupWindow.FixSettingsFileNotFound*:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimatorSetupWindow.FixSettingsFileNotFound*
        name: FixSettingsFileNotFound
        nameWithType: TextAnimatorSetupWindow.FixSettingsFileNotFound
        qualifiedName: Febucci.UI.TextAnimatorSetupWindow.FixSettingsFileNotFound
      VB:
      - id: Febucci.UI.TextAnimatorSetupWindow.FixSettingsFileNotFound*
        name: FixSettingsFileNotFound
        nameWithType: TextAnimatorSetupWindow.FixSettingsFileNotFound
        qualifiedName: Febucci.UI.TextAnimatorSetupWindow.FixSettingsFileNotFound
    isDefinition: true
    commentId: Overload:Febucci.UI.TextAnimatorSetupWindow.FixSettingsFileNotFound
  Febucci.UI.TextAnimatorSetupWindow._CreateDirectoryIfDoesntExist*:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimatorSetupWindow._CreateDirectoryIfDoesntExist*
        name: _CreateDirectoryIfDoesntExist
        nameWithType: TextAnimatorSetupWindow._CreateDirectoryIfDoesntExist
        qualifiedName: Febucci.UI.TextAnimatorSetupWindow._CreateDirectoryIfDoesntExist
      VB:
      - id: Febucci.UI.TextAnimatorSetupWindow._CreateDirectoryIfDoesntExist*
        name: _CreateDirectoryIfDoesntExist
        nameWithType: TextAnimatorSetupWindow._CreateDirectoryIfDoesntExist
        qualifiedName: Febucci.UI.TextAnimatorSetupWindow._CreateDirectoryIfDoesntExist
    isDefinition: true
    commentId: Overload:Febucci.UI.TextAnimatorSetupWindow._CreateDirectoryIfDoesntExist
  T:
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: true
  '{T}':
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: false
    definition: T
    commentId: '!:T'
  Febucci.UI.TextAnimatorSetupWindow._CreateScriptableAssetAtPath*:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimatorSetupWindow._CreateScriptableAssetAtPath*
        name: _CreateScriptableAssetAtPath
        nameWithType: TextAnimatorSetupWindow._CreateScriptableAssetAtPath
        qualifiedName: Febucci.UI.TextAnimatorSetupWindow._CreateScriptableAssetAtPath
      VB:
      - id: Febucci.UI.TextAnimatorSetupWindow._CreateScriptableAssetAtPath*
        name: _CreateScriptableAssetAtPath
        nameWithType: TextAnimatorSetupWindow._CreateScriptableAssetAtPath
        qualifiedName: Febucci.UI.TextAnimatorSetupWindow._CreateScriptableAssetAtPath
    isDefinition: true
    commentId: Overload:Febucci.UI.TextAnimatorSetupWindow._CreateScriptableAssetAtPath
  Febucci.UI.TextAnimatorSetupWindow:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimatorSetupWindow
        name: TextAnimatorSetupWindow
        nameWithType: TextAnimatorSetupWindow
        qualifiedName: Febucci.UI.TextAnimatorSetupWindow
      VB:
      - id: Febucci.UI.TextAnimatorSetupWindow
        name: TextAnimatorSetupWindow
        nameWithType: TextAnimatorSetupWindow
        qualifiedName: Febucci.UI.TextAnimatorSetupWindow
    isDefinition: true
    commentId: T:Febucci.UI.TextAnimatorSetupWindow
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  Texture:
    name:
      CSharp:
      - id: Texture
        name: Texture
        nameWithType: Texture
        qualifiedName: Texture
        isExternal: true
      VB:
      - id: Texture
        name: Texture
        nameWithType: Texture
        qualifiedName: Texture
        isExternal: true
    isDefinition: true
  Febucci.UI.TexturesLoader.AboutLogo*:
    name:
      CSharp:
      - id: Febucci.UI.TexturesLoader.AboutLogo*
        name: AboutLogo
        nameWithType: TexturesLoader.AboutLogo
        qualifiedName: Febucci.UI.TexturesLoader.AboutLogo
      VB:
      - id: Febucci.UI.TexturesLoader.AboutLogo*
        name: AboutLogo
        nameWithType: TexturesLoader.AboutLogo
        qualifiedName: Febucci.UI.TexturesLoader.AboutLogo
    isDefinition: true
    commentId: Overload:Febucci.UI.TexturesLoader.AboutLogo
  Febucci.UI.TexturesLoader.StopIcon*:
    name:
      CSharp:
      - id: Febucci.UI.TexturesLoader.StopIcon*
        name: StopIcon
        nameWithType: TexturesLoader.StopIcon
        qualifiedName: Febucci.UI.TexturesLoader.StopIcon
      VB:
      - id: Febucci.UI.TexturesLoader.StopIcon*
        name: StopIcon
        nameWithType: TexturesLoader.StopIcon
        qualifiedName: Febucci.UI.TexturesLoader.StopIcon
    isDefinition: true
    commentId: Overload:Febucci.UI.TexturesLoader.StopIcon
  Febucci.UI.TexturesLoader.RestartIcon*:
    name:
      CSharp:
      - id: Febucci.UI.TexturesLoader.RestartIcon*
        name: RestartIcon
        nameWithType: TexturesLoader.RestartIcon
        qualifiedName: Febucci.UI.TexturesLoader.RestartIcon
      VB:
      - id: Febucci.UI.TexturesLoader.RestartIcon*
        name: RestartIcon
        nameWithType: TexturesLoader.RestartIcon
        qualifiedName: Febucci.UI.TexturesLoader.RestartIcon
    isDefinition: true
    commentId: Overload:Febucci.UI.TexturesLoader.RestartIcon
  Febucci.UI.TexturesLoader.SaveIcon*:
    name:
      CSharp:
      - id: Febucci.UI.TexturesLoader.SaveIcon*
        name: SaveIcon
        nameWithType: TexturesLoader.SaveIcon
        qualifiedName: Febucci.UI.TexturesLoader.SaveIcon
      VB:
      - id: Febucci.UI.TexturesLoader.SaveIcon*
        name: SaveIcon
        nameWithType: TexturesLoader.SaveIcon
        qualifiedName: Febucci.UI.TexturesLoader.SaveIcon
    isDefinition: true
    commentId: Overload:Febucci.UI.TexturesLoader.SaveIcon
  Febucci.UI.TexturesLoader.PlayIcon*:
    name:
      CSharp:
      - id: Febucci.UI.TexturesLoader.PlayIcon*
        name: PlayIcon
        nameWithType: TexturesLoader.PlayIcon
        qualifiedName: Febucci.UI.TexturesLoader.PlayIcon
      VB:
      - id: Febucci.UI.TexturesLoader.PlayIcon*
        name: PlayIcon
        nameWithType: TexturesLoader.PlayIcon
        qualifiedName: Febucci.UI.TexturesLoader.PlayIcon
    isDefinition: true
    commentId: Overload:Febucci.UI.TexturesLoader.PlayIcon
  Febucci.UI.TexturesLoader.PauseIcon*:
    name:
      CSharp:
      - id: Febucci.UI.TexturesLoader.PauseIcon*
        name: PauseIcon
        nameWithType: TexturesLoader.PauseIcon
        qualifiedName: Febucci.UI.TexturesLoader.PauseIcon
      VB:
      - id: Febucci.UI.TexturesLoader.PauseIcon*
        name: PauseIcon
        nameWithType: TexturesLoader.PauseIcon
        qualifiedName: Febucci.UI.TexturesLoader.PauseIcon
    isDefinition: true
    commentId: Overload:Febucci.UI.TexturesLoader.PauseIcon
  Febucci.UI.TexturesLoader.WarningIcon*:
    name:
      CSharp:
      - id: Febucci.UI.TexturesLoader.WarningIcon*
        name: WarningIcon
        nameWithType: TexturesLoader.WarningIcon
        qualifiedName: Febucci.UI.TexturesLoader.WarningIcon
      VB:
      - id: Febucci.UI.TexturesLoader.WarningIcon*
        name: WarningIcon
        nameWithType: TexturesLoader.WarningIcon
        qualifiedName: Febucci.UI.TexturesLoader.WarningIcon
    isDefinition: true
    commentId: Overload:Febucci.UI.TexturesLoader.WarningIcon
  Febucci.UI.TexturesLoader.ErrorIcon*:
    name:
      CSharp:
      - id: Febucci.UI.TexturesLoader.ErrorIcon*
        name: ErrorIcon
        nameWithType: TexturesLoader.ErrorIcon
        qualifiedName: Febucci.UI.TexturesLoader.ErrorIcon
      VB:
      - id: Febucci.UI.TexturesLoader.ErrorIcon*
        name: ErrorIcon
        nameWithType: TexturesLoader.ErrorIcon
        qualifiedName: Febucci.UI.TexturesLoader.ErrorIcon
    isDefinition: true
    commentId: Overload:Febucci.UI.TexturesLoader.ErrorIcon
  Febucci.UI.TexturesLoader:
    name:
      CSharp:
      - id: Febucci.UI.TexturesLoader
        name: TexturesLoader
        nameWithType: TexturesLoader
        qualifiedName: Febucci.UI.TexturesLoader
      VB:
      - id: Febucci.UI.TexturesLoader
        name: TexturesLoader
        nameWithType: TexturesLoader
        qualifiedName: Febucci.UI.TexturesLoader
    isDefinition: true
    commentId: T:Febucci.UI.TexturesLoader
  TMP_Text:
    name:
      CSharp:
      - id: TMP_Text
        name: TMP_Text
        nameWithType: TMP_Text
        qualifiedName: TMP_Text
        isExternal: true
      VB:
      - id: TMP_Text
        name: TMP_Text
        nameWithType: TMP_Text
        qualifiedName: TMP_Text
        isExternal: true
    isDefinition: true
  Febucci.UI.TextAnimator_TMP.TMProComponent*:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimator_TMP.TMProComponent*
        name: TMProComponent
        nameWithType: TextAnimator_TMP.TMProComponent
        qualifiedName: Febucci.UI.TextAnimator_TMP.TMProComponent
      VB:
      - id: Febucci.UI.TextAnimator_TMP.TMProComponent*
        name: TMProComponent
        nameWithType: TextAnimator_TMP.TMProComponent
        qualifiedName: Febucci.UI.TextAnimator_TMP.TMProComponent
    isDefinition: true
    commentId: Overload:Febucci.UI.TextAnimator_TMP.TMProComponent
  Febucci.UI.TextAnimator_TMP.OnInitialized*:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimator_TMP.OnInitialized*
        name: OnInitialized
        nameWithType: TextAnimator_TMP.OnInitialized
        qualifiedName: Febucci.UI.TextAnimator_TMP.OnInitialized
      VB:
      - id: Febucci.UI.TextAnimator_TMP.OnInitialized*
        name: OnInitialized
        nameWithType: TextAnimator_TMP.OnInitialized
        qualifiedName: Febucci.UI.TextAnimator_TMP.OnInitialized
    isDefinition: true
    commentId: Overload:Febucci.UI.TextAnimator_TMP.OnInitialized
  Febucci.UI.TextAnimator_TMP.OnEnable*:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimator_TMP.OnEnable*
        name: OnEnable
        nameWithType: TextAnimator_TMP.OnEnable
        qualifiedName: Febucci.UI.TextAnimator_TMP.OnEnable
      VB:
      - id: Febucci.UI.TextAnimator_TMP.OnEnable*
        name: OnEnable
        nameWithType: TextAnimator_TMP.OnEnable
        qualifiedName: Febucci.UI.TextAnimator_TMP.OnEnable
    isDefinition: true
    commentId: Overload:Febucci.UI.TextAnimator_TMP.OnEnable
  TagParserBase[]:
    name:
      CSharp:
      - id: TagParserBase
        name: TagParserBase
        nameWithType: TagParserBase
        qualifiedName: TagParserBase
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: TagParserBase
        name: TagParserBase
        nameWithType: TagParserBase
        qualifiedName: TagParserBase
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Febucci.UI.TextAnimator_TMP.GetExtraParsers*:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimator_TMP.GetExtraParsers*
        name: GetExtraParsers
        nameWithType: TextAnimator_TMP.GetExtraParsers
        qualifiedName: Febucci.UI.TextAnimator_TMP.GetExtraParsers
      VB:
      - id: Febucci.UI.TextAnimator_TMP.GetExtraParsers*
        name: GetExtraParsers
        nameWithType: TextAnimator_TMP.GetExtraParsers
        qualifiedName: Febucci.UI.TextAnimator_TMP.GetExtraParsers
    isDefinition: true
    commentId: Overload:Febucci.UI.TextAnimator_TMP.GetExtraParsers
  Febucci.UI.TextAnimator_TMP.GetOriginalTextFromSource*:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimator_TMP.GetOriginalTextFromSource*
        name: GetOriginalTextFromSource
        nameWithType: TextAnimator_TMP.GetOriginalTextFromSource
        qualifiedName: Febucci.UI.TextAnimator_TMP.GetOriginalTextFromSource
      VB:
      - id: Febucci.UI.TextAnimator_TMP.GetOriginalTextFromSource*
        name: GetOriginalTextFromSource
        nameWithType: TextAnimator_TMP.GetOriginalTextFromSource
        qualifiedName: Febucci.UI.TextAnimator_TMP.GetOriginalTextFromSource
    isDefinition: true
    commentId: Overload:Febucci.UI.TextAnimator_TMP.GetOriginalTextFromSource
  Febucci.UI.TextAnimator_TMP.GetStrippedTextFromSource*:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimator_TMP.GetStrippedTextFromSource*
        name: GetStrippedTextFromSource
        nameWithType: TextAnimator_TMP.GetStrippedTextFromSource
        qualifiedName: Febucci.UI.TextAnimator_TMP.GetStrippedTextFromSource
      VB:
      - id: Febucci.UI.TextAnimator_TMP.GetStrippedTextFromSource*
        name: GetStrippedTextFromSource
        nameWithType: TextAnimator_TMP.GetStrippedTextFromSource
        qualifiedName: Febucci.UI.TextAnimator_TMP.GetStrippedTextFromSource
    isDefinition: true
    commentId: Overload:Febucci.UI.TextAnimator_TMP.GetStrippedTextFromSource
  Febucci.UI.TextAnimator_TMP.SetTextToSource*:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimator_TMP.SetTextToSource*
        name: SetTextToSource
        nameWithType: TextAnimator_TMP.SetTextToSource
        qualifiedName: Febucci.UI.TextAnimator_TMP.SetTextToSource
      VB:
      - id: Febucci.UI.TextAnimator_TMP.SetTextToSource*
        name: SetTextToSource
        nameWithType: TextAnimator_TMP.SetTextToSource
        qualifiedName: Febucci.UI.TextAnimator_TMP.SetTextToSource
    isDefinition: true
    commentId: Overload:Febucci.UI.TextAnimator_TMP.SetTextToSource
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  Febucci.UI.TextAnimator_TMP.IsReady*:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimator_TMP.IsReady*
        name: IsReady
        nameWithType: TextAnimator_TMP.IsReady
        qualifiedName: Febucci.UI.TextAnimator_TMP.IsReady
      VB:
      - id: Febucci.UI.TextAnimator_TMP.IsReady*
        name: IsReady
        nameWithType: TextAnimator_TMP.IsReady
        qualifiedName: Febucci.UI.TextAnimator_TMP.IsReady
    isDefinition: true
    commentId: Overload:Febucci.UI.TextAnimator_TMP.IsReady
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  Febucci.UI.TextAnimator_TMP.GetCharactersCount*:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimator_TMP.GetCharactersCount*
        name: GetCharactersCount
        nameWithType: TextAnimator_TMP.GetCharactersCount
        qualifiedName: Febucci.UI.TextAnimator_TMP.GetCharactersCount
      VB:
      - id: Febucci.UI.TextAnimator_TMP.GetCharactersCount*
        name: GetCharactersCount
        nameWithType: TextAnimator_TMP.GetCharactersCount
        qualifiedName: Febucci.UI.TextAnimator_TMP.GetCharactersCount
    isDefinition: true
    commentId: Overload:Febucci.UI.TextAnimator_TMP.GetCharactersCount
  Febucci.UI.TextAnimator_TMP.HasChangedRenderingSettings*:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimator_TMP.HasChangedRenderingSettings*
        name: HasChangedRenderingSettings
        nameWithType: TextAnimator_TMP.HasChangedRenderingSettings
        qualifiedName: Febucci.UI.TextAnimator_TMP.HasChangedRenderingSettings
      VB:
      - id: Febucci.UI.TextAnimator_TMP.HasChangedRenderingSettings*
        name: HasChangedRenderingSettings
        nameWithType: TextAnimator_TMP.HasChangedRenderingSettings
        qualifiedName: Febucci.UI.TextAnimator_TMP.HasChangedRenderingSettings
    isDefinition: true
    commentId: Overload:Febucci.UI.TextAnimator_TMP.HasChangedRenderingSettings
  Febucci.UI.TextAnimator_TMP.HasChangedText*:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimator_TMP.HasChangedText*
        name: HasChangedText
        nameWithType: TextAnimator_TMP.HasChangedText
        qualifiedName: Febucci.UI.TextAnimator_TMP.HasChangedText
      VB:
      - id: Febucci.UI.TextAnimator_TMP.HasChangedText*
        name: HasChangedText
        nameWithType: TextAnimator_TMP.HasChangedText
        qualifiedName: Febucci.UI.TextAnimator_TMP.HasChangedText
    isDefinition: true
    commentId: Overload:Febucci.UI.TextAnimator_TMP.HasChangedText
  CharacterData[]:
    name:
      CSharp:
      - id: CharacterData
        name: CharacterData
        nameWithType: CharacterData
        qualifiedName: CharacterData
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: CharacterData
        name: CharacterData
        nameWithType: CharacterData
        qualifiedName: CharacterData
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Febucci.UI.TextAnimator_TMP.CopyMeshFromSource*:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimator_TMP.CopyMeshFromSource*
        name: CopyMeshFromSource
        nameWithType: TextAnimator_TMP.CopyMeshFromSource
        qualifiedName: Febucci.UI.TextAnimator_TMP.CopyMeshFromSource
      VB:
      - id: Febucci.UI.TextAnimator_TMP.CopyMeshFromSource*
        name: CopyMeshFromSource
        nameWithType: TextAnimator_TMP.CopyMeshFromSource
        qualifiedName: Febucci.UI.TextAnimator_TMP.CopyMeshFromSource
    isDefinition: true
    commentId: Overload:Febucci.UI.TextAnimator_TMP.CopyMeshFromSource
  Febucci.UI.TextAnimator_TMP.GetRenderedCharactersCountInsidePage*:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimator_TMP.GetRenderedCharactersCountInsidePage*
        name: GetRenderedCharactersCountInsidePage
        nameWithType: TextAnimator_TMP.GetRenderedCharactersCountInsidePage
        qualifiedName: Febucci.UI.TextAnimator_TMP.GetRenderedCharactersCountInsidePage
      VB:
      - id: Febucci.UI.TextAnimator_TMP.GetRenderedCharactersCountInsidePage*
        name: GetRenderedCharactersCountInsidePage
        nameWithType: TextAnimator_TMP.GetRenderedCharactersCountInsidePage
        qualifiedName: Febucci.UI.TextAnimator_TMP.GetRenderedCharactersCountInsidePage
    isDefinition: true
    commentId: Overload:Febucci.UI.TextAnimator_TMP.GetRenderedCharactersCountInsidePage
  Febucci.UI.TextAnimator_TMP.GetFirstCharacterIndexInsidePage*:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimator_TMP.GetFirstCharacterIndexInsidePage*
        name: GetFirstCharacterIndexInsidePage
        nameWithType: TextAnimator_TMP.GetFirstCharacterIndexInsidePage
        qualifiedName: Febucci.UI.TextAnimator_TMP.GetFirstCharacterIndexInsidePage
      VB:
      - id: Febucci.UI.TextAnimator_TMP.GetFirstCharacterIndexInsidePage*
        name: GetFirstCharacterIndexInsidePage
        nameWithType: TextAnimator_TMP.GetFirstCharacterIndexInsidePage
        qualifiedName: Febucci.UI.TextAnimator_TMP.GetFirstCharacterIndexInsidePage
    isDefinition: true
    commentId: Overload:Febucci.UI.TextAnimator_TMP.GetFirstCharacterIndexInsidePage
  Febucci.UI.TextAnimator_TMP.PasteMeshToSource*:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimator_TMP.PasteMeshToSource*
        name: PasteMeshToSource
        nameWithType: TextAnimator_TMP.PasteMeshToSource
        qualifiedName: Febucci.UI.TextAnimator_TMP.PasteMeshToSource
      VB:
      - id: Febucci.UI.TextAnimator_TMP.PasteMeshToSource*
        name: PasteMeshToSource
        nameWithType: TextAnimator_TMP.PasteMeshToSource
        qualifiedName: Febucci.UI.TextAnimator_TMP.PasteMeshToSource
    isDefinition: true
    commentId: Overload:Febucci.UI.TextAnimator_TMP.PasteMeshToSource
  Febucci.UI.TextAnimator_TMP.OnForceMeshUpdate*:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimator_TMP.OnForceMeshUpdate*
        name: OnForceMeshUpdate
        nameWithType: TextAnimator_TMP.OnForceMeshUpdate
        qualifiedName: Febucci.UI.TextAnimator_TMP.OnForceMeshUpdate
      VB:
      - id: Febucci.UI.TextAnimator_TMP.OnForceMeshUpdate*
        name: OnForceMeshUpdate
        nameWithType: TextAnimator_TMP.OnForceMeshUpdate
        qualifiedName: Febucci.UI.TextAnimator_TMP.OnForceMeshUpdate
    isDefinition: true
    commentId: Overload:Febucci.UI.TextAnimator_TMP.OnForceMeshUpdate
  TMP_CharacterInfo:
    name:
      CSharp:
      - id: TMP_CharacterInfo
        name: TMP_CharacterInfo
        nameWithType: TMP_CharacterInfo
        qualifiedName: TMP_CharacterInfo
        isExternal: true
      VB:
      - id: TMP_CharacterInfo
        name: TMP_CharacterInfo
        nameWithType: TMP_CharacterInfo
        qualifiedName: TMP_CharacterInfo
        isExternal: true
    isDefinition: true
    commentId: '!:TMP_CharacterInfo'
  Febucci.UI.TextAnimator_TMP.TryGetNextCharacter*:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimator_TMP.TryGetNextCharacter*
        name: TryGetNextCharacter
        nameWithType: TextAnimator_TMP.TryGetNextCharacter
        qualifiedName: Febucci.UI.TextAnimator_TMP.TryGetNextCharacter
      VB:
      - id: Febucci.UI.TextAnimator_TMP.TryGetNextCharacter*
        name: TryGetNextCharacter
        nameWithType: TextAnimator_TMP.TryGetNextCharacter
        qualifiedName: Febucci.UI.TextAnimator_TMP.TryGetNextCharacter
    isDefinition: true
    commentId: Overload:Febucci.UI.TextAnimator_TMP.TryGetNextCharacter
  System.ObsoleteAttribute:
    name:
      CSharp:
      - id: System.ObsoleteAttribute
        name: ObsoleteAttribute
        nameWithType: ObsoleteAttribute
        qualifiedName: System.ObsoleteAttribute
        isExternal: true
      VB:
      - id: System.ObsoleteAttribute
        name: ObsoleteAttribute
        nameWithType: ObsoleteAttribute
        qualifiedName: System.ObsoleteAttribute
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.ObsoleteAttribute
  System.ObsoleteAttribute.#ctor(System.String):
    name:
      CSharp:
      - id: System.ObsoleteAttribute.#ctor(System.String)
        name: ObsoleteAttribute
        nameWithType: ObsoleteAttribute.ObsoleteAttribute
        qualifiedName: System.ObsoleteAttribute.ObsoleteAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ObsoleteAttribute.#ctor(System.String)
        name: ObsoleteAttribute
        nameWithType: ObsoleteAttribute.ObsoleteAttribute
        qualifiedName: System.ObsoleteAttribute.ObsoleteAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ObsoleteAttribute
    commentId: M:System.ObsoleteAttribute.#ctor(System.String)
  Febucci.UI.TextAnimator_TMP.tmproText*:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimator_TMP.tmproText*
        name: tmproText
        nameWithType: TextAnimator_TMP.tmproText
        qualifiedName: Febucci.UI.TextAnimator_TMP.tmproText
      VB:
      - id: Febucci.UI.TextAnimator_TMP.tmproText*
        name: tmproText
        nameWithType: TextAnimator_TMP.tmproText
        qualifiedName: Febucci.UI.TextAnimator_TMP.tmproText
    isDefinition: true
    commentId: Overload:Febucci.UI.TextAnimator_TMP.tmproText
  Febucci.UI.TextAnimator_TMP:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimator_TMP
        name: TextAnimator_TMP
        nameWithType: TextAnimator_TMP
        qualifiedName: Febucci.UI.TextAnimator_TMP
      VB:
      - id: Febucci.UI.TextAnimator_TMP
        name: TextAnimator_TMP
        nameWithType: TextAnimator_TMP
        qualifiedName: Febucci.UI.TextAnimator_TMP
    isDefinition: true
    commentId: T:Febucci.UI.TextAnimator_TMP
  Febucci.UI:
    name:
      CSharp:
      - name: Febucci.UI
        nameWithType: Febucci.UI
        qualifiedName: Febucci.UI
      VB:
      - name: Febucci.UI
        nameWithType: Febucci.UI
        qualifiedName: Febucci.UI
    isDefinition: true
    commentId: N:Febucci.UI
  Febucci.UI.AnimationLoop:
    name:
      CSharp:
      - id: Febucci.UI.AnimationLoop
        name: AnimationLoop
        nameWithType: AnimationLoop
        qualifiedName: Febucci.UI.AnimationLoop
      VB:
      - id: Febucci.UI.AnimationLoop
        name: AnimationLoop
        nameWithType: AnimationLoop
        qualifiedName: Febucci.UI.AnimationLoop
    isDefinition: true
    parent: Febucci.UI
    commentId: T:Febucci.UI.AnimationLoop
  System.ValueType:
    name:
      CSharp:
      - id: System.ValueType
        name: ValueType
        nameWithType: ValueType
        qualifiedName: System.ValueType
        isExternal: true
      VB:
      - id: System.ValueType
        name: ValueType
        nameWithType: ValueType
        qualifiedName: System.ValueType
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.ValueType
  System.ValueType.Equals(System.Object):
    name:
      CSharp:
      - id: System.ValueType.Equals(System.Object)
        name: Equals
        nameWithType: ValueType.Equals
        qualifiedName: System.ValueType.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ValueType.Equals(System.Object)
        name: Equals
        nameWithType: ValueType.Equals
        qualifiedName: System.ValueType.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.Equals(System.Object)
  System.ValueType.GetHashCode:
    name:
      CSharp:
      - id: System.ValueType.GetHashCode
        name: GetHashCode
        nameWithType: ValueType.GetHashCode
        qualifiedName: System.ValueType.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ValueType.GetHashCode
        name: GetHashCode
        nameWithType: ValueType.GetHashCode
        qualifiedName: System.ValueType.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.GetHashCode
  System.ValueType.ToString:
    name:
      CSharp:
      - id: System.ValueType.ToString
        name: ToString
        nameWithType: ValueType.ToString
        qualifiedName: System.ValueType.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ValueType.ToString
        name: ToString
        nameWithType: ValueType.ToString
        qualifiedName: System.ValueType.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.ToString
  Febucci.UI.TimeData.timeSinceStart*:
    name:
      CSharp:
      - id: Febucci.UI.TimeData.timeSinceStart*
        name: timeSinceStart
        nameWithType: TimeData.timeSinceStart
        qualifiedName: Febucci.UI.TimeData.timeSinceStart
      VB:
      - id: Febucci.UI.TimeData.timeSinceStart*
        name: timeSinceStart
        nameWithType: TimeData.timeSinceStart
        qualifiedName: Febucci.UI.TimeData.timeSinceStart
    isDefinition: true
    commentId: Overload:Febucci.UI.TimeData.timeSinceStart
  Febucci.UI.TimeData.deltaTime*:
    name:
      CSharp:
      - id: Febucci.UI.TimeData.deltaTime*
        name: deltaTime
        nameWithType: TimeData.deltaTime
        qualifiedName: Febucci.UI.TimeData.deltaTime
      VB:
      - id: Febucci.UI.TimeData.deltaTime*
        name: deltaTime
        nameWithType: TimeData.deltaTime
        qualifiedName: Febucci.UI.TimeData.deltaTime
    isDefinition: true
    commentId: Overload:Febucci.UI.TimeData.deltaTime
  Febucci.UI.TimeData.RestartTime*:
    name:
      CSharp:
      - id: Febucci.UI.TimeData.RestartTime*
        name: RestartTime
        nameWithType: TimeData.RestartTime
        qualifiedName: Febucci.UI.TimeData.RestartTime
      VB:
      - id: Febucci.UI.TimeData.RestartTime*
        name: RestartTime
        nameWithType: TimeData.RestartTime
        qualifiedName: Febucci.UI.TimeData.RestartTime
    isDefinition: true
    commentId: Overload:Febucci.UI.TimeData.RestartTime
  Febucci.UI.TimeData:
    name:
      CSharp:
      - id: Febucci.UI.TimeData
        name: TimeData
        nameWithType: TimeData
        qualifiedName: Febucci.UI.TimeData
      VB:
      - id: Febucci.UI.TimeData
        name: TimeData
        nameWithType: TimeData
        qualifiedName: Febucci.UI.TimeData
    isDefinition: true
    parent: Febucci.UI
    commentId: T:Febucci.UI.TimeData
  System.SerializableAttribute:
    name:
      CSharp:
      - id: System.SerializableAttribute
        name: SerializableAttribute
        nameWithType: SerializableAttribute
        qualifiedName: System.SerializableAttribute
        isExternal: true
      VB:
      - id: System.SerializableAttribute
        name: SerializableAttribute
        nameWithType: SerializableAttribute
        qualifiedName: System.SerializableAttribute
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.SerializableAttribute
  System.SerializableAttribute.#ctor:
    name:
      CSharp:
      - id: System.SerializableAttribute.#ctor
        name: SerializableAttribute
        nameWithType: SerializableAttribute.SerializableAttribute
        qualifiedName: System.SerializableAttribute.SerializableAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.SerializableAttribute.#ctor
        name: SerializableAttribute
        nameWithType: SerializableAttribute.SerializableAttribute
        qualifiedName: System.SerializableAttribute.SerializableAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.SerializableAttribute
    commentId: M:System.SerializableAttribute.#ctor
  Febucci.UI.TimeScale:
    name:
      CSharp:
      - id: Febucci.UI.TimeScale
        name: TimeScale
        nameWithType: TimeScale
        qualifiedName: Febucci.UI.TimeScale
      VB:
      - id: Febucci.UI.TimeScale
        name: TimeScale
        nameWithType: TimeScale
        qualifiedName: Febucci.UI.TimeScale
    isDefinition: true
    parent: Febucci.UI
    commentId: T:Febucci.UI.TimeScale
  Febucci.UI.Core:
    name:
      CSharp:
      - name: Febucci.UI.Core
        nameWithType: Febucci.UI.Core
        qualifiedName: Febucci.UI.Core
      VB:
      - name: Febucci.UI.Core
        nameWithType: Febucci.UI.Core
        qualifiedName: Febucci.UI.Core
    isDefinition: true
    commentId: N:Febucci.UI.Core
  Febucci.UI.Core.TypewriterCore:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore
        name: TypewriterCore
        nameWithType: TypewriterCore
        qualifiedName: Febucci.UI.Core.TypewriterCore
      VB:
      - id: Febucci.UI.Core.TypewriterCore
        name: TypewriterCore
        nameWithType: TypewriterCore
        qualifiedName: Febucci.UI.Core.TypewriterCore
    isDefinition: true
    parent: Febucci.UI.Core
    commentId: T:Febucci.UI.Core.TypewriterCore
  Febucci.UI.Core.TypewriterCore.TextAnimator:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.TextAnimator
        name: TextAnimator
        nameWithType: TypewriterCore.TextAnimator
        qualifiedName: Febucci.UI.Core.TypewriterCore.TextAnimator
      VB:
      - id: Febucci.UI.Core.TypewriterCore.TextAnimator
        name: TextAnimator
        nameWithType: TypewriterCore.TextAnimator
        qualifiedName: Febucci.UI.Core.TypewriterCore.TextAnimator
    isDefinition: true
    parent: Febucci.UI.Core.TypewriterCore
    commentId: P:Febucci.UI.Core.TypewriterCore.TextAnimator
  Febucci.UI.Core.TypewriterCore.useTypeWriter:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.useTypeWriter
        name: useTypeWriter
        nameWithType: TypewriterCore.useTypeWriter
        qualifiedName: Febucci.UI.Core.TypewriterCore.useTypeWriter
      VB:
      - id: Febucci.UI.Core.TypewriterCore.useTypeWriter
        name: useTypeWriter
        nameWithType: TypewriterCore.useTypeWriter
        qualifiedName: Febucci.UI.Core.TypewriterCore.useTypeWriter
    isDefinition: true
    parent: Febucci.UI.Core.TypewriterCore
    commentId: F:Febucci.UI.Core.TypewriterCore.useTypeWriter
  Febucci.UI.Core.TypewriterCore.startTypewriterMode:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.startTypewriterMode
        name: startTypewriterMode
        nameWithType: TypewriterCore.startTypewriterMode
        qualifiedName: Febucci.UI.Core.TypewriterCore.startTypewriterMode
      VB:
      - id: Febucci.UI.Core.TypewriterCore.startTypewriterMode
        name: startTypewriterMode
        nameWithType: TypewriterCore.startTypewriterMode
        qualifiedName: Febucci.UI.Core.TypewriterCore.startTypewriterMode
    isDefinition: true
    parent: Febucci.UI.Core.TypewriterCore
    commentId: F:Febucci.UI.Core.TypewriterCore.startTypewriterMode
  Febucci.UI.Core.TypewriterCore.hideAppearancesOnSkip:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.hideAppearancesOnSkip
        name: hideAppearancesOnSkip
        nameWithType: TypewriterCore.hideAppearancesOnSkip
        qualifiedName: Febucci.UI.Core.TypewriterCore.hideAppearancesOnSkip
      VB:
      - id: Febucci.UI.Core.TypewriterCore.hideAppearancesOnSkip
        name: hideAppearancesOnSkip
        nameWithType: TypewriterCore.hideAppearancesOnSkip
        qualifiedName: Febucci.UI.Core.TypewriterCore.hideAppearancesOnSkip
    isDefinition: true
    parent: Febucci.UI.Core.TypewriterCore
    commentId: F:Febucci.UI.Core.TypewriterCore.hideAppearancesOnSkip
  Febucci.UI.Core.TypewriterCore.hideDisappearancesOnSkip:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.hideDisappearancesOnSkip
        name: hideDisappearancesOnSkip
        nameWithType: TypewriterCore.hideDisappearancesOnSkip
        qualifiedName: Febucci.UI.Core.TypewriterCore.hideDisappearancesOnSkip
      VB:
      - id: Febucci.UI.Core.TypewriterCore.hideDisappearancesOnSkip
        name: hideDisappearancesOnSkip
        nameWithType: TypewriterCore.hideDisappearancesOnSkip
        qualifiedName: Febucci.UI.Core.TypewriterCore.hideDisappearancesOnSkip
    isDefinition: true
    parent: Febucci.UI.Core.TypewriterCore
    commentId: F:Febucci.UI.Core.TypewriterCore.hideDisappearancesOnSkip
  Febucci.UI.Core.TypewriterCore.resetTypingSpeedAtStartup:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.resetTypingSpeedAtStartup
        name: resetTypingSpeedAtStartup
        nameWithType: TypewriterCore.resetTypingSpeedAtStartup
        qualifiedName: Febucci.UI.Core.TypewriterCore.resetTypingSpeedAtStartup
      VB:
      - id: Febucci.UI.Core.TypewriterCore.resetTypingSpeedAtStartup
        name: resetTypingSpeedAtStartup
        nameWithType: TypewriterCore.resetTypingSpeedAtStartup
        qualifiedName: Febucci.UI.Core.TypewriterCore.resetTypingSpeedAtStartup
    isDefinition: true
    parent: Febucci.UI.Core.TypewriterCore
    commentId: F:Febucci.UI.Core.TypewriterCore.resetTypingSpeedAtStartup
  Febucci.UI.Core.TypewriterCore.disappearanceOrientation:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.disappearanceOrientation
        name: disappearanceOrientation
        nameWithType: TypewriterCore.disappearanceOrientation
        qualifiedName: Febucci.UI.Core.TypewriterCore.disappearanceOrientation
      VB:
      - id: Febucci.UI.Core.TypewriterCore.disappearanceOrientation
        name: disappearanceOrientation
        nameWithType: TypewriterCore.disappearanceOrientation
        qualifiedName: Febucci.UI.Core.TypewriterCore.disappearanceOrientation
    isDefinition: true
    parent: Febucci.UI.Core.TypewriterCore
    commentId: F:Febucci.UI.Core.TypewriterCore.disappearanceOrientation
  Febucci.UI.Core.TypewriterCore.triggerShowedAfterEffectsEnd:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.triggerShowedAfterEffectsEnd
        name: triggerShowedAfterEffectsEnd
        nameWithType: TypewriterCore.triggerShowedAfterEffectsEnd
        qualifiedName: Febucci.UI.Core.TypewriterCore.triggerShowedAfterEffectsEnd
      VB:
      - id: Febucci.UI.Core.TypewriterCore.triggerShowedAfterEffectsEnd
        name: triggerShowedAfterEffectsEnd
        nameWithType: TypewriterCore.triggerShowedAfterEffectsEnd
        qualifiedName: Febucci.UI.Core.TypewriterCore.triggerShowedAfterEffectsEnd
    isDefinition: true
    parent: Febucci.UI.Core.TypewriterCore
    commentId: F:Febucci.UI.Core.TypewriterCore.triggerShowedAfterEffectsEnd
  Febucci.UI.Core.TypewriterCore.triggerDisappearedAfterEffectsEnd:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.triggerDisappearedAfterEffectsEnd
        name: triggerDisappearedAfterEffectsEnd
        nameWithType: TypewriterCore.triggerDisappearedAfterEffectsEnd
        qualifiedName: Febucci.UI.Core.TypewriterCore.triggerDisappearedAfterEffectsEnd
      VB:
      - id: Febucci.UI.Core.TypewriterCore.triggerDisappearedAfterEffectsEnd
        name: triggerDisappearedAfterEffectsEnd
        nameWithType: TypewriterCore.triggerDisappearedAfterEffectsEnd
        qualifiedName: Febucci.UI.Core.TypewriterCore.triggerDisappearedAfterEffectsEnd
    isDefinition: true
    parent: Febucci.UI.Core.TypewriterCore
    commentId: F:Febucci.UI.Core.TypewriterCore.triggerDisappearedAfterEffectsEnd
  Febucci.UI.Core.TypewriterCore.onTextShowed:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.onTextShowed
        name: onTextShowed
        nameWithType: TypewriterCore.onTextShowed
        qualifiedName: Febucci.UI.Core.TypewriterCore.onTextShowed
      VB:
      - id: Febucci.UI.Core.TypewriterCore.onTextShowed
        name: onTextShowed
        nameWithType: TypewriterCore.onTextShowed
        qualifiedName: Febucci.UI.Core.TypewriterCore.onTextShowed
    isDefinition: true
    parent: Febucci.UI.Core.TypewriterCore
    commentId: F:Febucci.UI.Core.TypewriterCore.onTextShowed
  Febucci.UI.Core.TypewriterCore.onTypewriterStart:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.onTypewriterStart
        name: onTypewriterStart
        nameWithType: TypewriterCore.onTypewriterStart
        qualifiedName: Febucci.UI.Core.TypewriterCore.onTypewriterStart
      VB:
      - id: Febucci.UI.Core.TypewriterCore.onTypewriterStart
        name: onTypewriterStart
        nameWithType: TypewriterCore.onTypewriterStart
        qualifiedName: Febucci.UI.Core.TypewriterCore.onTypewriterStart
    isDefinition: true
    parent: Febucci.UI.Core.TypewriterCore
    commentId: F:Febucci.UI.Core.TypewriterCore.onTypewriterStart
  Febucci.UI.Core.TypewriterCore.onTextDisappeared:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.onTextDisappeared
        name: onTextDisappeared
        nameWithType: TypewriterCore.onTextDisappeared
        qualifiedName: Febucci.UI.Core.TypewriterCore.onTextDisappeared
      VB:
      - id: Febucci.UI.Core.TypewriterCore.onTextDisappeared
        name: onTextDisappeared
        nameWithType: TypewriterCore.onTextDisappeared
        qualifiedName: Febucci.UI.Core.TypewriterCore.onTextDisappeared
    isDefinition: true
    parent: Febucci.UI.Core.TypewriterCore
    commentId: F:Febucci.UI.Core.TypewriterCore.onTextDisappeared
  Febucci.UI.Core.TypewriterCore.onCharacterVisible:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.onCharacterVisible
        name: onCharacterVisible
        nameWithType: TypewriterCore.onCharacterVisible
        qualifiedName: Febucci.UI.Core.TypewriterCore.onCharacterVisible
      VB:
      - id: Febucci.UI.Core.TypewriterCore.onCharacterVisible
        name: onCharacterVisible
        nameWithType: TypewriterCore.onCharacterVisible
        qualifiedName: Febucci.UI.Core.TypewriterCore.onCharacterVisible
    isDefinition: true
    parent: Febucci.UI.Core.TypewriterCore
    commentId: F:Febucci.UI.Core.TypewriterCore.onCharacterVisible
  Febucci.UI.Core.TypewriterCore.onMessage:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.onMessage
        name: onMessage
        nameWithType: TypewriterCore.onMessage
        qualifiedName: Febucci.UI.Core.TypewriterCore.onMessage
      VB:
      - id: Febucci.UI.Core.TypewriterCore.onMessage
        name: onMessage
        nameWithType: TypewriterCore.onMessage
        qualifiedName: Febucci.UI.Core.TypewriterCore.onMessage
    isDefinition: true
    parent: Febucci.UI.Core.TypewriterCore
    commentId: F:Febucci.UI.Core.TypewriterCore.onMessage
  Febucci.UI.Core.TypewriterCore.ShowText(System.String):
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.ShowText(System.String)
        name: ShowText
        nameWithType: TypewriterCore.ShowText
        qualifiedName: Febucci.UI.Core.TypewriterCore.ShowText
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Core.TypewriterCore.ShowText(System.String)
        name: ShowText
        nameWithType: TypewriterCore.ShowText
        qualifiedName: Febucci.UI.Core.TypewriterCore.ShowText
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Febucci.UI.Core.TypewriterCore
    commentId: M:Febucci.UI.Core.TypewriterCore.ShowText(System.String)
  Febucci.UI.Core.TypewriterCore.SkipTypewriter:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.SkipTypewriter
        name: SkipTypewriter
        nameWithType: TypewriterCore.SkipTypewriter
        qualifiedName: Febucci.UI.Core.TypewriterCore.SkipTypewriter
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Core.TypewriterCore.SkipTypewriter
        name: SkipTypewriter
        nameWithType: TypewriterCore.SkipTypewriter
        qualifiedName: Febucci.UI.Core.TypewriterCore.SkipTypewriter
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Febucci.UI.Core.TypewriterCore
    commentId: M:Febucci.UI.Core.TypewriterCore.SkipTypewriter
  Febucci.UI.Core.TypewriterCore.isShowingText:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.isShowingText
        name: isShowingText
        nameWithType: TypewriterCore.isShowingText
        qualifiedName: Febucci.UI.Core.TypewriterCore.isShowingText
      VB:
      - id: Febucci.UI.Core.TypewriterCore.isShowingText
        name: isShowingText
        nameWithType: TypewriterCore.isShowingText
        qualifiedName: Febucci.UI.Core.TypewriterCore.isShowingText
    isDefinition: true
    parent: Febucci.UI.Core.TypewriterCore
    commentId: P:Febucci.UI.Core.TypewriterCore.isShowingText
  Febucci.UI.Core.TypewriterCore.StartShowingText(System.Boolean):
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.StartShowingText(System.Boolean)
        name: StartShowingText
        nameWithType: TypewriterCore.StartShowingText
        qualifiedName: Febucci.UI.Core.TypewriterCore.StartShowingText
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Core.TypewriterCore.StartShowingText(System.Boolean)
        name: StartShowingText
        nameWithType: TypewriterCore.StartShowingText
        qualifiedName: Febucci.UI.Core.TypewriterCore.StartShowingText
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Febucci.UI.Core.TypewriterCore
    commentId: M:Febucci.UI.Core.TypewriterCore.StartShowingText(System.Boolean)
  Febucci.UI.Core.TypewriterCore.StopShowingText:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.StopShowingText
        name: StopShowingText
        nameWithType: TypewriterCore.StopShowingText
        qualifiedName: Febucci.UI.Core.TypewriterCore.StopShowingText
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Core.TypewriterCore.StopShowingText
        name: StopShowingText
        nameWithType: TypewriterCore.StopShowingText
        qualifiedName: Febucci.UI.Core.TypewriterCore.StopShowingText
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Febucci.UI.Core.TypewriterCore
    commentId: M:Febucci.UI.Core.TypewriterCore.StopShowingText
  Febucci.UI.Core.TypewriterCore.isHidingText:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.isHidingText
        name: isHidingText
        nameWithType: TypewriterCore.isHidingText
        qualifiedName: Febucci.UI.Core.TypewriterCore.isHidingText
      VB:
      - id: Febucci.UI.Core.TypewriterCore.isHidingText
        name: isHidingText
        nameWithType: TypewriterCore.isHidingText
        qualifiedName: Febucci.UI.Core.TypewriterCore.isHidingText
    isDefinition: true
    parent: Febucci.UI.Core.TypewriterCore
    commentId: P:Febucci.UI.Core.TypewriterCore.isHidingText
  Febucci.UI.Core.TypewriterCore.StartDisappearingText:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.StartDisappearingText
        name: StartDisappearingText
        nameWithType: TypewriterCore.StartDisappearingText
        qualifiedName: Febucci.UI.Core.TypewriterCore.StartDisappearingText
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Core.TypewriterCore.StartDisappearingText
        name: StartDisappearingText
        nameWithType: TypewriterCore.StartDisappearingText
        qualifiedName: Febucci.UI.Core.TypewriterCore.StartDisappearingText
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Febucci.UI.Core.TypewriterCore
    commentId: M:Febucci.UI.Core.TypewriterCore.StartDisappearingText
  Febucci.UI.Core.TypewriterCore.StopDisappearingText:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.StopDisappearingText
        name: StopDisappearingText
        nameWithType: TypewriterCore.StopDisappearingText
        qualifiedName: Febucci.UI.Core.TypewriterCore.StopDisappearingText
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Core.TypewriterCore.StopDisappearingText
        name: StopDisappearingText
        nameWithType: TypewriterCore.StopDisappearingText
        qualifiedName: Febucci.UI.Core.TypewriterCore.StopDisappearingText
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Febucci.UI.Core.TypewriterCore
    commentId: M:Febucci.UI.Core.TypewriterCore.StopDisappearingText
  Febucci.UI.Core.TypewriterCore.SetTypewriterSpeed(System.Single):
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.SetTypewriterSpeed(System.Single)
        name: SetTypewriterSpeed
        nameWithType: TypewriterCore.SetTypewriterSpeed
        qualifiedName: Febucci.UI.Core.TypewriterCore.SetTypewriterSpeed
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Core.TypewriterCore.SetTypewriterSpeed(System.Single)
        name: SetTypewriterSpeed
        nameWithType: TypewriterCore.SetTypewriterSpeed
        qualifiedName: Febucci.UI.Core.TypewriterCore.SetTypewriterSpeed
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Febucci.UI.Core.TypewriterCore
    commentId: M:Febucci.UI.Core.TypewriterCore.SetTypewriterSpeed(System.Single)
  Febucci.UI.Core.TypewriterCore.TriggerRemainingEvents:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.TriggerRemainingEvents
        name: TriggerRemainingEvents
        nameWithType: TypewriterCore.TriggerRemainingEvents
        qualifiedName: Febucci.UI.Core.TypewriterCore.TriggerRemainingEvents
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Core.TypewriterCore.TriggerRemainingEvents
        name: TriggerRemainingEvents
        nameWithType: TypewriterCore.TriggerRemainingEvents
        qualifiedName: Febucci.UI.Core.TypewriterCore.TriggerRemainingEvents
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Febucci.UI.Core.TypewriterCore
    commentId: M:Febucci.UI.Core.TypewriterCore.TriggerRemainingEvents
  Febucci.UI.Core.TypewriterCore.TriggerVisibleEvents:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.TriggerVisibleEvents
        name: TriggerVisibleEvents
        nameWithType: TypewriterCore.TriggerVisibleEvents
        qualifiedName: Febucci.UI.Core.TypewriterCore.TriggerVisibleEvents
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Core.TypewriterCore.TriggerVisibleEvents
        name: TriggerVisibleEvents
        nameWithType: TypewriterCore.TriggerVisibleEvents
        qualifiedName: Febucci.UI.Core.TypewriterCore.TriggerVisibleEvents
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Febucci.UI.Core.TypewriterCore
    commentId: M:Febucci.UI.Core.TypewriterCore.TriggerVisibleEvents
  Febucci.UI.Core.TypewriterCore.OnEnable:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.OnEnable
        name: OnEnable
        nameWithType: TypewriterCore.OnEnable
        qualifiedName: Febucci.UI.Core.TypewriterCore.OnEnable
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Core.TypewriterCore.OnEnable
        name: OnEnable
        nameWithType: TypewriterCore.OnEnable
        qualifiedName: Febucci.UI.Core.TypewriterCore.OnEnable
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Febucci.UI.Core.TypewriterCore
    commentId: M:Febucci.UI.Core.TypewriterCore.OnEnable
  Febucci.UI.Core.TypewriterCore.OnDisable:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.OnDisable
        name: OnDisable
        nameWithType: TypewriterCore.OnDisable
        qualifiedName: Febucci.UI.Core.TypewriterCore.OnDisable
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Core.TypewriterCore.OnDisable
        name: OnDisable
        nameWithType: TypewriterCore.OnDisable
        qualifiedName: Febucci.UI.Core.TypewriterCore.OnDisable
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Febucci.UI.Core.TypewriterCore
    commentId: M:Febucci.UI.Core.TypewriterCore.OnDisable
  Febucci.UI.Core.TypewriterCore.typewriterPlayerSpeed:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.typewriterPlayerSpeed
        name: typewriterPlayerSpeed
        nameWithType: TypewriterCore.typewriterPlayerSpeed
        qualifiedName: Febucci.UI.Core.TypewriterCore.typewriterPlayerSpeed
      VB:
      - id: Febucci.UI.Core.TypewriterCore.typewriterPlayerSpeed
        name: typewriterPlayerSpeed
        nameWithType: TypewriterCore.typewriterPlayerSpeed
        qualifiedName: Febucci.UI.Core.TypewriterCore.typewriterPlayerSpeed
    isDefinition: true
    parent: Febucci.UI.Core.TypewriterCore
    commentId: P:Febucci.UI.Core.TypewriterCore.typewriterPlayerSpeed
  Febucci.UI.Core.TypewriterCore.wantsToSkip:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.wantsToSkip
        name: wantsToSkip
        nameWithType: TypewriterCore.wantsToSkip
        qualifiedName: Febucci.UI.Core.TypewriterCore.wantsToSkip
      VB:
      - id: Febucci.UI.Core.TypewriterCore.wantsToSkip
        name: wantsToSkip
        nameWithType: TypewriterCore.wantsToSkip
        qualifiedName: Febucci.UI.Core.TypewriterCore.wantsToSkip
    isDefinition: true
    parent: Febucci.UI.Core.TypewriterCore
    commentId: P:Febucci.UI.Core.TypewriterCore.wantsToSkip
  Febucci.UI.Core.TypewriterCore.isBaseInsideRoutine:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.isBaseInsideRoutine
        name: isBaseInsideRoutine
        nameWithType: TypewriterCore.isBaseInsideRoutine
        qualifiedName: Febucci.UI.Core.TypewriterCore.isBaseInsideRoutine
      VB:
      - id: Febucci.UI.Core.TypewriterCore.isBaseInsideRoutine
        name: isBaseInsideRoutine
        nameWithType: TypewriterCore.isBaseInsideRoutine
        qualifiedName: Febucci.UI.Core.TypewriterCore.isBaseInsideRoutine
    isDefinition: true
    parent: Febucci.UI.Core.TypewriterCore
    commentId: P:Febucci.UI.Core.TypewriterCore.isBaseInsideRoutine
  Febucci.UI.Core.TypewriterCore.textAnimator:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.textAnimator
        name: textAnimator
        nameWithType: TypewriterCore.textAnimator
        qualifiedName: Febucci.UI.Core.TypewriterCore.textAnimator
      VB:
      - id: Febucci.UI.Core.TypewriterCore.textAnimator
        name: textAnimator
        nameWithType: TypewriterCore.textAnimator
        qualifiedName: Febucci.UI.Core.TypewriterCore.textAnimator
    isDefinition: true
    parent: Febucci.UI.Core.TypewriterCore
    commentId: P:Febucci.UI.Core.TypewriterCore.textAnimator
  Febucci.UI.TypewriterByCharacter.avoidMultiplePunctuactionWait*:
    name:
      CSharp:
      - id: Febucci.UI.TypewriterByCharacter.avoidMultiplePunctuactionWait*
        name: avoidMultiplePunctuactionWait
        nameWithType: TypewriterByCharacter.avoidMultiplePunctuactionWait
        qualifiedName: Febucci.UI.TypewriterByCharacter.avoidMultiplePunctuactionWait
      VB:
      - id: Febucci.UI.TypewriterByCharacter.avoidMultiplePunctuactionWait*
        name: avoidMultiplePunctuactionWait
        nameWithType: TypewriterByCharacter.avoidMultiplePunctuactionWait
        qualifiedName: Febucci.UI.TypewriterByCharacter.avoidMultiplePunctuactionWait
    isDefinition: true
    commentId: Overload:Febucci.UI.TypewriterByCharacter.avoidMultiplePunctuactionWait
  Febucci.UI.Core.TypewriterCore.GetWaitAppearanceTimeOf(System.Int32):
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.GetWaitAppearanceTimeOf(System.Int32)
        name: GetWaitAppearanceTimeOf
        nameWithType: TypewriterCore.GetWaitAppearanceTimeOf
        qualifiedName: Febucci.UI.Core.TypewriterCore.GetWaitAppearanceTimeOf
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Core.TypewriterCore.GetWaitAppearanceTimeOf(System.Int32)
        name: GetWaitAppearanceTimeOf
        nameWithType: TypewriterCore.GetWaitAppearanceTimeOf
        qualifiedName: Febucci.UI.Core.TypewriterCore.GetWaitAppearanceTimeOf
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Febucci.UI.Core.TypewriterCore
    commentId: M:Febucci.UI.Core.TypewriterCore.GetWaitAppearanceTimeOf(System.Int32)
  Febucci.UI.TypewriterByCharacter.GetWaitAppearanceTimeOf*:
    name:
      CSharp:
      - id: Febucci.UI.TypewriterByCharacter.GetWaitAppearanceTimeOf*
        name: GetWaitAppearanceTimeOf
        nameWithType: TypewriterByCharacter.GetWaitAppearanceTimeOf
        qualifiedName: Febucci.UI.TypewriterByCharacter.GetWaitAppearanceTimeOf
      VB:
      - id: Febucci.UI.TypewriterByCharacter.GetWaitAppearanceTimeOf*
        name: GetWaitAppearanceTimeOf
        nameWithType: TypewriterByCharacter.GetWaitAppearanceTimeOf
        qualifiedName: Febucci.UI.TypewriterByCharacter.GetWaitAppearanceTimeOf
    isDefinition: true
    commentId: Overload:Febucci.UI.TypewriterByCharacter.GetWaitAppearanceTimeOf
  Febucci.UI.Core.TypewriterCore.GetWaitDisappearanceTimeOf(System.Int32):
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.GetWaitDisappearanceTimeOf(System.Int32)
        name: GetWaitDisappearanceTimeOf
        nameWithType: TypewriterCore.GetWaitDisappearanceTimeOf
        qualifiedName: Febucci.UI.Core.TypewriterCore.GetWaitDisappearanceTimeOf
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Core.TypewriterCore.GetWaitDisappearanceTimeOf(System.Int32)
        name: GetWaitDisappearanceTimeOf
        nameWithType: TypewriterCore.GetWaitDisappearanceTimeOf
        qualifiedName: Febucci.UI.Core.TypewriterCore.GetWaitDisappearanceTimeOf
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Febucci.UI.Core.TypewriterCore
    commentId: M:Febucci.UI.Core.TypewriterCore.GetWaitDisappearanceTimeOf(System.Int32)
  Febucci.UI.TypewriterByCharacter.GetWaitDisappearanceTimeOf*:
    name:
      CSharp:
      - id: Febucci.UI.TypewriterByCharacter.GetWaitDisappearanceTimeOf*
        name: GetWaitDisappearanceTimeOf
        nameWithType: TypewriterByCharacter.GetWaitDisappearanceTimeOf
        qualifiedName: Febucci.UI.TypewriterByCharacter.GetWaitDisappearanceTimeOf
      VB:
      - id: Febucci.UI.TypewriterByCharacter.GetWaitDisappearanceTimeOf*
        name: GetWaitDisappearanceTimeOf
        nameWithType: TypewriterByCharacter.GetWaitDisappearanceTimeOf
        qualifiedName: Febucci.UI.TypewriterByCharacter.GetWaitDisappearanceTimeOf
    isDefinition: true
    commentId: Overload:Febucci.UI.TypewriterByCharacter.GetWaitDisappearanceTimeOf
  Febucci.UI.TypewriterByCharacter:
    name:
      CSharp:
      - id: Febucci.UI.TypewriterByCharacter
        name: TypewriterByCharacter
        nameWithType: TypewriterByCharacter
        qualifiedName: Febucci.UI.TypewriterByCharacter
      VB:
      - id: Febucci.UI.TypewriterByCharacter
        name: TypewriterByCharacter
        nameWithType: TypewriterByCharacter
        qualifiedName: Febucci.UI.TypewriterByCharacter
    isDefinition: true
    parent: Febucci.UI
    commentId: T:Febucci.UI.TypewriterByCharacter
  Febucci.UI.Core.TAnimCore:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore
        name: TAnimCore
        nameWithType: TAnimCore
        qualifiedName: Febucci.UI.Core.TAnimCore
      VB:
      - id: Febucci.UI.Core.TAnimCore
        name: TAnimCore
        nameWithType: TAnimCore
        qualifiedName: Febucci.UI.Core.TAnimCore
    isDefinition: true
    parent: Febucci.UI.Core
    commentId: T:Febucci.UI.Core.TAnimCore
  Febucci.UI.TypewriterByWord.GetWaitAppearanceTimeOf*:
    name:
      CSharp:
      - id: Febucci.UI.TypewriterByWord.GetWaitAppearanceTimeOf*
        name: GetWaitAppearanceTimeOf
        nameWithType: TypewriterByWord.GetWaitAppearanceTimeOf
        qualifiedName: Febucci.UI.TypewriterByWord.GetWaitAppearanceTimeOf
      VB:
      - id: Febucci.UI.TypewriterByWord.GetWaitAppearanceTimeOf*
        name: GetWaitAppearanceTimeOf
        nameWithType: TypewriterByWord.GetWaitAppearanceTimeOf
        qualifiedName: Febucci.UI.TypewriterByWord.GetWaitAppearanceTimeOf
    isDefinition: true
    commentId: Overload:Febucci.UI.TypewriterByWord.GetWaitAppearanceTimeOf
  Febucci.UI.TypewriterByWord.GetWaitDisappearanceTimeOf*:
    name:
      CSharp:
      - id: Febucci.UI.TypewriterByWord.GetWaitDisappearanceTimeOf*
        name: GetWaitDisappearanceTimeOf
        nameWithType: TypewriterByWord.GetWaitDisappearanceTimeOf
        qualifiedName: Febucci.UI.TypewriterByWord.GetWaitDisappearanceTimeOf
      VB:
      - id: Febucci.UI.TypewriterByWord.GetWaitDisappearanceTimeOf*
        name: GetWaitDisappearanceTimeOf
        nameWithType: TypewriterByWord.GetWaitDisappearanceTimeOf
        qualifiedName: Febucci.UI.TypewriterByWord.GetWaitDisappearanceTimeOf
    isDefinition: true
    commentId: Overload:Febucci.UI.TypewriterByWord.GetWaitDisappearanceTimeOf
  Febucci.UI.TypewriterByWord:
    name:
      CSharp:
      - id: Febucci.UI.TypewriterByWord
        name: TypewriterByWord
        nameWithType: TypewriterByWord
        qualifiedName: Febucci.UI.TypewriterByWord
      VB:
      - id: Febucci.UI.TypewriterByWord
        name: TypewriterByWord
        nameWithType: TypewriterByWord
        qualifiedName: Febucci.UI.TypewriterByWord
    isDefinition: true
    commentId: T:Febucci.UI.TypewriterByWord
  IEquatable`1:
    name:
      CSharp:
      - id: IEquatable`1
        name: IEquatable
        nameWithType: IEquatable
        qualifiedName: IEquatable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IEquatable`1
        name: IEquatable
        nameWithType: IEquatable
        qualifiedName: IEquatable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: '!:IEquatable`1'
  IEquatable{Febucci.UI.ModifierInfo}:
    name:
      CSharp:
      - id: IEquatable`1
        name: IEquatable
        nameWithType: IEquatable
        qualifiedName: IEquatable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Febucci.UI.ModifierInfo
        name: ModifierInfo
        nameWithType: ModifierInfo
        qualifiedName: Febucci.UI.ModifierInfo
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: IEquatable`1
        name: IEquatable
        nameWithType: IEquatable
        qualifiedName: IEquatable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Febucci.UI.ModifierInfo
        name: ModifierInfo
        nameWithType: ModifierInfo
        qualifiedName: Febucci.UI.ModifierInfo
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: IEquatable`1
    commentId: '!:IEquatable{Febucci.UI.ModifierInfo}'
  Febucci.UI.ModifierInfo.#ctor*:
    name:
      CSharp:
      - id: Febucci.UI.ModifierInfo.#ctor*
        name: ModifierInfo
        nameWithType: ModifierInfo.ModifierInfo
        qualifiedName: Febucci.UI.ModifierInfo.ModifierInfo
      VB:
      - id: Febucci.UI.ModifierInfo.#ctor*
        name: ModifierInfo
        nameWithType: ModifierInfo.ModifierInfo
        qualifiedName: Febucci.UI.ModifierInfo.ModifierInfo
    isDefinition: true
    commentId: Overload:Febucci.UI.ModifierInfo.#ctor
  Febucci.UI.ModifierInfo:
    name:
      CSharp:
      - id: Febucci.UI.ModifierInfo
        name: ModifierInfo
        nameWithType: ModifierInfo
        qualifiedName: Febucci.UI.ModifierInfo
      VB:
      - id: Febucci.UI.ModifierInfo
        name: ModifierInfo
        nameWithType: ModifierInfo
        qualifiedName: Febucci.UI.ModifierInfo
    isDefinition: true
    parent: Febucci.UI
    commentId: T:Febucci.UI.ModifierInfo
  Febucci.UI.ModifierInfo.Equals*:
    name:
      CSharp:
      - id: Febucci.UI.ModifierInfo.Equals*
        name: Equals
        nameWithType: ModifierInfo.Equals
        qualifiedName: Febucci.UI.ModifierInfo.Equals
      VB:
      - id: Febucci.UI.ModifierInfo.Equals*
        name: Equals
        nameWithType: ModifierInfo.Equals
        qualifiedName: Febucci.UI.ModifierInfo.Equals
    isDefinition: true
    commentId: Overload:Febucci.UI.ModifierInfo.Equals
  Febucci.UI.ModifierInfo.ToString*:
    name:
      CSharp:
      - id: Febucci.UI.ModifierInfo.ToString*
        name: ToString
        nameWithType: ModifierInfo.ToString
        qualifiedName: Febucci.UI.ModifierInfo.ToString
      VB:
      - id: Febucci.UI.ModifierInfo.ToString*
        name: ToString
        nameWithType: ModifierInfo.ToString
        qualifiedName: Febucci.UI.ModifierInfo.ToString
    isDefinition: true
    commentId: Overload:Febucci.UI.ModifierInfo.ToString
  Febucci.UI.TextAnimatorSettings:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimatorSettings
        name: TextAnimatorSettings
        nameWithType: TextAnimatorSettings
        qualifiedName: Febucci.UI.TextAnimatorSettings
      VB:
      - id: Febucci.UI.TextAnimatorSettings
        name: TextAnimatorSettings
        nameWithType: TextAnimatorSettings
        qualifiedName: Febucci.UI.TextAnimatorSettings
    isDefinition: true
    parent: Febucci.UI
    commentId: T:Febucci.UI.TextAnimatorSettings
  Febucci.UI.TextAnimatorSettings.Instance*:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimatorSettings.Instance*
        name: Instance
        nameWithType: TextAnimatorSettings.Instance
        qualifiedName: Febucci.UI.TextAnimatorSettings.Instance
      VB:
      - id: Febucci.UI.TextAnimatorSettings.Instance*
        name: Instance
        nameWithType: TextAnimatorSettings.Instance
        qualifiedName: Febucci.UI.TextAnimatorSettings.Instance
    isDefinition: true
    commentId: Overload:Febucci.UI.TextAnimatorSettings.Instance
  Febucci.UI.TextAnimatorSettings.LoadSettings*:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimatorSettings.LoadSettings*
        name: LoadSettings
        nameWithType: TextAnimatorSettings.LoadSettings
        qualifiedName: Febucci.UI.TextAnimatorSettings.LoadSettings
      VB:
      - id: Febucci.UI.TextAnimatorSettings.LoadSettings*
        name: LoadSettings
        nameWithType: TextAnimatorSettings.LoadSettings
        qualifiedName: Febucci.UI.TextAnimatorSettings.LoadSettings
    isDefinition: true
    commentId: Overload:Febucci.UI.TextAnimatorSettings.LoadSettings
  Febucci.UI.TextAnimatorSettings.UnloadSettings*:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimatorSettings.UnloadSettings*
        name: UnloadSettings
        nameWithType: TextAnimatorSettings.UnloadSettings
        qualifiedName: Febucci.UI.TextAnimatorSettings.UnloadSettings
      VB:
      - id: Febucci.UI.TextAnimatorSettings.UnloadSettings*
        name: UnloadSettings
        nameWithType: TextAnimatorSettings.UnloadSettings
        qualifiedName: Febucci.UI.TextAnimatorSettings.UnloadSettings
    isDefinition: true
    commentId: Overload:Febucci.UI.TextAnimatorSettings.UnloadSettings
  Febucci.UI.TextAnimatorSettings.SetAllEffectsActive*:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimatorSettings.SetAllEffectsActive*
        name: SetAllEffectsActive
        nameWithType: TextAnimatorSettings.SetAllEffectsActive
        qualifiedName: Febucci.UI.TextAnimatorSettings.SetAllEffectsActive
      VB:
      - id: Febucci.UI.TextAnimatorSettings.SetAllEffectsActive*
        name: SetAllEffectsActive
        nameWithType: TextAnimatorSettings.SetAllEffectsActive
        qualifiedName: Febucci.UI.TextAnimatorSettings.SetAllEffectsActive
    isDefinition: true
    commentId: Overload:Febucci.UI.TextAnimatorSettings.SetAllEffectsActive
  Febucci.UI.TextAnimatorSettings.SetAppearancesActive*:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimatorSettings.SetAppearancesActive*
        name: SetAppearancesActive
        nameWithType: TextAnimatorSettings.SetAppearancesActive
        qualifiedName: Febucci.UI.TextAnimatorSettings.SetAppearancesActive
      VB:
      - id: Febucci.UI.TextAnimatorSettings.SetAppearancesActive*
        name: SetAppearancesActive
        nameWithType: TextAnimatorSettings.SetAppearancesActive
        qualifiedName: Febucci.UI.TextAnimatorSettings.SetAppearancesActive
    isDefinition: true
    commentId: Overload:Febucci.UI.TextAnimatorSettings.SetAppearancesActive
  Febucci.UI.TextAnimatorSettings.SetBehaviorsActive*:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimatorSettings.SetBehaviorsActive*
        name: SetBehaviorsActive
        nameWithType: TextAnimatorSettings.SetBehaviorsActive
        qualifiedName: Febucci.UI.TextAnimatorSettings.SetBehaviorsActive
      VB:
      - id: Febucci.UI.TextAnimatorSettings.SetBehaviorsActive*
        name: SetBehaviorsActive
        nameWithType: TextAnimatorSettings.SetBehaviorsActive
        qualifiedName: Febucci.UI.TextAnimatorSettings.SetBehaviorsActive
    isDefinition: true
    commentId: Overload:Febucci.UI.TextAnimatorSettings.SetBehaviorsActive
  Febucci.UI.TextAnimatorSettings.Category`1:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimatorSettings.Category`1
        name: TextAnimatorSettings.Category
        nameWithType: TextAnimatorSettings.Category
        qualifiedName: Febucci.UI.TextAnimatorSettings.Category
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Febucci.UI.TextAnimatorSettings.Category`1
        name: TextAnimatorSettings.Category
        nameWithType: TextAnimatorSettings.Category
        qualifiedName: Febucci.UI.TextAnimatorSettings.Category
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Febucci.UI.TextAnimatorSettings.Category`1
  Febucci.UI.TextAnimatorSettings.Category{AnimationsDatabase}:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimatorSettings.Category`1
        name: TextAnimatorSettings.Category
        nameWithType: TextAnimatorSettings.Category
        qualifiedName: Febucci.UI.TextAnimatorSettings.Category
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: AnimationsDatabase
        name: AnimationsDatabase
        nameWithType: AnimationsDatabase
        qualifiedName: AnimationsDatabase
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Febucci.UI.TextAnimatorSettings.Category`1
        name: TextAnimatorSettings.Category
        nameWithType: TextAnimatorSettings.Category
        qualifiedName: Febucci.UI.TextAnimatorSettings.Category
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: AnimationsDatabase
        name: AnimationsDatabase
        nameWithType: AnimationsDatabase
        qualifiedName: AnimationsDatabase
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Febucci.UI.TextAnimatorSettings.Category`1
    parent: Febucci.UI
    commentId: T:Febucci.UI.TextAnimatorSettings.Category{AnimationsDatabase}
  Febucci.UI.TextAnimatorSettings.Category{ActionDatabase}:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimatorSettings.Category`1
        name: TextAnimatorSettings.Category
        nameWithType: TextAnimatorSettings.Category
        qualifiedName: Febucci.UI.TextAnimatorSettings.Category
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: ActionDatabase
        name: ActionDatabase
        nameWithType: ActionDatabase
        qualifiedName: ActionDatabase
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Febucci.UI.TextAnimatorSettings.Category`1
        name: TextAnimatorSettings.Category
        nameWithType: TextAnimatorSettings.Category
        qualifiedName: Febucci.UI.TextAnimatorSettings.Category
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: ActionDatabase
        name: ActionDatabase
        nameWithType: ActionDatabase
        qualifiedName: ActionDatabase
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Febucci.UI.TextAnimatorSettings.Category`1
    parent: Febucci.UI
    commentId: T:Febucci.UI.TextAnimatorSettings.Category{ActionDatabase}
  StyleSheetScriptable:
    name:
      CSharp:
      - id: StyleSheetScriptable
        name: StyleSheetScriptable
        nameWithType: StyleSheetScriptable
        qualifiedName: StyleSheetScriptable
        isExternal: true
      VB:
      - id: StyleSheetScriptable
        name: StyleSheetScriptable
        nameWithType: StyleSheetScriptable
        qualifiedName: StyleSheetScriptable
        isExternal: true
    isDefinition: true
  Febucci.UI.TextAnimatorSettings.ControlTags:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimatorSettings.ControlTags
        name: TextAnimatorSettings.ControlTags
        nameWithType: TextAnimatorSettings.ControlTags
        qualifiedName: Febucci.UI.TextAnimatorSettings.ControlTags
      VB:
      - id: Febucci.UI.TextAnimatorSettings.ControlTags
        name: TextAnimatorSettings.ControlTags
        nameWithType: TextAnimatorSettings.ControlTags
        qualifiedName: Febucci.UI.TextAnimatorSettings.ControlTags
    isDefinition: true
    parent: Febucci.UI
    commentId: T:Febucci.UI.TextAnimatorSettings.ControlTags
  System.Char:
    name:
      CSharp:
      - id: System.Char
        name: Char
        nameWithType: Char
        qualifiedName: System.Char
        isExternal: true
      VB:
      - id: System.Char
        name: Char
        nameWithType: Char
        qualifiedName: System.Char
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Char
  Febucci.UI.TextAnimatorSettings.Category`1.#ctor*:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimatorSettings.Category`1.#ctor*
        name: Category
        nameWithType: TextAnimatorSettings.Category<T>.Category
        qualifiedName: Febucci.UI.TextAnimatorSettings.Category<T>.Category
      VB:
      - id: Febucci.UI.TextAnimatorSettings.Category`1.#ctor*
        name: Category
        nameWithType: TextAnimatorSettings.Category(Of T).Category
        qualifiedName: Febucci.UI.TextAnimatorSettings.Category(Of T).Category
    isDefinition: true
    commentId: Overload:Febucci.UI.TextAnimatorSettings.Category`1.#ctor
  Febucci.UI.TextAnimatorSettings.ControlTags.#ctor*:
    name:
      CSharp:
      - id: Febucci.UI.TextAnimatorSettings.ControlTags.#ctor*
        name: ControlTags
        nameWithType: TextAnimatorSettings.ControlTags.ControlTags
        qualifiedName: Febucci.UI.TextAnimatorSettings.ControlTags.ControlTags
      VB:
      - id: Febucci.UI.TextAnimatorSettings.ControlTags.#ctor*
        name: ControlTags
        nameWithType: TextAnimatorSettings.ControlTags.ControlTags
        qualifiedName: Febucci.UI.TextAnimatorSettings.ControlTags.ControlTags
    isDefinition: true
    commentId: Overload:Febucci.UI.TextAnimatorSettings.ControlTags.#ctor
  TypewriterCore:
    name:
      CSharp:
      - id: TypewriterCore
        name: TypewriterCore
        nameWithType: TypewriterCore
        qualifiedName: TypewriterCore
        isExternal: true
      VB:
      - id: TypewriterCore
        name: TypewriterCore
        nameWithType: TypewriterCore
        qualifiedName: TypewriterCore
        isExternal: true
    isDefinition: true
  Febucci.UI.Examples.DefaultEffectsExample:
    name:
      CSharp:
      - id: Febucci.UI.Examples.DefaultEffectsExample
        name: DefaultEffectsExample
        nameWithType: DefaultEffectsExample
        qualifiedName: Febucci.UI.Examples.DefaultEffectsExample
      VB:
      - id: Febucci.UI.Examples.DefaultEffectsExample
        name: DefaultEffectsExample
        nameWithType: DefaultEffectsExample
        qualifiedName: Febucci.UI.Examples.DefaultEffectsExample
    isDefinition: true
    commentId: T:Febucci.UI.Examples.DefaultEffectsExample
  Febucci.UI.Examples.UsageExample.ShowText*:
    name:
      CSharp:
      - id: Febucci.UI.Examples.UsageExample.ShowText*
        name: ShowText
        nameWithType: UsageExample.ShowText
        qualifiedName: Febucci.UI.Examples.UsageExample.ShowText
      VB:
      - id: Febucci.UI.Examples.UsageExample.ShowText*
        name: ShowText
        nameWithType: UsageExample.ShowText
        qualifiedName: Febucci.UI.Examples.UsageExample.ShowText
    isDefinition: true
    commentId: Overload:Febucci.UI.Examples.UsageExample.ShowText
  Febucci.UI.Examples.UsageExample:
    name:
      CSharp:
      - id: Febucci.UI.Examples.UsageExample
        name: UsageExample
        nameWithType: UsageExample
        qualifiedName: Febucci.UI.Examples.UsageExample
      VB:
      - id: Febucci.UI.Examples.UsageExample
        name: UsageExample
        nameWithType: UsageExample
        qualifiedName: Febucci.UI.Examples.UsageExample
    isDefinition: true
    commentId: T:Febucci.UI.Examples.UsageExample
  Febucci.UI.Examples:
    name:
      CSharp:
      - name: Febucci.UI.Examples
        nameWithType: Febucci.UI.Examples
        qualifiedName: Febucci.UI.Examples
      VB:
      - name: Febucci.UI.Examples
        nameWithType: Febucci.UI.Examples
        qualifiedName: Febucci.UI.Examples
    isDefinition: true
    commentId: N:Febucci.UI.Examples
  Febucci.UI.Core.ColorCurvePropertyDrawer.OnGUI*:
    name:
      CSharp:
      - id: Febucci.UI.Core.ColorCurvePropertyDrawer.OnGUI*
        name: OnGUI
        nameWithType: ColorCurvePropertyDrawer.OnGUI
        qualifiedName: Febucci.UI.Core.ColorCurvePropertyDrawer.OnGUI
      VB:
      - id: Febucci.UI.Core.ColorCurvePropertyDrawer.OnGUI*
        name: OnGUI
        nameWithType: ColorCurvePropertyDrawer.OnGUI
        qualifiedName: Febucci.UI.Core.ColorCurvePropertyDrawer.OnGUI
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.ColorCurvePropertyDrawer.OnGUI
  Febucci.UI.Core.ColorCurvePropertyDrawer.GetPropertyHeight*:
    name:
      CSharp:
      - id: Febucci.UI.Core.ColorCurvePropertyDrawer.GetPropertyHeight*
        name: GetPropertyHeight
        nameWithType: ColorCurvePropertyDrawer.GetPropertyHeight
        qualifiedName: Febucci.UI.Core.ColorCurvePropertyDrawer.GetPropertyHeight
      VB:
      - id: Febucci.UI.Core.ColorCurvePropertyDrawer.GetPropertyHeight*
        name: GetPropertyHeight
        nameWithType: ColorCurvePropertyDrawer.GetPropertyHeight
        qualifiedName: Febucci.UI.Core.ColorCurvePropertyDrawer.GetPropertyHeight
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.ColorCurvePropertyDrawer.GetPropertyHeight
  Febucci.UI.Core.ColorCurvePropertyDrawer:
    name:
      CSharp:
      - id: Febucci.UI.Core.ColorCurvePropertyDrawer
        name: ColorCurvePropertyDrawer
        nameWithType: ColorCurvePropertyDrawer
        qualifiedName: Febucci.UI.Core.ColorCurvePropertyDrawer
      VB:
      - id: Febucci.UI.Core.ColorCurvePropertyDrawer
        name: ColorCurvePropertyDrawer
        nameWithType: ColorCurvePropertyDrawer
        qualifiedName: Febucci.UI.Core.ColorCurvePropertyDrawer
    isDefinition: true
    commentId: T:Febucci.UI.Core.ColorCurvePropertyDrawer
  Febucci.UI.Core.EmissionCurvePropertyDrawer.OnGUI*:
    name:
      CSharp:
      - id: Febucci.UI.Core.EmissionCurvePropertyDrawer.OnGUI*
        name: OnGUI
        nameWithType: EmissionCurvePropertyDrawer.OnGUI
        qualifiedName: Febucci.UI.Core.EmissionCurvePropertyDrawer.OnGUI
      VB:
      - id: Febucci.UI.Core.EmissionCurvePropertyDrawer.OnGUI*
        name: OnGUI
        nameWithType: EmissionCurvePropertyDrawer.OnGUI
        qualifiedName: Febucci.UI.Core.EmissionCurvePropertyDrawer.OnGUI
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.EmissionCurvePropertyDrawer.OnGUI
  Febucci.UI.Core.EmissionCurvePropertyDrawer.GetPropertyHeight*:
    name:
      CSharp:
      - id: Febucci.UI.Core.EmissionCurvePropertyDrawer.GetPropertyHeight*
        name: GetPropertyHeight
        nameWithType: EmissionCurvePropertyDrawer.GetPropertyHeight
        qualifiedName: Febucci.UI.Core.EmissionCurvePropertyDrawer.GetPropertyHeight
      VB:
      - id: Febucci.UI.Core.EmissionCurvePropertyDrawer.GetPropertyHeight*
        name: GetPropertyHeight
        nameWithType: EmissionCurvePropertyDrawer.GetPropertyHeight
        qualifiedName: Febucci.UI.Core.EmissionCurvePropertyDrawer.GetPropertyHeight
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.EmissionCurvePropertyDrawer.GetPropertyHeight
  Febucci.UI.Core.EmissionCurvePropertyDrawer:
    name:
      CSharp:
      - id: Febucci.UI.Core.EmissionCurvePropertyDrawer
        name: EmissionCurvePropertyDrawer
        nameWithType: EmissionCurvePropertyDrawer
        qualifiedName: Febucci.UI.Core.EmissionCurvePropertyDrawer
      VB:
      - id: Febucci.UI.Core.EmissionCurvePropertyDrawer
        name: EmissionCurvePropertyDrawer
        nameWithType: EmissionCurvePropertyDrawer
        qualifiedName: Febucci.UI.Core.EmissionCurvePropertyDrawer
    isDefinition: true
    commentId: T:Febucci.UI.Core.EmissionCurvePropertyDrawer
  Febucci.UI.Core.FloatCurvePropertyDrawer.OnGUI*:
    name:
      CSharp:
      - id: Febucci.UI.Core.FloatCurvePropertyDrawer.OnGUI*
        name: OnGUI
        nameWithType: FloatCurvePropertyDrawer.OnGUI
        qualifiedName: Febucci.UI.Core.FloatCurvePropertyDrawer.OnGUI
      VB:
      - id: Febucci.UI.Core.FloatCurvePropertyDrawer.OnGUI*
        name: OnGUI
        nameWithType: FloatCurvePropertyDrawer.OnGUI
        qualifiedName: Febucci.UI.Core.FloatCurvePropertyDrawer.OnGUI
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.FloatCurvePropertyDrawer.OnGUI
  Febucci.UI.Core.FloatCurvePropertyDrawer.GetPropertyHeight*:
    name:
      CSharp:
      - id: Febucci.UI.Core.FloatCurvePropertyDrawer.GetPropertyHeight*
        name: GetPropertyHeight
        nameWithType: FloatCurvePropertyDrawer.GetPropertyHeight
        qualifiedName: Febucci.UI.Core.FloatCurvePropertyDrawer.GetPropertyHeight
      VB:
      - id: Febucci.UI.Core.FloatCurvePropertyDrawer.GetPropertyHeight*
        name: GetPropertyHeight
        nameWithType: FloatCurvePropertyDrawer.GetPropertyHeight
        qualifiedName: Febucci.UI.Core.FloatCurvePropertyDrawer.GetPropertyHeight
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.FloatCurvePropertyDrawer.GetPropertyHeight
  Febucci.UI.Core.FloatCurvePropertyDrawer:
    name:
      CSharp:
      - id: Febucci.UI.Core.FloatCurvePropertyDrawer
        name: FloatCurvePropertyDrawer
        nameWithType: FloatCurvePropertyDrawer
        qualifiedName: Febucci.UI.Core.FloatCurvePropertyDrawer
      VB:
      - id: Febucci.UI.Core.FloatCurvePropertyDrawer
        name: FloatCurvePropertyDrawer
        nameWithType: FloatCurvePropertyDrawer
        qualifiedName: Febucci.UI.Core.FloatCurvePropertyDrawer
    isDefinition: true
    commentId: T:Febucci.UI.Core.FloatCurvePropertyDrawer
  Febucci.UI.AnimationLoop.Script:
    commentId: F:Febucci.UI.AnimationLoop.Script
  Febucci.UI.Core.TAnimCore.Animate(System.Single):
    commentId: M:Febucci.UI.Core.TAnimCore.Animate(System.Single)
  Febucci.UI.TimeScale.Unscaled:
    commentId: F:Febucci.UI.TimeScale.Unscaled
  Febucci.UI.Core.TAnimCore.textFull*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.textFull*
        name: textFull
        nameWithType: TAnimCore.textFull
        qualifiedName: Febucci.UI.Core.TAnimCore.textFull
      VB:
      - id: Febucci.UI.Core.TAnimCore.textFull*
        name: textFull
        nameWithType: TAnimCore.textFull
        qualifiedName: Febucci.UI.Core.TAnimCore.textFull
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.textFull
  Febucci.UI.Core.TAnimCore.textWithoutAnyTag:
    commentId: P:Febucci.UI.Core.TAnimCore.textWithoutAnyTag
  Febucci.UI.Core.TAnimCore.textWithoutTextAnimTags*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.textWithoutTextAnimTags*
        name: textWithoutTextAnimTags
        nameWithType: TAnimCore.textWithoutTextAnimTags
        qualifiedName: Febucci.UI.Core.TAnimCore.textWithoutTextAnimTags
      VB:
      - id: Febucci.UI.Core.TAnimCore.textWithoutTextAnimTags*
        name: textWithoutTextAnimTags
        nameWithType: TAnimCore.textWithoutTextAnimTags
        qualifiedName: Febucci.UI.Core.TAnimCore.textWithoutTextAnimTags
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.textWithoutTextAnimTags
  Febucci.UI.Core.TAnimCore.textWithoutAnyTag*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.textWithoutAnyTag*
        name: textWithoutAnyTag
        nameWithType: TAnimCore.textWithoutAnyTag
        qualifiedName: Febucci.UI.Core.TAnimCore.textWithoutAnyTag
      VB:
      - id: Febucci.UI.Core.TAnimCore.textWithoutAnyTag*
        name: textWithoutAnyTag
        nameWithType: TAnimCore.textWithoutAnyTag
        qualifiedName: Febucci.UI.Core.TAnimCore.textWithoutAnyTag
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.textWithoutAnyTag
  Febucci.UI.Core.CharacterData:
    name:
      CSharp:
      - id: Febucci.UI.Core.CharacterData
        name: CharacterData
        nameWithType: CharacterData
        qualifiedName: Febucci.UI.Core.CharacterData
      VB:
      - id: Febucci.UI.Core.CharacterData
        name: CharacterData
        nameWithType: CharacterData
        qualifiedName: Febucci.UI.Core.CharacterData
    isDefinition: true
    parent: Febucci.UI.Core
    commentId: T:Febucci.UI.Core.CharacterData
  Febucci.UI.Core.TAnimCore.latestCharacterShown*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.latestCharacterShown*
        name: latestCharacterShown
        nameWithType: TAnimCore.latestCharacterShown
        qualifiedName: Febucci.UI.Core.TAnimCore.latestCharacterShown
      VB:
      - id: Febucci.UI.Core.TAnimCore.latestCharacterShown*
        name: latestCharacterShown
        nameWithType: TAnimCore.latestCharacterShown
        qualifiedName: Febucci.UI.Core.TAnimCore.latestCharacterShown
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.latestCharacterShown
  Febucci.UI.Core.TAnimCore.allLettersShown*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.allLettersShown*
        name: allLettersShown
        nameWithType: TAnimCore.allLettersShown
        qualifiedName: Febucci.UI.Core.TAnimCore.allLettersShown
      VB:
      - id: Febucci.UI.Core.TAnimCore.allLettersShown*
        name: allLettersShown
        nameWithType: TAnimCore.allLettersShown
        qualifiedName: Febucci.UI.Core.TAnimCore.allLettersShown
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.allLettersShown
  Febucci.UI.Core.TAnimCore.anyLetterVisible*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.anyLetterVisible*
        name: anyLetterVisible
        nameWithType: TAnimCore.anyLetterVisible
        qualifiedName: Febucci.UI.Core.TAnimCore.anyLetterVisible
      VB:
      - id: Febucci.UI.Core.TAnimCore.anyLetterVisible*
        name: anyLetterVisible
        nameWithType: TAnimCore.anyLetterVisible
        qualifiedName: Febucci.UI.Core.TAnimCore.anyLetterVisible
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.anyLetterVisible
  Febucci.UI.Core.TAnimCore.CharactersCount*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.CharactersCount*
        name: CharactersCount
        nameWithType: TAnimCore.CharactersCount
        qualifiedName: Febucci.UI.Core.TAnimCore.CharactersCount
      VB:
      - id: Febucci.UI.Core.TAnimCore.CharactersCount*
        name: CharactersCount
        nameWithType: TAnimCore.CharactersCount
        qualifiedName: Febucci.UI.Core.TAnimCore.CharactersCount
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.CharactersCount
  Febucci.UI.Core.TAnimCore.CharactersCount:
    commentId: P:Febucci.UI.Core.TAnimCore.CharactersCount
  Febucci.UI.Core.CharacterData[]:
    name:
      CSharp:
      - id: Febucci.UI.Core.CharacterData
        name: CharacterData
        nameWithType: CharacterData
        qualifiedName: Febucci.UI.Core.CharacterData
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Febucci.UI.Core.CharacterData
        name: CharacterData
        nameWithType: CharacterData
        qualifiedName: Febucci.UI.Core.CharacterData
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Febucci.UI.Core.TAnimCore.Characters*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.Characters*
        name: Characters
        nameWithType: TAnimCore.Characters
        qualifiedName: Febucci.UI.Core.TAnimCore.Characters
      VB:
      - id: Febucci.UI.Core.TAnimCore.Characters*
        name: Characters
        nameWithType: TAnimCore.Characters
        qualifiedName: Febucci.UI.Core.TAnimCore.Characters
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.Characters
  Febucci.UI.Core.TAnimCore.WordsCount*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.WordsCount*
        name: WordsCount
        nameWithType: TAnimCore.WordsCount
        qualifiedName: Febucci.UI.Core.TAnimCore.WordsCount
      VB:
      - id: Febucci.UI.Core.TAnimCore.WordsCount*
        name: WordsCount
        nameWithType: TAnimCore.WordsCount
        qualifiedName: Febucci.UI.Core.TAnimCore.WordsCount
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.WordsCount
  Febucci.UI.Core.TAnimCore.WordsCount:
    commentId: P:Febucci.UI.Core.TAnimCore.WordsCount
  Febucci.UI.Core.WordInfo[]:
    name:
      CSharp:
      - id: Febucci.UI.Core.WordInfo
        name: WordInfo
        nameWithType: WordInfo
        qualifiedName: Febucci.UI.Core.WordInfo
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Febucci.UI.Core.WordInfo
        name: WordInfo
        nameWithType: WordInfo
        qualifiedName: Febucci.UI.Core.WordInfo
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Febucci.UI.Core.TAnimCore.Words*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.Words*
        name: Words
        nameWithType: TAnimCore.Words
        qualifiedName: Febucci.UI.Core.TAnimCore.Words
      VB:
      - id: Febucci.UI.Core.TAnimCore.Words*
        name: Words
        nameWithType: TAnimCore.Words
        qualifiedName: Febucci.UI.Core.TAnimCore.Words
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.Words
  Febucci.UI.Core.TAnimCore.referenceFontSize:
    commentId: F:Febucci.UI.Core.TAnimCore.referenceFontSize
  Febucci.UI.Core.TAnimCore.useDynamicScaling:
    commentId: F:Febucci.UI.Core.TAnimCore.useDynamicScaling
  Febucci.UI.Core.TAnimCore.useDefaultDatabases:
    commentId: F:Febucci.UI.Core.TAnimCore.useDefaultDatabases
  AnimationsDatabase:
    name:
      CSharp:
      - id: AnimationsDatabase
        name: AnimationsDatabase
        nameWithType: AnimationsDatabase
        qualifiedName: AnimationsDatabase
        isExternal: true
      VB:
      - id: AnimationsDatabase
        name: AnimationsDatabase
        nameWithType: AnimationsDatabase
        qualifiedName: AnimationsDatabase
        isExternal: true
    isDefinition: true
  Febucci.UI.Core.TAnimCore.DatabaseBehaviors*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.DatabaseBehaviors*
        name: DatabaseBehaviors
        nameWithType: TAnimCore.DatabaseBehaviors
        qualifiedName: Febucci.UI.Core.TAnimCore.DatabaseBehaviors
      VB:
      - id: Febucci.UI.Core.TAnimCore.DatabaseBehaviors*
        name: DatabaseBehaviors
        nameWithType: TAnimCore.DatabaseBehaviors
        qualifiedName: Febucci.UI.Core.TAnimCore.DatabaseBehaviors
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.DatabaseBehaviors
  Febucci.UI.Core.TAnimCore.DatabaseAppearances*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.DatabaseAppearances*
        name: DatabaseAppearances
        nameWithType: TAnimCore.DatabaseAppearances
        qualifiedName: Febucci.UI.Core.TAnimCore.DatabaseAppearances
      VB:
      - id: Febucci.UI.Core.TAnimCore.DatabaseAppearances*
        name: DatabaseAppearances
        nameWithType: TAnimCore.DatabaseAppearances
        qualifiedName: Febucci.UI.Core.TAnimCore.DatabaseAppearances
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.DatabaseAppearances
  Febucci.UI.Core.TAnimCore.StyleSheet*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.StyleSheet*
        name: StyleSheet
        nameWithType: TAnimCore.StyleSheet
        qualifiedName: Febucci.UI.Core.TAnimCore.StyleSheet
      VB:
      - id: Febucci.UI.Core.TAnimCore.StyleSheet*
        name: StyleSheet
        nameWithType: TAnimCore.StyleSheet
        qualifiedName: Febucci.UI.Core.TAnimCore.StyleSheet
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.StyleSheet
  AnimationRegion[]:
    name:
      CSharp:
      - id: AnimationRegion
        name: AnimationRegion
        nameWithType: AnimationRegion
        qualifiedName: AnimationRegion
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: AnimationRegion
        name: AnimationRegion
        nameWithType: AnimationRegion
        qualifiedName: AnimationRegion
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Febucci.UI.Core.TAnimCore.Behaviors*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.Behaviors*
        name: Behaviors
        nameWithType: TAnimCore.Behaviors
        qualifiedName: Febucci.UI.Core.TAnimCore.Behaviors
      VB:
      - id: Febucci.UI.Core.TAnimCore.Behaviors*
        name: Behaviors
        nameWithType: TAnimCore.Behaviors
        qualifiedName: Febucci.UI.Core.TAnimCore.Behaviors
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.Behaviors
  Febucci.UI.Core.TAnimCore.Appearances*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.Appearances*
        name: Appearances
        nameWithType: TAnimCore.Appearances
        qualifiedName: Febucci.UI.Core.TAnimCore.Appearances
      VB:
      - id: Febucci.UI.Core.TAnimCore.Appearances*
        name: Appearances
        nameWithType: TAnimCore.Appearances
        qualifiedName: Febucci.UI.Core.TAnimCore.Appearances
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.Appearances
  Febucci.UI.Core.TAnimCore.Disappearances*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.Disappearances*
        name: Disappearances
        nameWithType: TAnimCore.Disappearances
        qualifiedName: Febucci.UI.Core.TAnimCore.Disappearances
      VB:
      - id: Febucci.UI.Core.TAnimCore.Disappearances*
        name: Disappearances
        nameWithType: TAnimCore.Disappearances
        qualifiedName: Febucci.UI.Core.TAnimCore.Disappearances
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.Disappearances
  Febucci.UI.Core.TAnimCore.IsTypewriterEnabledAtIndex(System.Int32):
    commentId: M:Febucci.UI.Core.TAnimCore.IsTypewriterEnabledAtIndex(System.Int32)
  Vector2Int[]:
    name:
      CSharp:
      - id: Vector2Int
        name: Vector2Int
        nameWithType: Vector2Int
        qualifiedName: Vector2Int
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Vector2Int
        name: Vector2Int
        nameWithType: Vector2Int
        qualifiedName: Vector2Int
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Febucci.UI.Core.TAnimCore.TypewriterDisabledRange*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.TypewriterDisabledRange*
        name: TypewriterDisabledRange
        nameWithType: TAnimCore.TypewriterDisabledRange
        qualifiedName: Febucci.UI.Core.TAnimCore.TypewriterDisabledRange
      VB:
      - id: Febucci.UI.Core.TAnimCore.TypewriterDisabledRange*
        name: TypewriterDisabledRange
        nameWithType: TAnimCore.TypewriterDisabledRange
        qualifiedName: Febucci.UI.Core.TAnimCore.TypewriterDisabledRange
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.TypewriterDisabledRange
  Febucci.UI.Core.TAnimCore.TypewriterDisabledRange:
    commentId: P:Febucci.UI.Core.TAnimCore.TypewriterDisabledRange
  Febucci.UI.Core.TAnimCore.IsTypewriterEnabledAtIndex*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.IsTypewriterEnabledAtIndex*
        name: IsTypewriterEnabledAtIndex
        nameWithType: TAnimCore.IsTypewriterEnabledAtIndex
        qualifiedName: Febucci.UI.Core.TAnimCore.IsTypewriterEnabledAtIndex
      VB:
      - id: Febucci.UI.Core.TAnimCore.IsTypewriterEnabledAtIndex*
        name: IsTypewriterEnabledAtIndex
        nameWithType: TAnimCore.IsTypewriterEnabledAtIndex
        qualifiedName: Febucci.UI.Core.TAnimCore.IsTypewriterEnabledAtIndex
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.IsTypewriterEnabledAtIndex
  ActionMarker[]:
    name:
      CSharp:
      - id: ActionMarker
        name: ActionMarker
        nameWithType: ActionMarker
        qualifiedName: ActionMarker
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: ActionMarker
        name: ActionMarker
        nameWithType: ActionMarker
        qualifiedName: ActionMarker
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Febucci.UI.Core.TAnimCore.Actions*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.Actions*
        name: Actions
        nameWithType: TAnimCore.Actions
        qualifiedName: Febucci.UI.Core.TAnimCore.Actions
      VB:
      - id: Febucci.UI.Core.TAnimCore.Actions*
        name: Actions
        nameWithType: TAnimCore.Actions
        qualifiedName: Febucci.UI.Core.TAnimCore.Actions
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.Actions
  ActionDatabase:
    name:
      CSharp:
      - id: ActionDatabase
        name: ActionDatabase
        nameWithType: ActionDatabase
        qualifiedName: ActionDatabase
        isExternal: true
      VB:
      - id: ActionDatabase
        name: ActionDatabase
        nameWithType: ActionDatabase
        qualifiedName: ActionDatabase
        isExternal: true
    isDefinition: true
  Febucci.UI.Core.TAnimCore.DatabaseActions*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.DatabaseActions*
        name: DatabaseActions
        nameWithType: TAnimCore.DatabaseActions
        qualifiedName: Febucci.UI.Core.TAnimCore.DatabaseActions
      VB:
      - id: Febucci.UI.Core.TAnimCore.DatabaseActions*
        name: DatabaseActions
        nameWithType: TAnimCore.DatabaseActions
        qualifiedName: Febucci.UI.Core.TAnimCore.DatabaseActions
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.DatabaseActions
  EventMarker[]:
    name:
      CSharp:
      - id: EventMarker
        name: EventMarker
        nameWithType: EventMarker
        qualifiedName: EventMarker
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: EventMarker
        name: EventMarker
        nameWithType: EventMarker
        qualifiedName: EventMarker
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Febucci.UI.Core.TAnimCore.Events*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.Events*
        name: Events
        nameWithType: TAnimCore.Events
        qualifiedName: Febucci.UI.Core.TAnimCore.Events
      VB:
      - id: Febucci.UI.Core.TAnimCore.Events*
        name: Events
        nameWithType: TAnimCore.Events
        qualifiedName: Febucci.UI.Core.TAnimCore.Events
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.Events
  Febucci.UI.Core.TAnimCore.defaultTagsMode:
    commentId: F:Febucci.UI.Core.TAnimCore.defaultTagsMode
  System.String[]:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Febucci.UI.Core.TAnimCore.DefaultAppearancesTags*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.DefaultAppearancesTags*
        name: DefaultAppearancesTags
        nameWithType: TAnimCore.DefaultAppearancesTags
        qualifiedName: Febucci.UI.Core.TAnimCore.DefaultAppearancesTags
      VB:
      - id: Febucci.UI.Core.TAnimCore.DefaultAppearancesTags*
        name: DefaultAppearancesTags
        nameWithType: TAnimCore.DefaultAppearancesTags
        qualifiedName: Febucci.UI.Core.TAnimCore.DefaultAppearancesTags
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.DefaultAppearancesTags
  Febucci.UI.Core.TAnimCore.DefaultDisappearancesTags*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.DefaultDisappearancesTags*
        name: DefaultDisappearancesTags
        nameWithType: TAnimCore.DefaultDisappearancesTags
        qualifiedName: Febucci.UI.Core.TAnimCore.DefaultDisappearancesTags
      VB:
      - id: Febucci.UI.Core.TAnimCore.DefaultDisappearancesTags*
        name: DefaultDisappearancesTags
        nameWithType: TAnimCore.DefaultDisappearancesTags
        qualifiedName: Febucci.UI.Core.TAnimCore.DefaultDisappearancesTags
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.DefaultDisappearancesTags
  Febucci.UI.Core.TAnimCore.DefaultBehaviorsTags*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.DefaultBehaviorsTags*
        name: DefaultBehaviorsTags
        nameWithType: TAnimCore.DefaultBehaviorsTags
        qualifiedName: Febucci.UI.Core.TAnimCore.DefaultBehaviorsTags
      VB:
      - id: Febucci.UI.Core.TAnimCore.DefaultBehaviorsTags*
        name: DefaultBehaviorsTags
        nameWithType: TAnimCore.DefaultBehaviorsTags
        qualifiedName: Febucci.UI.Core.TAnimCore.DefaultBehaviorsTags
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.DefaultBehaviorsTags
  Febucci.UI.Core.TAnimCore.OnInitialized*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.OnInitialized*
        name: OnInitialized
        nameWithType: TAnimCore.OnInitialized
        qualifiedName: Febucci.UI.Core.TAnimCore.OnInitialized
      VB:
      - id: Febucci.UI.Core.TAnimCore.OnInitialized*
        name: OnInitialized
        nameWithType: TAnimCore.OnInitialized
        qualifiedName: Febucci.UI.Core.TAnimCore.OnInitialized
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.OnInitialized
  Febucci.UI.Core.TAnimCore.GetOriginalTextFromSource*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.GetOriginalTextFromSource*
        name: GetOriginalTextFromSource
        nameWithType: TAnimCore.GetOriginalTextFromSource
        qualifiedName: Febucci.UI.Core.TAnimCore.GetOriginalTextFromSource
      VB:
      - id: Febucci.UI.Core.TAnimCore.GetOriginalTextFromSource*
        name: GetOriginalTextFromSource
        nameWithType: TAnimCore.GetOriginalTextFromSource
        qualifiedName: Febucci.UI.Core.TAnimCore.GetOriginalTextFromSource
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.GetOriginalTextFromSource
  Febucci.UI.Core.TAnimCore.GetStrippedTextFromSource*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.GetStrippedTextFromSource*
        name: GetStrippedTextFromSource
        nameWithType: TAnimCore.GetStrippedTextFromSource
        qualifiedName: Febucci.UI.Core.TAnimCore.GetStrippedTextFromSource
      VB:
      - id: Febucci.UI.Core.TAnimCore.GetStrippedTextFromSource*
        name: GetStrippedTextFromSource
        nameWithType: TAnimCore.GetStrippedTextFromSource
        qualifiedName: Febucci.UI.Core.TAnimCore.GetStrippedTextFromSource
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.GetStrippedTextFromSource
  Febucci.UI.Core.TAnimCore.SetTextToSource*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.SetTextToSource*
        name: SetTextToSource
        nameWithType: TAnimCore.SetTextToSource
        qualifiedName: Febucci.UI.Core.TAnimCore.SetTextToSource
      VB:
      - id: Febucci.UI.Core.TAnimCore.SetTextToSource*
        name: SetTextToSource
        nameWithType: TAnimCore.SetTextToSource
        qualifiedName: Febucci.UI.Core.TAnimCore.SetTextToSource
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.SetTextToSource
  Febucci.UI.Core.TAnimCore.HasChangedText*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.HasChangedText*
        name: HasChangedText
        nameWithType: TAnimCore.HasChangedText
        qualifiedName: Febucci.UI.Core.TAnimCore.HasChangedText
      VB:
      - id: Febucci.UI.Core.TAnimCore.HasChangedText*
        name: HasChangedText
        nameWithType: TAnimCore.HasChangedText
        qualifiedName: Febucci.UI.Core.TAnimCore.HasChangedText
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.HasChangedText
  Febucci.UI.Core.TAnimCore.HasChangedRenderingSettings*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.HasChangedRenderingSettings*
        name: HasChangedRenderingSettings
        nameWithType: TAnimCore.HasChangedRenderingSettings
        qualifiedName: Febucci.UI.Core.TAnimCore.HasChangedRenderingSettings
      VB:
      - id: Febucci.UI.Core.TAnimCore.HasChangedRenderingSettings*
        name: HasChangedRenderingSettings
        nameWithType: TAnimCore.HasChangedRenderingSettings
        qualifiedName: Febucci.UI.Core.TAnimCore.HasChangedRenderingSettings
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.HasChangedRenderingSettings
  Febucci.UI.Core.TAnimCore.GetCharactersCount*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.GetCharactersCount*
        name: GetCharactersCount
        nameWithType: TAnimCore.GetCharactersCount
        qualifiedName: Febucci.UI.Core.TAnimCore.GetCharactersCount
      VB:
      - id: Febucci.UI.Core.TAnimCore.GetCharactersCount*
        name: GetCharactersCount
        nameWithType: TAnimCore.GetCharactersCount
        qualifiedName: Febucci.UI.Core.TAnimCore.GetCharactersCount
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.GetCharactersCount
  Febucci.UI.Core.TAnimCore.OnForceMeshUpdate*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.OnForceMeshUpdate*
        name: OnForceMeshUpdate
        nameWithType: TAnimCore.OnForceMeshUpdate
        qualifiedName: Febucci.UI.Core.TAnimCore.OnForceMeshUpdate
      VB:
      - id: Febucci.UI.Core.TAnimCore.OnForceMeshUpdate*
        name: OnForceMeshUpdate
        nameWithType: TAnimCore.OnForceMeshUpdate
        qualifiedName: Febucci.UI.Core.TAnimCore.OnForceMeshUpdate
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.OnForceMeshUpdate
  Febucci.UI.Core.TAnimCore.CopyMeshFromSource*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.CopyMeshFromSource*
        name: CopyMeshFromSource
        nameWithType: TAnimCore.CopyMeshFromSource
        qualifiedName: Febucci.UI.Core.TAnimCore.CopyMeshFromSource
      VB:
      - id: Febucci.UI.Core.TAnimCore.CopyMeshFromSource*
        name: CopyMeshFromSource
        nameWithType: TAnimCore.CopyMeshFromSource
        qualifiedName: Febucci.UI.Core.TAnimCore.CopyMeshFromSource
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.CopyMeshFromSource
  Febucci.UI.Core.TAnimCore.PasteMeshToSource*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.PasteMeshToSource*
        name: PasteMeshToSource
        nameWithType: TAnimCore.PasteMeshToSource
        qualifiedName: Febucci.UI.Core.TAnimCore.PasteMeshToSource
      VB:
      - id: Febucci.UI.Core.TAnimCore.PasteMeshToSource*
        name: PasteMeshToSource
        nameWithType: TAnimCore.PasteMeshToSource
        qualifiedName: Febucci.UI.Core.TAnimCore.PasteMeshToSource
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.PasteMeshToSource
  Febucci.UI.Core.TAnimCore.GetFirstCharacterIndexInsidePage*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.GetFirstCharacterIndexInsidePage*
        name: GetFirstCharacterIndexInsidePage
        nameWithType: TAnimCore.GetFirstCharacterIndexInsidePage
        qualifiedName: Febucci.UI.Core.TAnimCore.GetFirstCharacterIndexInsidePage
      VB:
      - id: Febucci.UI.Core.TAnimCore.GetFirstCharacterIndexInsidePage*
        name: GetFirstCharacterIndexInsidePage
        nameWithType: TAnimCore.GetFirstCharacterIndexInsidePage
        qualifiedName: Febucci.UI.Core.TAnimCore.GetFirstCharacterIndexInsidePage
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.GetFirstCharacterIndexInsidePage
  Febucci.UI.Core.TAnimCore.GetRenderedCharactersCountInsidePage*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.GetRenderedCharactersCountInsidePage*
        name: GetRenderedCharactersCountInsidePage
        nameWithType: TAnimCore.GetRenderedCharactersCountInsidePage
        qualifiedName: Febucci.UI.Core.TAnimCore.GetRenderedCharactersCountInsidePage
      VB:
      - id: Febucci.UI.Core.TAnimCore.GetRenderedCharactersCountInsidePage*
        name: GetRenderedCharactersCountInsidePage
        nameWithType: TAnimCore.GetRenderedCharactersCountInsidePage
        qualifiedName: Febucci.UI.Core.TAnimCore.GetRenderedCharactersCountInsidePage
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.GetRenderedCharactersCountInsidePage
  Febucci.UI.Core.TAnimCore.DefaultTagsMode:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.DefaultTagsMode
        name: TAnimCore.DefaultTagsMode
        nameWithType: TAnimCore.DefaultTagsMode
        qualifiedName: Febucci.UI.Core.TAnimCore.DefaultTagsMode
      VB:
      - id: Febucci.UI.Core.TAnimCore.DefaultTagsMode
        name: TAnimCore.DefaultTagsMode
        nameWithType: TAnimCore.DefaultTagsMode
        qualifiedName: Febucci.UI.Core.TAnimCore.DefaultTagsMode
    isDefinition: true
    parent: Febucci.UI.Core
    commentId: T:Febucci.UI.Core.TAnimCore.DefaultTagsMode
  Febucci.UI.Core.TAnimCore.GetExtraParsers*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.GetExtraParsers*
        name: GetExtraParsers
        nameWithType: TAnimCore.GetExtraParsers
        qualifiedName: Febucci.UI.Core.TAnimCore.GetExtraParsers
      VB:
      - id: Febucci.UI.Core.TAnimCore.GetExtraParsers*
        name: GetExtraParsers
        nameWithType: TAnimCore.GetExtraParsers
        qualifiedName: Febucci.UI.Core.TAnimCore.GetExtraParsers
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.GetExtraParsers
  Febucci.UI.Core.TAnimCore.SetText(System.String,System.Boolean):
    commentId: M:Febucci.UI.Core.TAnimCore.SetText(System.String,System.Boolean)
  Febucci.UI.Core.TAnimCore.SetText*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.SetText*
        name: SetText
        nameWithType: TAnimCore.SetText
        qualifiedName: Febucci.UI.Core.TAnimCore.SetText
      VB:
      - id: Febucci.UI.Core.TAnimCore.SetText*
        name: SetText
        nameWithType: TAnimCore.SetText
        qualifiedName: Febucci.UI.Core.TAnimCore.SetText
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.SetText
  Febucci.UI.Core.TAnimCore.SwapText*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.SwapText*
        name: SwapText
        nameWithType: TAnimCore.SwapText
        qualifiedName: Febucci.UI.Core.TAnimCore.SwapText
      VB:
      - id: Febucci.UI.Core.TAnimCore.SwapText*
        name: SwapText
        nameWithType: TAnimCore.SwapText
        qualifiedName: Febucci.UI.Core.TAnimCore.SwapText
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.SwapText
  Febucci.UI.Core.TAnimCore.AppendText*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.AppendText*
        name: AppendText
        nameWithType: TAnimCore.AppendText
        qualifiedName: Febucci.UI.Core.TAnimCore.AppendText
      VB:
      - id: Febucci.UI.Core.TAnimCore.AppendText*
        name: AppendText
        nameWithType: TAnimCore.AppendText
        qualifiedName: Febucci.UI.Core.TAnimCore.AppendText
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.AppendText
  Febucci.UI.Core.TAnimCore.Characters:
    commentId: P:Febucci.UI.Core.TAnimCore.Characters
  Febucci.UI.Core.TAnimCore.SetVisibilityChar*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.SetVisibilityChar*
        name: SetVisibilityChar
        nameWithType: TAnimCore.SetVisibilityChar
        qualifiedName: Febucci.UI.Core.TAnimCore.SetVisibilityChar
      VB:
      - id: Febucci.UI.Core.TAnimCore.SetVisibilityChar*
        name: SetVisibilityChar
        nameWithType: TAnimCore.SetVisibilityChar
        qualifiedName: Febucci.UI.Core.TAnimCore.SetVisibilityChar
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.SetVisibilityChar
  Febucci.UI.Core.TAnimCore.Words:
    commentId: P:Febucci.UI.Core.TAnimCore.Words
  Febucci.UI.Core.TAnimCore.SetVisibilityWord*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.SetVisibilityWord*
        name: SetVisibilityWord
        nameWithType: TAnimCore.SetVisibilityWord
        qualifiedName: Febucci.UI.Core.TAnimCore.SetVisibilityWord
      VB:
      - id: Febucci.UI.Core.TAnimCore.SetVisibilityWord*
        name: SetVisibilityWord
        nameWithType: TAnimCore.SetVisibilityWord
        qualifiedName: Febucci.UI.Core.TAnimCore.SetVisibilityWord
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.SetVisibilityWord
  Febucci.UI.Core.TAnimCore.SetVisibilityEntireText*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.SetVisibilityEntireText*
        name: SetVisibilityEntireText
        nameWithType: TAnimCore.SetVisibilityEntireText
        qualifiedName: Febucci.UI.Core.TAnimCore.SetVisibilityEntireText
      VB:
      - id: Febucci.UI.Core.TAnimCore.SetVisibilityEntireText*
        name: SetVisibilityEntireText
        nameWithType: TAnimCore.SetVisibilityEntireText
        qualifiedName: Febucci.UI.Core.TAnimCore.SetVisibilityEntireText
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.SetVisibilityEntireText
  Febucci.UI.Core.TAnimCore.SetVisibilityChar(System.Int32,System.Boolean,System.Boolean):
    commentId: M:Febucci.UI.Core.TAnimCore.SetVisibilityChar(System.Int32,System.Boolean,System.Boolean)
  Febucci.UI.Core.CharacterData.isVisible:
    commentId: F:Febucci.UI.Core.CharacterData.isVisible
  Febucci.UI.Core.TAnimCore.firstVisibleCharacter*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.firstVisibleCharacter*
        name: firstVisibleCharacter
        nameWithType: TAnimCore.firstVisibleCharacter
        qualifiedName: Febucci.UI.Core.TAnimCore.firstVisibleCharacter
      VB:
      - id: Febucci.UI.Core.TAnimCore.firstVisibleCharacter*
        name: firstVisibleCharacter
        nameWithType: TAnimCore.firstVisibleCharacter
        qualifiedName: Febucci.UI.Core.TAnimCore.firstVisibleCharacter
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.firstVisibleCharacter
  Febucci.UI.Core.TAnimCore.maxVisibleCharacters*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.maxVisibleCharacters*
        name: maxVisibleCharacters
        nameWithType: TAnimCore.maxVisibleCharacters
        qualifiedName: Febucci.UI.Core.TAnimCore.maxVisibleCharacters
      VB:
      - id: Febucci.UI.Core.TAnimCore.maxVisibleCharacters*
        name: maxVisibleCharacters
        nameWithType: TAnimCore.maxVisibleCharacters
        qualifiedName: Febucci.UI.Core.TAnimCore.maxVisibleCharacters
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.maxVisibleCharacters
  Febucci.UI.Core.TAnimCore.IsReady*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.IsReady*
        name: IsReady
        nameWithType: TAnimCore.IsReady
        qualifiedName: Febucci.UI.Core.TAnimCore.IsReady
      VB:
      - id: Febucci.UI.Core.TAnimCore.IsReady*
        name: IsReady
        nameWithType: TAnimCore.IsReady
        qualifiedName: Febucci.UI.Core.TAnimCore.IsReady
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.IsReady
  Febucci.UI.Core.TAnimCore.animationLoop:
    commentId: F:Febucci.UI.Core.TAnimCore.animationLoop
  Febucci.UI.Core.TAnimCore.Animate*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.Animate*
        name: Animate
        nameWithType: TAnimCore.Animate
        qualifiedName: Febucci.UI.Core.TAnimCore.Animate
      VB:
      - id: Febucci.UI.Core.TAnimCore.Animate*
        name: Animate
        nameWithType: TAnimCore.Animate
        qualifiedName: Febucci.UI.Core.TAnimCore.Animate
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.Animate
  Febucci.UI.Core.TAnimCore.ScheduleMeshRefresh*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.ScheduleMeshRefresh*
        name: ScheduleMeshRefresh
        nameWithType: TAnimCore.ScheduleMeshRefresh
        qualifiedName: Febucci.UI.Core.TAnimCore.ScheduleMeshRefresh
      VB:
      - id: Febucci.UI.Core.TAnimCore.ScheduleMeshRefresh*
        name: ScheduleMeshRefresh
        nameWithType: TAnimCore.ScheduleMeshRefresh
        qualifiedName: Febucci.UI.Core.TAnimCore.ScheduleMeshRefresh
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.ScheduleMeshRefresh
  Febucci.UI.Core.TAnimCore.ForceDatabaseRefresh*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.ForceDatabaseRefresh*
        name: ForceDatabaseRefresh
        nameWithType: TAnimCore.ForceDatabaseRefresh
        qualifiedName: Febucci.UI.Core.TAnimCore.ForceDatabaseRefresh
      VB:
      - id: Febucci.UI.Core.TAnimCore.ForceDatabaseRefresh*
        name: ForceDatabaseRefresh
        nameWithType: TAnimCore.ForceDatabaseRefresh
        qualifiedName: Febucci.UI.Core.TAnimCore.ForceDatabaseRefresh
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.ForceDatabaseRefresh
  Febucci.UI.TextAnimatorSettings.SetBehaviorsActive(System.Boolean):
    commentId: M:Febucci.UI.TextAnimatorSettings.SetBehaviorsActive(System.Boolean)
  Febucci.UI.Core.TAnimCore.SetBehaviorsActive*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.SetBehaviorsActive*
        name: SetBehaviorsActive
        nameWithType: TAnimCore.SetBehaviorsActive
        qualifiedName: Febucci.UI.Core.TAnimCore.SetBehaviorsActive
      VB:
      - id: Febucci.UI.Core.TAnimCore.SetBehaviorsActive*
        name: SetBehaviorsActive
        nameWithType: TAnimCore.SetBehaviorsActive
        qualifiedName: Febucci.UI.Core.TAnimCore.SetBehaviorsActive
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.SetBehaviorsActive
  Febucci.UI.TextAnimatorSettings.SetAppearancesActive(System.Boolean):
    commentId: M:Febucci.UI.TextAnimatorSettings.SetAppearancesActive(System.Boolean)
  Febucci.UI.Core.TAnimCore.SetAppearancesActive*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.SetAppearancesActive*
        name: SetAppearancesActive
        nameWithType: TAnimCore.SetAppearancesActive
        qualifiedName: Febucci.UI.Core.TAnimCore.SetAppearancesActive
      VB:
      - id: Febucci.UI.Core.TAnimCore.SetAppearancesActive*
        name: SetAppearancesActive
        nameWithType: TAnimCore.SetAppearancesActive
        qualifiedName: Febucci.UI.Core.TAnimCore.SetAppearancesActive
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.SetAppearancesActive
  Febucci.UI.Core.TAnimCore.OnEnable*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.OnEnable*
        name: OnEnable
        nameWithType: TAnimCore.OnEnable
        qualifiedName: Febucci.UI.Core.TAnimCore.OnEnable
      VB:
      - id: Febucci.UI.Core.TAnimCore.OnEnable*
        name: OnEnable
        nameWithType: TAnimCore.OnEnable
        qualifiedName: Febucci.UI.Core.TAnimCore.OnEnable
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.OnEnable
  Febucci.UI.Core.TAnimCore.ResetState*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.ResetState*
        name: ResetState
        nameWithType: TAnimCore.ResetState
        qualifiedName: Febucci.UI.Core.TAnimCore.ResetState
      VB:
      - id: Febucci.UI.Core.TAnimCore.ResetState*
        name: ResetState
        nameWithType: TAnimCore.ResetState
        qualifiedName: Febucci.UI.Core.TAnimCore.ResetState
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.ResetState
  Febucci.UI.Core.TAnimCore.EnableAllEffects*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.EnableAllEffects*
        name: EnableAllEffects
        nameWithType: TAnimCore.EnableAllEffects
        qualifiedName: Febucci.UI.Core.TAnimCore.EnableAllEffects
      VB:
      - id: Febucci.UI.Core.TAnimCore.EnableAllEffects*
        name: EnableAllEffects
        nameWithType: TAnimCore.EnableAllEffects
        qualifiedName: Febucci.UI.Core.TAnimCore.EnableAllEffects
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.EnableAllEffects
  Febucci.UI.Core.TAnimCore.EnableAppearances*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.EnableAppearances*
        name: EnableAppearances
        nameWithType: TAnimCore.EnableAppearances
        qualifiedName: Febucci.UI.Core.TAnimCore.EnableAppearances
      VB:
      - id: Febucci.UI.Core.TAnimCore.EnableAppearances*
        name: EnableAppearances
        nameWithType: TAnimCore.EnableAppearances
        qualifiedName: Febucci.UI.Core.TAnimCore.EnableAppearances
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.EnableAppearances
  Febucci.UI.Core.TAnimCore.EnableBehaviors*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.EnableBehaviors*
        name: EnableBehaviors
        nameWithType: TAnimCore.EnableBehaviors
        qualifiedName: Febucci.UI.Core.TAnimCore.EnableBehaviors
      VB:
      - id: Febucci.UI.Core.TAnimCore.EnableBehaviors*
        name: EnableBehaviors
        nameWithType: TAnimCore.EnableBehaviors
        qualifiedName: Febucci.UI.Core.TAnimCore.EnableBehaviors
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.EnableBehaviors
  Febucci.UI.Core.TAnimCore.EnableAppearancesLocally*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.EnableAppearancesLocally*
        name: EnableAppearancesLocally
        nameWithType: TAnimCore.EnableAppearancesLocally
        qualifiedName: Febucci.UI.Core.TAnimCore.EnableAppearancesLocally
      VB:
      - id: Febucci.UI.Core.TAnimCore.EnableAppearancesLocally*
        name: EnableAppearancesLocally
        nameWithType: TAnimCore.EnableAppearancesLocally
        qualifiedName: Febucci.UI.Core.TAnimCore.EnableAppearancesLocally
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.EnableAppearancesLocally
  Febucci.UI.Core.TAnimCore.EnableBehaviorsLocally*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.EnableBehaviorsLocally*
        name: EnableBehaviorsLocally
        nameWithType: TAnimCore.EnableBehaviorsLocally
        qualifiedName: Febucci.UI.Core.TAnimCore.EnableBehaviorsLocally
      VB:
      - id: Febucci.UI.Core.TAnimCore.EnableBehaviorsLocally*
        name: EnableBehaviorsLocally
        nameWithType: TAnimCore.EnableBehaviorsLocally
        qualifiedName: Febucci.UI.Core.TAnimCore.EnableBehaviorsLocally
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.EnableBehaviorsLocally
  Febucci.UI.Core.TAnimCore.ShowAllCharacters*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.ShowAllCharacters*
        name: ShowAllCharacters
        nameWithType: TAnimCore.ShowAllCharacters
        qualifiedName: Febucci.UI.Core.TAnimCore.ShowAllCharacters
      VB:
      - id: Febucci.UI.Core.TAnimCore.ShowAllCharacters*
        name: ShowAllCharacters
        nameWithType: TAnimCore.ShowAllCharacters
        qualifiedName: Febucci.UI.Core.TAnimCore.ShowAllCharacters
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.ShowAllCharacters
  Febucci.UI.Core.TAnimCore.UpdateEffects*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.UpdateEffects*
        name: UpdateEffects
        nameWithType: TAnimCore.UpdateEffects
        qualifiedName: Febucci.UI.Core.TAnimCore.UpdateEffects
      VB:
      - id: Febucci.UI.Core.TAnimCore.UpdateEffects*
        name: UpdateEffects
        nameWithType: TAnimCore.UpdateEffects
        qualifiedName: Febucci.UI.Core.TAnimCore.UpdateEffects
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.UpdateEffects
  Febucci.UI.Core.TAnimCore.TriggerRemainingEvents*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.TriggerRemainingEvents*
        name: TriggerRemainingEvents
        nameWithType: TAnimCore.TriggerRemainingEvents
        qualifiedName: Febucci.UI.Core.TAnimCore.TriggerRemainingEvents
      VB:
      - id: Febucci.UI.Core.TAnimCore.TriggerRemainingEvents*
        name: TriggerRemainingEvents
        nameWithType: TAnimCore.TriggerRemainingEvents
        qualifiedName: Febucci.UI.Core.TAnimCore.TriggerRemainingEvents
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.TriggerRemainingEvents
  Febucci.UI.Core.TAnimCore.TriggerVisibleEvents*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.TriggerVisibleEvents*
        name: TriggerVisibleEvents
        nameWithType: TAnimCore.TriggerVisibleEvents
        qualifiedName: Febucci.UI.Core.TAnimCore.TriggerVisibleEvents
      VB:
      - id: Febucci.UI.Core.TAnimCore.TriggerVisibleEvents*
        name: TriggerVisibleEvents
        nameWithType: TAnimCore.TriggerVisibleEvents
        qualifiedName: Febucci.UI.Core.TAnimCore.TriggerVisibleEvents
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.TriggerVisibleEvents
  Febucci.UI.Core.TAnimCore.ForceMeshRefresh*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.ForceMeshRefresh*
        name: ForceMeshRefresh
        nameWithType: TAnimCore.ForceMeshRefresh
        qualifiedName: Febucci.UI.Core.TAnimCore.ForceMeshRefresh
      VB:
      - id: Febucci.UI.Core.TAnimCore.ForceMeshRefresh*
        name: ForceMeshRefresh
        nameWithType: TAnimCore.ForceMeshRefresh
        qualifiedName: Febucci.UI.Core.TAnimCore.ForceMeshRefresh
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.ForceMeshRefresh
  Febucci.UI.Core.TAnimCore.ResetEffectsTime*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.ResetEffectsTime*
        name: ResetEffectsTime
        nameWithType: TAnimCore.ResetEffectsTime
        qualifiedName: Febucci.UI.Core.TAnimCore.ResetEffectsTime
      VB:
      - id: Febucci.UI.Core.TAnimCore.ResetEffectsTime*
        name: ResetEffectsTime
        nameWithType: TAnimCore.ResetEffectsTime
        qualifiedName: Febucci.UI.Core.TAnimCore.ResetEffectsTime
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.ResetEffectsTime
  Febucci.UI.Core.TAnimCore.isResettingEffectsOnNewText*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.isResettingEffectsOnNewText*
        name: isResettingEffectsOnNewText
        nameWithType: TAnimCore.isResettingEffectsOnNewText
        qualifiedName: Febucci.UI.Core.TAnimCore.isResettingEffectsOnNewText
      VB:
      - id: Febucci.UI.Core.TAnimCore.isResettingEffectsOnNewText*
        name: isResettingEffectsOnNewText
        nameWithType: TAnimCore.isResettingEffectsOnNewText
        qualifiedName: Febucci.UI.Core.TAnimCore.isResettingEffectsOnNewText
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.isResettingEffectsOnNewText
  Febucci.UI.Core.TAnimCore.updateMode*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.updateMode*
        name: updateMode
        nameWithType: TAnimCore.updateMode
        qualifiedName: Febucci.UI.Core.TAnimCore.updateMode
      VB:
      - id: Febucci.UI.Core.TAnimCore.updateMode*
        name: updateMode
        nameWithType: TAnimCore.updateMode
        qualifiedName: Febucci.UI.Core.TAnimCore.updateMode
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.updateMode
  Febucci.UI.Core.MessageEvent:
    name:
      CSharp:
      - id: Febucci.UI.Core.MessageEvent
        name: MessageEvent
        nameWithType: MessageEvent
        qualifiedName: Febucci.UI.Core.MessageEvent
      VB:
      - id: Febucci.UI.Core.MessageEvent
        name: MessageEvent
        nameWithType: MessageEvent
        qualifiedName: Febucci.UI.Core.MessageEvent
    isDefinition: true
    parent: Febucci.UI.Core
    commentId: T:Febucci.UI.Core.MessageEvent
  Febucci.UI.Core.TAnimCore.onEvent*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.onEvent*
        name: onEvent
        nameWithType: TAnimCore.onEvent
        qualifiedName: Febucci.UI.Core.TAnimCore.onEvent
      VB:
      - id: Febucci.UI.Core.TAnimCore.onEvent*
        name: onEvent
        nameWithType: TAnimCore.onEvent
        qualifiedName: Febucci.UI.Core.TAnimCore.onEvent
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.onEvent
  Febucci.UI.Core.TAnimCore.effectsAppearancesEnabled*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.effectsAppearancesEnabled*
        name: effectsAppearancesEnabled
        nameWithType: TAnimCore.effectsAppearancesEnabled
        qualifiedName: Febucci.UI.Core.TAnimCore.effectsAppearancesEnabled
      VB:
      - id: Febucci.UI.Core.TAnimCore.effectsAppearancesEnabled*
        name: effectsAppearancesEnabled
        nameWithType: TAnimCore.effectsAppearancesEnabled
        qualifiedName: Febucci.UI.Core.TAnimCore.effectsAppearancesEnabled
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.effectsAppearancesEnabled
  Febucci.UI.Core.TAnimCore.effectsBehaviorsEnabled*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.effectsBehaviorsEnabled*
        name: effectsBehaviorsEnabled
        nameWithType: TAnimCore.effectsBehaviorsEnabled
        qualifiedName: Febucci.UI.Core.TAnimCore.effectsBehaviorsEnabled
      VB:
      - id: Febucci.UI.Core.TAnimCore.effectsBehaviorsEnabled*
        name: effectsBehaviorsEnabled
        nameWithType: TAnimCore.effectsBehaviorsEnabled
        qualifiedName: Febucci.UI.Core.TAnimCore.effectsBehaviorsEnabled
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.effectsBehaviorsEnabled
  Febucci.UI.Core.TAnimCore.text*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.text*
        name: text
        nameWithType: TAnimCore.text
        qualifiedName: Febucci.UI.Core.TAnimCore.text
      VB:
      - id: Febucci.UI.Core.TAnimCore.text*
        name: text
        nameWithType: TAnimCore.text
        qualifiedName: Febucci.UI.Core.TAnimCore.text
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.text
  Febucci.UI.Core.TAnimCore.effectIntensityMultiplier*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TAnimCore.effectIntensityMultiplier*
        name: effectIntensityMultiplier
        nameWithType: TAnimCore.effectIntensityMultiplier
        qualifiedName: Febucci.UI.Core.TAnimCore.effectIntensityMultiplier
      VB:
      - id: Febucci.UI.Core.TAnimCore.effectIntensityMultiplier*
        name: effectIntensityMultiplier
        nameWithType: TAnimCore.effectIntensityMultiplier
        qualifiedName: Febucci.UI.Core.TAnimCore.effectIntensityMultiplier
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TAnimCore.effectIntensityMultiplier
  Febucci.UI.Core.CharacterEvent:
    name:
      CSharp:
      - id: Febucci.UI.Core.CharacterEvent
        name: CharacterEvent
        nameWithType: CharacterEvent
        qualifiedName: Febucci.UI.Core.CharacterEvent
      VB:
      - id: Febucci.UI.Core.CharacterEvent
        name: CharacterEvent
        nameWithType: CharacterEvent
        qualifiedName: Febucci.UI.Core.CharacterEvent
    isDefinition: true
    parent: Febucci.UI.Core
    commentId: T:Febucci.UI.Core.CharacterEvent
  Febucci.UI.Core.TypewriterCore.TextAnimator*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.TextAnimator*
        name: TextAnimator
        nameWithType: TypewriterCore.TextAnimator
        qualifiedName: Febucci.UI.Core.TypewriterCore.TextAnimator
      VB:
      - id: Febucci.UI.Core.TypewriterCore.TextAnimator*
        name: TextAnimator
        nameWithType: TypewriterCore.TextAnimator
        qualifiedName: Febucci.UI.Core.TypewriterCore.TextAnimator
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TypewriterCore.TextAnimator
  Febucci.UI.Core.TypewriterCore.StartTypewriterMode:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.StartTypewriterMode
        name: TypewriterCore.StartTypewriterMode
        nameWithType: TypewriterCore.StartTypewriterMode
        qualifiedName: Febucci.UI.Core.TypewriterCore.StartTypewriterMode
      VB:
      - id: Febucci.UI.Core.TypewriterCore.StartTypewriterMode
        name: TypewriterCore.StartTypewriterMode
        nameWithType: TypewriterCore.StartTypewriterMode
        qualifiedName: Febucci.UI.Core.TypewriterCore.StartTypewriterMode
    isDefinition: true
    parent: Febucci.UI.Core
    commentId: T:Febucci.UI.Core.TypewriterCore.StartTypewriterMode
  Febucci.UI.Core.TypewriterCore.DisappearanceOrientation:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.DisappearanceOrientation
        name: TypewriterCore.DisappearanceOrientation
        nameWithType: TypewriterCore.DisappearanceOrientation
        qualifiedName: Febucci.UI.Core.TypewriterCore.DisappearanceOrientation
      VB:
      - id: Febucci.UI.Core.TypewriterCore.DisappearanceOrientation
        name: TypewriterCore.DisappearanceOrientation
        nameWithType: TypewriterCore.DisappearanceOrientation
        qualifiedName: Febucci.UI.Core.TypewriterCore.DisappearanceOrientation
    isDefinition: true
    parent: Febucci.UI.Core
    commentId: T:Febucci.UI.Core.TypewriterCore.DisappearanceOrientation
  UnityEvent:
    name:
      CSharp:
      - id: UnityEvent
        name: UnityEvent
        nameWithType: UnityEvent
        qualifiedName: UnityEvent
        isExternal: true
      VB:
      - id: UnityEvent
        name: UnityEvent
        nameWithType: UnityEvent
        qualifiedName: UnityEvent
        isExternal: true
    isDefinition: true
  Febucci.UI.Core.TypewriterCore.StartTypewriterMode.OnShowText:
    commentId: F:Febucci.UI.Core.TypewriterCore.StartTypewriterMode.OnShowText
  Febucci.UI.Core.TypewriterCore.StartTypewriterMode.OnEnable:
    commentId: F:Febucci.UI.Core.TypewriterCore.StartTypewriterMode.OnEnable
  Febucci.UI.Core.TypewriterCore.ShowText*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.ShowText*
        name: ShowText
        nameWithType: TypewriterCore.ShowText
        qualifiedName: Febucci.UI.Core.TypewriterCore.ShowText
      VB:
      - id: Febucci.UI.Core.TypewriterCore.ShowText*
        name: ShowText
        nameWithType: TypewriterCore.ShowText
        qualifiedName: Febucci.UI.Core.TypewriterCore.ShowText
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TypewriterCore.ShowText
  Febucci.UI.Core.TypewriterCore.SkipTypewriter*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.SkipTypewriter*
        name: SkipTypewriter
        nameWithType: TypewriterCore.SkipTypewriter
        qualifiedName: Febucci.UI.Core.TypewriterCore.SkipTypewriter
      VB:
      - id: Febucci.UI.Core.TypewriterCore.SkipTypewriter*
        name: SkipTypewriter
        nameWithType: TypewriterCore.SkipTypewriter
        qualifiedName: Febucci.UI.Core.TypewriterCore.SkipTypewriter
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TypewriterCore.SkipTypewriter
  Febucci.UI.Core.TypewriterCore.isShowingText*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.isShowingText*
        name: isShowingText
        nameWithType: TypewriterCore.isShowingText
        qualifiedName: Febucci.UI.Core.TypewriterCore.isShowingText
      VB:
      - id: Febucci.UI.Core.TypewriterCore.isShowingText*
        name: isShowingText
        nameWithType: TypewriterCore.isShowingText
        qualifiedName: Febucci.UI.Core.TypewriterCore.isShowingText
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TypewriterCore.isShowingText
  Febucci.UI.Core.TypewriterCore.StartShowingText*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.StartShowingText*
        name: StartShowingText
        nameWithType: TypewriterCore.StartShowingText
        qualifiedName: Febucci.UI.Core.TypewriterCore.StartShowingText
      VB:
      - id: Febucci.UI.Core.TypewriterCore.StartShowingText*
        name: StartShowingText
        nameWithType: TypewriterCore.StartShowingText
        qualifiedName: Febucci.UI.Core.TypewriterCore.StartShowingText
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TypewriterCore.StartShowingText
  Febucci.UI.Core.TypewriterCore.GetWaitAppearanceTimeOf*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.GetWaitAppearanceTimeOf*
        name: GetWaitAppearanceTimeOf
        nameWithType: TypewriterCore.GetWaitAppearanceTimeOf
        qualifiedName: Febucci.UI.Core.TypewriterCore.GetWaitAppearanceTimeOf
      VB:
      - id: Febucci.UI.Core.TypewriterCore.GetWaitAppearanceTimeOf*
        name: GetWaitAppearanceTimeOf
        nameWithType: TypewriterCore.GetWaitAppearanceTimeOf
        qualifiedName: Febucci.UI.Core.TypewriterCore.GetWaitAppearanceTimeOf
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TypewriterCore.GetWaitAppearanceTimeOf
  Febucci.UI.Core.TypewriterCore.StopShowingText*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.StopShowingText*
        name: StopShowingText
        nameWithType: TypewriterCore.StopShowingText
        qualifiedName: Febucci.UI.Core.TypewriterCore.StopShowingText
      VB:
      - id: Febucci.UI.Core.TypewriterCore.StopShowingText*
        name: StopShowingText
        nameWithType: TypewriterCore.StopShowingText
        qualifiedName: Febucci.UI.Core.TypewriterCore.StopShowingText
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TypewriterCore.StopShowingText
  Febucci.UI.Core.TypewriterCore.isHidingText*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.isHidingText*
        name: isHidingText
        nameWithType: TypewriterCore.isHidingText
        qualifiedName: Febucci.UI.Core.TypewriterCore.isHidingText
      VB:
      - id: Febucci.UI.Core.TypewriterCore.isHidingText*
        name: isHidingText
        nameWithType: TypewriterCore.isHidingText
        qualifiedName: Febucci.UI.Core.TypewriterCore.isHidingText
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TypewriterCore.isHidingText
  Febucci.UI.Core.TypewriterCore.StartDisappearingText*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.StartDisappearingText*
        name: StartDisappearingText
        nameWithType: TypewriterCore.StartDisappearingText
        qualifiedName: Febucci.UI.Core.TypewriterCore.StartDisappearingText
      VB:
      - id: Febucci.UI.Core.TypewriterCore.StartDisappearingText*
        name: StartDisappearingText
        nameWithType: TypewriterCore.StartDisappearingText
        qualifiedName: Febucci.UI.Core.TypewriterCore.StartDisappearingText
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TypewriterCore.StartDisappearingText
  Febucci.UI.Core.TypewriterCore.StopDisappearingText*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.StopDisappearingText*
        name: StopDisappearingText
        nameWithType: TypewriterCore.StopDisappearingText
        qualifiedName: Febucci.UI.Core.TypewriterCore.StopDisappearingText
      VB:
      - id: Febucci.UI.Core.TypewriterCore.StopDisappearingText*
        name: StopDisappearingText
        nameWithType: TypewriterCore.StopDisappearingText
        qualifiedName: Febucci.UI.Core.TypewriterCore.StopDisappearingText
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TypewriterCore.StopDisappearingText
  Febucci.UI.Core.TypewriterCore.GetWaitDisappearanceTimeOf*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.GetWaitDisappearanceTimeOf*
        name: GetWaitDisappearanceTimeOf
        nameWithType: TypewriterCore.GetWaitDisappearanceTimeOf
        qualifiedName: Febucci.UI.Core.TypewriterCore.GetWaitDisappearanceTimeOf
      VB:
      - id: Febucci.UI.Core.TypewriterCore.GetWaitDisappearanceTimeOf*
        name: GetWaitDisappearanceTimeOf
        nameWithType: TypewriterCore.GetWaitDisappearanceTimeOf
        qualifiedName: Febucci.UI.Core.TypewriterCore.GetWaitDisappearanceTimeOf
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TypewriterCore.GetWaitDisappearanceTimeOf
  Febucci.UI.Core.TypewriterCore.SetTypewriterSpeed*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.SetTypewriterSpeed*
        name: SetTypewriterSpeed
        nameWithType: TypewriterCore.SetTypewriterSpeed
        qualifiedName: Febucci.UI.Core.TypewriterCore.SetTypewriterSpeed
      VB:
      - id: Febucci.UI.Core.TypewriterCore.SetTypewriterSpeed*
        name: SetTypewriterSpeed
        nameWithType: TypewriterCore.SetTypewriterSpeed
        qualifiedName: Febucci.UI.Core.TypewriterCore.SetTypewriterSpeed
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TypewriterCore.SetTypewriterSpeed
  Febucci.UI.Core.TypewriterCore.TriggerRemainingEvents*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.TriggerRemainingEvents*
        name: TriggerRemainingEvents
        nameWithType: TypewriterCore.TriggerRemainingEvents
        qualifiedName: Febucci.UI.Core.TypewriterCore.TriggerRemainingEvents
      VB:
      - id: Febucci.UI.Core.TypewriterCore.TriggerRemainingEvents*
        name: TriggerRemainingEvents
        nameWithType: TypewriterCore.TriggerRemainingEvents
        qualifiedName: Febucci.UI.Core.TypewriterCore.TriggerRemainingEvents
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TypewriterCore.TriggerRemainingEvents
  Febucci.UI.Core.TypewriterCore.TriggerVisibleEvents*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.TriggerVisibleEvents*
        name: TriggerVisibleEvents
        nameWithType: TypewriterCore.TriggerVisibleEvents
        qualifiedName: Febucci.UI.Core.TypewriterCore.TriggerVisibleEvents
      VB:
      - id: Febucci.UI.Core.TypewriterCore.TriggerVisibleEvents*
        name: TriggerVisibleEvents
        nameWithType: TypewriterCore.TriggerVisibleEvents
        qualifiedName: Febucci.UI.Core.TypewriterCore.TriggerVisibleEvents
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TypewriterCore.TriggerVisibleEvents
  Febucci.UI.Core.TypewriterCore.OnEnable*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.OnEnable*
        name: OnEnable
        nameWithType: TypewriterCore.OnEnable
        qualifiedName: Febucci.UI.Core.TypewriterCore.OnEnable
      VB:
      - id: Febucci.UI.Core.TypewriterCore.OnEnable*
        name: OnEnable
        nameWithType: TypewriterCore.OnEnable
        qualifiedName: Febucci.UI.Core.TypewriterCore.OnEnable
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TypewriterCore.OnEnable
  Febucci.UI.Core.TypewriterCore.OnDisable*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.OnDisable*
        name: OnDisable
        nameWithType: TypewriterCore.OnDisable
        qualifiedName: Febucci.UI.Core.TypewriterCore.OnDisable
      VB:
      - id: Febucci.UI.Core.TypewriterCore.OnDisable*
        name: OnDisable
        nameWithType: TypewriterCore.OnDisable
        qualifiedName: Febucci.UI.Core.TypewriterCore.OnDisable
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TypewriterCore.OnDisable
  Febucci.UI.Core.TypewriterCore.typewriterPlayerSpeed*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.typewriterPlayerSpeed*
        name: typewriterPlayerSpeed
        nameWithType: TypewriterCore.typewriterPlayerSpeed
        qualifiedName: Febucci.UI.Core.TypewriterCore.typewriterPlayerSpeed
      VB:
      - id: Febucci.UI.Core.TypewriterCore.typewriterPlayerSpeed*
        name: typewriterPlayerSpeed
        nameWithType: TypewriterCore.typewriterPlayerSpeed
        qualifiedName: Febucci.UI.Core.TypewriterCore.typewriterPlayerSpeed
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TypewriterCore.typewriterPlayerSpeed
  Febucci.UI.Core.TypewriterCore.wantsToSkip*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.wantsToSkip*
        name: wantsToSkip
        nameWithType: TypewriterCore.wantsToSkip
        qualifiedName: Febucci.UI.Core.TypewriterCore.wantsToSkip
      VB:
      - id: Febucci.UI.Core.TypewriterCore.wantsToSkip*
        name: wantsToSkip
        nameWithType: TypewriterCore.wantsToSkip
        qualifiedName: Febucci.UI.Core.TypewriterCore.wantsToSkip
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TypewriterCore.wantsToSkip
  Febucci.UI.Core.TypewriterCore.isBaseInsideRoutine*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.isBaseInsideRoutine*
        name: isBaseInsideRoutine
        nameWithType: TypewriterCore.isBaseInsideRoutine
        qualifiedName: Febucci.UI.Core.TypewriterCore.isBaseInsideRoutine
      VB:
      - id: Febucci.UI.Core.TypewriterCore.isBaseInsideRoutine*
        name: isBaseInsideRoutine
        nameWithType: TypewriterCore.isBaseInsideRoutine
        qualifiedName: Febucci.UI.Core.TypewriterCore.isBaseInsideRoutine
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TypewriterCore.isBaseInsideRoutine
  Febucci.UI.Core.TypewriterCore.textAnimator*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypewriterCore.textAnimator*
        name: textAnimator
        nameWithType: TypewriterCore.textAnimator
        qualifiedName: Febucci.UI.Core.TypewriterCore.textAnimator
      VB:
      - id: Febucci.UI.Core.TypewriterCore.textAnimator*
        name: textAnimator
        nameWithType: TypewriterCore.textAnimator
        qualifiedName: Febucci.UI.Core.TypewriterCore.textAnimator
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TypewriterCore.textAnimator
  System.FlagsAttribute:
    name:
      CSharp:
      - id: System.FlagsAttribute
        name: FlagsAttribute
        nameWithType: FlagsAttribute
        qualifiedName: System.FlagsAttribute
        isExternal: true
      VB:
      - id: System.FlagsAttribute
        name: FlagsAttribute
        nameWithType: FlagsAttribute
        qualifiedName: System.FlagsAttribute
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.FlagsAttribute
  System.FlagsAttribute.#ctor:
    name:
      CSharp:
      - id: System.FlagsAttribute.#ctor
        name: FlagsAttribute
        nameWithType: FlagsAttribute.FlagsAttribute
        qualifiedName: System.FlagsAttribute.FlagsAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.FlagsAttribute.#ctor
        name: FlagsAttribute
        nameWithType: FlagsAttribute.FlagsAttribute
        qualifiedName: System.FlagsAttribute.FlagsAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.FlagsAttribute
    commentId: M:System.FlagsAttribute.#ctor
  Febucci.UI.Core.TypingInfo.timePassed*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypingInfo.timePassed*
        name: timePassed
        nameWithType: TypingInfo.timePassed
        qualifiedName: Febucci.UI.Core.TypingInfo.timePassed
      VB:
      - id: Febucci.UI.Core.TypingInfo.timePassed*
        name: timePassed
        nameWithType: TypingInfo.timePassed
        qualifiedName: Febucci.UI.Core.TypingInfo.timePassed
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TypingInfo.timePassed
  Febucci.UI.Core.TypingInfo.#ctor*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypingInfo.#ctor*
        name: TypingInfo
        nameWithType: TypingInfo.TypingInfo
        qualifiedName: Febucci.UI.Core.TypingInfo.TypingInfo
      VB:
      - id: Febucci.UI.Core.TypingInfo.#ctor*
        name: TypingInfo
        nameWithType: TypingInfo.TypingInfo
        qualifiedName: Febucci.UI.Core.TypingInfo.TypingInfo
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TypingInfo.#ctor
  Febucci.UI.Core.TypingInfo:
    name:
      CSharp:
      - id: Febucci.UI.Core.TypingInfo
        name: TypingInfo
        nameWithType: TypingInfo
        qualifiedName: Febucci.UI.Core.TypingInfo
      VB:
      - id: Febucci.UI.Core.TypingInfo
        name: TypingInfo
        nameWithType: TypingInfo
        qualifiedName: Febucci.UI.Core.TypingInfo
    isDefinition: true
    commentId: T:Febucci.UI.Core.TypingInfo
  Febucci.UI.Core.CharInfo:
    name:
      CSharp:
      - id: Febucci.UI.Core.CharInfo
        name: CharInfo
        nameWithType: CharInfo
        qualifiedName: Febucci.UI.Core.CharInfo
      VB:
      - id: Febucci.UI.Core.CharInfo
        name: CharInfo
        nameWithType: CharInfo
        qualifiedName: Febucci.UI.Core.CharInfo
    isDefinition: true
    parent: Febucci.UI.Core
    commentId: T:Febucci.UI.Core.CharInfo
  Febucci.UI.Core.MeshData:
    name:
      CSharp:
      - id: Febucci.UI.Core.MeshData
        name: MeshData
        nameWithType: MeshData
        qualifiedName: Febucci.UI.Core.MeshData
      VB:
      - id: Febucci.UI.Core.MeshData
        name: MeshData
        nameWithType: MeshData
        qualifiedName: Febucci.UI.Core.MeshData
    isDefinition: true
    parent: Febucci.UI.Core
    commentId: T:Febucci.UI.Core.MeshData
  Febucci.UI.Core.CharacterData.ResetInfo*:
    name:
      CSharp:
      - id: Febucci.UI.Core.CharacterData.ResetInfo*
        name: ResetInfo
        nameWithType: CharacterData.ResetInfo
        qualifiedName: Febucci.UI.Core.CharacterData.ResetInfo
      VB:
      - id: Febucci.UI.Core.CharacterData.ResetInfo*
        name: ResetInfo
        nameWithType: CharacterData.ResetInfo
        qualifiedName: Febucci.UI.Core.CharacterData.ResetInfo
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.CharacterData.ResetInfo
  Febucci.UI.Core.CharacterData.ResetAnimation*:
    name:
      CSharp:
      - id: Febucci.UI.Core.CharacterData.ResetAnimation*
        name: ResetAnimation
        nameWithType: CharacterData.ResetAnimation
        qualifiedName: Febucci.UI.Core.CharacterData.ResetAnimation
      VB:
      - id: Febucci.UI.Core.CharacterData.ResetAnimation*
        name: ResetAnimation
        nameWithType: CharacterData.ResetAnimation
        qualifiedName: Febucci.UI.Core.CharacterData.ResetAnimation
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.CharacterData.ResetAnimation
  Febucci.UI.Core.CharacterData.Hide*:
    name:
      CSharp:
      - id: Febucci.UI.Core.CharacterData.Hide*
        name: Hide
        nameWithType: CharacterData.Hide
        qualifiedName: Febucci.UI.Core.CharacterData.Hide
      VB:
      - id: Febucci.UI.Core.CharacterData.Hide*
        name: Hide
        nameWithType: CharacterData.Hide
        qualifiedName: Febucci.UI.Core.CharacterData.Hide
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.CharacterData.Hide
  Febucci.UI.Core.CharacterData.UpdateIntensity*:
    name:
      CSharp:
      - id: Febucci.UI.Core.CharacterData.UpdateIntensity*
        name: UpdateIntensity
        nameWithType: CharacterData.UpdateIntensity
        qualifiedName: Febucci.UI.Core.CharacterData.UpdateIntensity
      VB:
      - id: Febucci.UI.Core.CharacterData.UpdateIntensity*
        name: UpdateIntensity
        nameWithType: CharacterData.UpdateIntensity
        qualifiedName: Febucci.UI.Core.CharacterData.UpdateIntensity
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.CharacterData.UpdateIntensity
  System.Collections.Generic.List`1:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.List`1
  System.Collections.Generic:
    name:
      CSharp:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
        isExternal: true
      VB:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
    isDefinition: true
    commentId: N:System.Collections.Generic
  System.Collections.Generic.List{{T}}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{`0}
  Febucci.UI.Core.Database`1.Data*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Database`1.Data*
        name: Data
        nameWithType: Database<T>.Data
        qualifiedName: Febucci.UI.Core.Database<T>.Data
      VB:
      - id: Febucci.UI.Core.Database`1.Data*
        name: Data
        nameWithType: Database(Of T).Data
        qualifiedName: Febucci.UI.Core.Database(Of T).Data
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Database`1.Data
  Febucci.UI.Core.Database`1.Add*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Database`1.Add*
        name: Add
        nameWithType: Database<T>.Add
        qualifiedName: Febucci.UI.Core.Database<T>.Add
      VB:
      - id: Febucci.UI.Core.Database`1.Add*
        name: Add
        nameWithType: Database(Of T).Add
        qualifiedName: Febucci.UI.Core.Database(Of T).Add
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Database`1.Add
  Febucci.UI.Core.Database`1.ForceBuildRefresh*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Database`1.ForceBuildRefresh*
        name: ForceBuildRefresh
        nameWithType: Database<T>.ForceBuildRefresh
        qualifiedName: Febucci.UI.Core.Database<T>.ForceBuildRefresh
      VB:
      - id: Febucci.UI.Core.Database`1.ForceBuildRefresh*
        name: ForceBuildRefresh
        nameWithType: Database(Of T).ForceBuildRefresh
        qualifiedName: Febucci.UI.Core.Database(Of T).ForceBuildRefresh
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Database`1.ForceBuildRefresh
  Febucci.UI.Core.Database`1.BuildOnce*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Database`1.BuildOnce*
        name: BuildOnce
        nameWithType: Database<T>.BuildOnce
        qualifiedName: Febucci.UI.Core.Database<T>.BuildOnce
      VB:
      - id: Febucci.UI.Core.Database`1.BuildOnce*
        name: BuildOnce
        nameWithType: Database(Of T).BuildOnce
        qualifiedName: Febucci.UI.Core.Database(Of T).BuildOnce
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Database`1.BuildOnce
  Febucci.UI.Core.Database`1.OnBuildOnce*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Database`1.OnBuildOnce*
        name: OnBuildOnce
        nameWithType: Database<T>.OnBuildOnce
        qualifiedName: Febucci.UI.Core.Database<T>.OnBuildOnce
      VB:
      - id: Febucci.UI.Core.Database`1.OnBuildOnce*
        name: OnBuildOnce
        nameWithType: Database(Of T).OnBuildOnce
        qualifiedName: Febucci.UI.Core.Database(Of T).OnBuildOnce
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Database`1.OnBuildOnce
  Febucci.UI.Core.Database`1.ContainsKey*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Database`1.ContainsKey*
        name: ContainsKey
        nameWithType: Database<T>.ContainsKey
        qualifiedName: Febucci.UI.Core.Database<T>.ContainsKey
      VB:
      - id: Febucci.UI.Core.Database`1.ContainsKey*
        name: ContainsKey
        nameWithType: Database(Of T).ContainsKey
        qualifiedName: Febucci.UI.Core.Database(Of T).ContainsKey
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Database`1.ContainsKey
  Febucci.UI.Core.Database`1.Item*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Database`1.Item*
        name: Item
        nameWithType: Database<T>.Item
        qualifiedName: Febucci.UI.Core.Database<T>.Item
      VB:
      - id: Febucci.UI.Core.Database`1.Item*
        name: Item
        nameWithType: Database(Of T).Item
        qualifiedName: Febucci.UI.Core.Database(Of T).Item
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Database`1.Item
  Febucci.UI.Core.Database`1.DestroyImmediate*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Database`1.DestroyImmediate*
        name: DestroyImmediate
        nameWithType: Database<T>.DestroyImmediate
        qualifiedName: Febucci.UI.Core.Database<T>.DestroyImmediate
      VB:
      - id: Febucci.UI.Core.Database`1.DestroyImmediate*
        name: DestroyImmediate
        nameWithType: Database(Of T).DestroyImmediate
        qualifiedName: Febucci.UI.Core.Database(Of T).DestroyImmediate
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Database`1.DestroyImmediate
  Febucci.UI.Core.Database`1:
    name:
      CSharp:
      - id: Febucci.UI.Core.Database`1
        name: Database
        nameWithType: Database
        qualifiedName: Febucci.UI.Core.Database
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Febucci.UI.Core.Database`1
        name: Database
        nameWithType: Database
        qualifiedName: Febucci.UI.Core.Database
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Febucci.UI.Core.Database`1
  Febucci.UI.Core.ITagProvider.TagID*:
    name:
      CSharp:
      - id: Febucci.UI.Core.ITagProvider.TagID*
        name: TagID
        nameWithType: ITagProvider.TagID
        qualifiedName: Febucci.UI.Core.ITagProvider.TagID
      VB:
      - id: Febucci.UI.Core.ITagProvider.TagID*
        name: TagID
        nameWithType: ITagProvider.TagID
        qualifiedName: Febucci.UI.Core.ITagProvider.TagID
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.ITagProvider.TagID
  Febucci.UI.Core.ITagProvider:
    name:
      CSharp:
      - id: Febucci.UI.Core.ITagProvider
        name: ITagProvider
        nameWithType: ITagProvider
        qualifiedName: Febucci.UI.Core.ITagProvider
      VB:
      - id: Febucci.UI.Core.ITagProvider
        name: ITagProvider
        nameWithType: ITagProvider
        qualifiedName: Febucci.UI.Core.ITagProvider
    isDefinition: true
    commentId: T:Febucci.UI.Core.ITagProvider
  System.IEquatable`1:
    name:
      CSharp:
      - id: System.IEquatable`1
        name: IEquatable
        nameWithType: IEquatable
        qualifiedName: System.IEquatable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.IEquatable`1
        name: IEquatable
        nameWithType: IEquatable
        qualifiedName: System.IEquatable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.IEquatable`1
  System.IEquatable{Febucci.UI.Core.MeshData}:
    name:
      CSharp:
      - id: System.IEquatable`1
        name: IEquatable
        nameWithType: IEquatable
        qualifiedName: System.IEquatable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Febucci.UI.Core.MeshData
        name: MeshData
        nameWithType: MeshData
        qualifiedName: Febucci.UI.Core.MeshData
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.IEquatable`1
        name: IEquatable
        nameWithType: IEquatable
        qualifiedName: System.IEquatable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Febucci.UI.Core.MeshData
        name: MeshData
        nameWithType: MeshData
        qualifiedName: Febucci.UI.Core.MeshData
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.IEquatable`1
    parent: System
    commentId: T:System.IEquatable{Febucci.UI.Core.MeshData}
  Vector3[]:
    name:
      CSharp:
      - id: Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Color32[]:
    name:
      CSharp:
      - id: Color32
        name: Color32
        nameWithType: Color32
        qualifiedName: Color32
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Color32
        name: Color32
        nameWithType: Color32
        qualifiedName: Color32
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Febucci.UI.Core.MeshData.Equals*:
    name:
      CSharp:
      - id: Febucci.UI.Core.MeshData.Equals*
        name: Equals
        nameWithType: MeshData.Equals
        qualifiedName: Febucci.UI.Core.MeshData.Equals
      VB:
      - id: Febucci.UI.Core.MeshData.Equals*
        name: Equals
        nameWithType: MeshData.Equals
        qualifiedName: Febucci.UI.Core.MeshData.Equals
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.MeshData.Equals
  System.IEquatable`1.Equals(`0):
    name:
      CSharp:
      - id: System.IEquatable`1.Equals(`0)
        name: Equals
        nameWithType: IEquatable<T>.Equals
        qualifiedName: System.IEquatable<T>.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.IEquatable`1.Equals(`0)
        name: Equals
        nameWithType: IEquatable(Of T).Equals
        qualifiedName: System.IEquatable(Of T).Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.IEquatable`1.Equals(`0)
  System.IEquatable{Febucci.UI.Core.MeshData}.Equals(Febucci.UI.Core.MeshData):
    name:
      CSharp:
      - id: System.IEquatable`1.Equals(`0)
        name: Equals
        nameWithType: IEquatable<MeshData>.Equals
        qualifiedName: System.IEquatable<Febucci.UI.Core.MeshData>.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Febucci.UI.Core.MeshData
        name: MeshData
        nameWithType: MeshData
        qualifiedName: Febucci.UI.Core.MeshData
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.IEquatable`1.Equals(`0)
        name: Equals
        nameWithType: IEquatable(Of MeshData).Equals
        qualifiedName: System.IEquatable(Of Febucci.UI.Core.MeshData).Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Febucci.UI.Core.MeshData
        name: MeshData
        nameWithType: MeshData
        qualifiedName: Febucci.UI.Core.MeshData
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.IEquatable`1.Equals(`0)
    parent: System.IEquatable{Febucci.UI.Core.MeshData}
    commentId: M:System.IEquatable{Febucci.UI.Core.MeshData}.Equals(Febucci.UI.Core.MeshData)
  Febucci.UI.Core.MeshData.ToString*:
    name:
      CSharp:
      - id: Febucci.UI.Core.MeshData.ToString*
        name: ToString
        nameWithType: MeshData.ToString
        qualifiedName: Febucci.UI.Core.MeshData.ToString
      VB:
      - id: Febucci.UI.Core.MeshData.ToString*
        name: ToString
        nameWithType: MeshData.ToString
        qualifiedName: Febucci.UI.Core.MeshData.ToString
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.MeshData.ToString
  Febucci.UI.Core.WordInfo.#ctor*:
    name:
      CSharp:
      - id: Febucci.UI.Core.WordInfo.#ctor*
        name: WordInfo
        nameWithType: WordInfo.WordInfo
        qualifiedName: Febucci.UI.Core.WordInfo.WordInfo
      VB:
      - id: Febucci.UI.Core.WordInfo.#ctor*
        name: WordInfo
        nameWithType: WordInfo.WordInfo
        qualifiedName: Febucci.UI.Core.WordInfo.WordInfo
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.WordInfo.#ctor
  Febucci.UI.Core.WordInfo:
    name:
      CSharp:
      - id: Febucci.UI.Core.WordInfo
        name: WordInfo
        nameWithType: WordInfo
        qualifiedName: Febucci.UI.Core.WordInfo
      VB:
      - id: Febucci.UI.Core.WordInfo
        name: WordInfo
        nameWithType: WordInfo
        qualifiedName: Febucci.UI.Core.WordInfo
    isDefinition: true
    commentId: T:Febucci.UI.Core.WordInfo
  Febucci.UI.Core.DefaultValueAttribute.#ctor*:
    name:
      CSharp:
      - id: Febucci.UI.Core.DefaultValueAttribute.#ctor*
        name: DefaultValueAttribute
        nameWithType: DefaultValueAttribute.DefaultValueAttribute
        qualifiedName: Febucci.UI.Core.DefaultValueAttribute.DefaultValueAttribute
      VB:
      - id: Febucci.UI.Core.DefaultValueAttribute.#ctor*
        name: DefaultValueAttribute
        nameWithType: DefaultValueAttribute.DefaultValueAttribute
        qualifiedName: Febucci.UI.Core.DefaultValueAttribute.DefaultValueAttribute
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.DefaultValueAttribute.#ctor
  Febucci.UI.Core.DefaultValueAttribute:
    name:
      CSharp:
      - id: Febucci.UI.Core.DefaultValueAttribute
        name: DefaultValueAttribute
        nameWithType: DefaultValueAttribute
        qualifiedName: Febucci.UI.Core.DefaultValueAttribute
      VB:
      - id: Febucci.UI.Core.DefaultValueAttribute
        name: DefaultValueAttribute
        nameWithType: DefaultValueAttribute
        qualifiedName: Febucci.UI.Core.DefaultValueAttribute
    isDefinition: true
    commentId: T:Febucci.UI.Core.DefaultValueAttribute
  Febucci.UI.Core.EffectCategory:
    name:
      CSharp:
      - id: Febucci.UI.Core.EffectCategory
        name: EffectCategory
        nameWithType: EffectCategory
        qualifiedName: Febucci.UI.Core.EffectCategory
      VB:
      - id: Febucci.UI.Core.EffectCategory
        name: EffectCategory
        nameWithType: EffectCategory
        qualifiedName: Febucci.UI.Core.EffectCategory
    isDefinition: true
    parent: Febucci.UI.Core
    commentId: T:Febucci.UI.Core.EffectCategory
  Febucci.UI.Core.TagInfoAttribute.#ctor*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TagInfoAttribute.#ctor*
        name: TagInfoAttribute
        nameWithType: TagInfoAttribute.TagInfoAttribute
        qualifiedName: Febucci.UI.Core.TagInfoAttribute.TagInfoAttribute
      VB:
      - id: Febucci.UI.Core.TagInfoAttribute.#ctor*
        name: TagInfoAttribute
        nameWithType: TagInfoAttribute.TagInfoAttribute
        qualifiedName: Febucci.UI.Core.TagInfoAttribute.TagInfoAttribute
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TagInfoAttribute.#ctor
  Febucci.UI.Core.TagInfoAttribute:
    name:
      CSharp:
      - id: Febucci.UI.Core.TagInfoAttribute
        name: TagInfoAttribute
        nameWithType: TagInfoAttribute
        qualifiedName: Febucci.UI.Core.TagInfoAttribute
      VB:
      - id: Febucci.UI.Core.TagInfoAttribute
        name: TagInfoAttribute
        nameWithType: TagInfoAttribute
        qualifiedName: Febucci.UI.Core.TagInfoAttribute
    isDefinition: true
    parent: Febucci.UI.Core
    commentId: T:Febucci.UI.Core.TagInfoAttribute
  Febucci.UI.Core.TagInfoAttribute.tagID:
    name:
      CSharp:
      - id: Febucci.UI.Core.TagInfoAttribute.tagID
        name: tagID
        nameWithType: TagInfoAttribute.tagID
        qualifiedName: Febucci.UI.Core.TagInfoAttribute.tagID
      VB:
      - id: Febucci.UI.Core.TagInfoAttribute.tagID
        name: tagID
        nameWithType: TagInfoAttribute.tagID
        qualifiedName: Febucci.UI.Core.TagInfoAttribute.tagID
    isDefinition: true
    parent: Febucci.UI.Core.TagInfoAttribute
    commentId: F:Febucci.UI.Core.TagInfoAttribute.tagID
  Febucci.UI.Core.EffectInfoAttribute.#ctor*:
    name:
      CSharp:
      - id: Febucci.UI.Core.EffectInfoAttribute.#ctor*
        name: EffectInfoAttribute
        nameWithType: EffectInfoAttribute.EffectInfoAttribute
        qualifiedName: Febucci.UI.Core.EffectInfoAttribute.EffectInfoAttribute
      VB:
      - id: Febucci.UI.Core.EffectInfoAttribute.#ctor*
        name: EffectInfoAttribute
        nameWithType: EffectInfoAttribute.EffectInfoAttribute
        qualifiedName: Febucci.UI.Core.EffectInfoAttribute.EffectInfoAttribute
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.EffectInfoAttribute.#ctor
  Febucci.UI.Core.EffectInfoAttribute:
    name:
      CSharp:
      - id: Febucci.UI.Core.EffectInfoAttribute
        name: EffectInfoAttribute
        nameWithType: EffectInfoAttribute
        qualifiedName: Febucci.UI.Core.EffectInfoAttribute
      VB:
      - id: Febucci.UI.Core.EffectInfoAttribute
        name: EffectInfoAttribute
        nameWithType: EffectInfoAttribute
        qualifiedName: Febucci.UI.Core.EffectInfoAttribute
    isDefinition: true
    commentId: T:Febucci.UI.Core.EffectInfoAttribute
  System.Collections.Generic.List{System.String}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{System.String}
  Febucci.UI.Core.FormatUtils.TryGetFloat*:
    name:
      CSharp:
      - id: Febucci.UI.Core.FormatUtils.TryGetFloat*
        name: TryGetFloat
        nameWithType: FormatUtils.TryGetFloat
        qualifiedName: Febucci.UI.Core.FormatUtils.TryGetFloat
      VB:
      - id: Febucci.UI.Core.FormatUtils.TryGetFloat*
        name: TryGetFloat
        nameWithType: FormatUtils.TryGetFloat
        qualifiedName: Febucci.UI.Core.FormatUtils.TryGetFloat
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.FormatUtils.TryGetFloat
  Febucci.UI.Core.FormatUtils.ParseFloat*:
    name:
      CSharp:
      - id: Febucci.UI.Core.FormatUtils.ParseFloat*
        name: ParseFloat
        nameWithType: FormatUtils.ParseFloat
        qualifiedName: Febucci.UI.Core.FormatUtils.ParseFloat
      VB:
      - id: Febucci.UI.Core.FormatUtils.ParseFloat*
        name: ParseFloat
        nameWithType: FormatUtils.ParseFloat
        qualifiedName: Febucci.UI.Core.FormatUtils.ParseFloat
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.FormatUtils.ParseFloat
  Febucci.UI.Core.FormatUtils:
    name:
      CSharp:
      - id: Febucci.UI.Core.FormatUtils
        name: FormatUtils
        nameWithType: FormatUtils
        qualifiedName: Febucci.UI.Core.FormatUtils
      VB:
      - id: Febucci.UI.Core.FormatUtils
        name: FormatUtils
        nameWithType: FormatUtils
        qualifiedName: Febucci.UI.Core.FormatUtils
    isDefinition: true
    commentId: T:Febucci.UI.Core.FormatUtils
  Febucci.UI.Core.TextUtilities.FakeRandoms*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TextUtilities.FakeRandoms*
        name: FakeRandoms
        nameWithType: TextUtilities.FakeRandoms
        qualifiedName: Febucci.UI.Core.TextUtilities.FakeRandoms
      VB:
      - id: Febucci.UI.Core.TextUtilities.FakeRandoms*
        name: FakeRandoms
        nameWithType: TextUtilities.FakeRandoms
        qualifiedName: Febucci.UI.Core.TextUtilities.FakeRandoms
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TextUtilities.FakeRandoms
  Vector3:
    name:
      CSharp:
      - id: Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
      VB:
      - id: Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
    isDefinition: true
  Vector2:
    name:
      CSharp:
      - id: Vector2
        name: Vector2
        nameWithType: Vector2
        qualifiedName: Vector2
        isExternal: true
      VB:
      - id: Vector2
        name: Vector2
        nameWithType: Vector2
        qualifiedName: Vector2
        isExternal: true
    isDefinition: true
  Febucci.UI.Core.TextUtilities.RotateAround*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TextUtilities.RotateAround*
        name: RotateAround
        nameWithType: TextUtilities.RotateAround
        qualifiedName: Febucci.UI.Core.TextUtilities.RotateAround
      VB:
      - id: Febucci.UI.Core.TextUtilities.RotateAround*
        name: RotateAround
        nameWithType: TextUtilities.RotateAround
        qualifiedName: Febucci.UI.Core.TextUtilities.RotateAround
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TextUtilities.RotateAround
  Febucci.UI.Core.TextUtilities.MoveChar*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TextUtilities.MoveChar*
        name: MoveChar
        nameWithType: TextUtilities.MoveChar
        qualifiedName: Febucci.UI.Core.TextUtilities.MoveChar
      VB:
      - id: Febucci.UI.Core.TextUtilities.MoveChar*
        name: MoveChar
        nameWithType: TextUtilities.MoveChar
        qualifiedName: Febucci.UI.Core.TextUtilities.MoveChar
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TextUtilities.MoveChar
  Febucci.UI.Core.TextUtilities.SetChar*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TextUtilities.SetChar*
        name: SetChar
        nameWithType: TextUtilities.SetChar
        qualifiedName: Febucci.UI.Core.TextUtilities.SetChar
      VB:
      - id: Febucci.UI.Core.TextUtilities.SetChar*
        name: SetChar
        nameWithType: TextUtilities.SetChar
        qualifiedName: Febucci.UI.Core.TextUtilities.SetChar
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TextUtilities.SetChar
  Febucci.UI.Core.TextUtilities.LerpUnclamped*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TextUtilities.LerpUnclamped*
        name: LerpUnclamped
        nameWithType: TextUtilities.LerpUnclamped
        qualifiedName: Febucci.UI.Core.TextUtilities.LerpUnclamped
      VB:
      - id: Febucci.UI.Core.TextUtilities.LerpUnclamped*
        name: LerpUnclamped
        nameWithType: TextUtilities.LerpUnclamped
        qualifiedName: Febucci.UI.Core.TextUtilities.LerpUnclamped
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TextUtilities.LerpUnclamped
  Febucci.UI.Core.TextUtilities.GetMiddlePos*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TextUtilities.GetMiddlePos*
        name: GetMiddlePos
        nameWithType: TextUtilities.GetMiddlePos
        qualifiedName: Febucci.UI.Core.TextUtilities.GetMiddlePos
      VB:
      - id: Febucci.UI.Core.TextUtilities.GetMiddlePos*
        name: GetMiddlePos
        nameWithType: TextUtilities.GetMiddlePos
        qualifiedName: Febucci.UI.Core.TextUtilities.GetMiddlePos
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TextUtilities.GetMiddlePos
  Febucci.UI.Core.TextUtilities.RotateChar*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TextUtilities.RotateChar*
        name: RotateChar
        nameWithType: TextUtilities.RotateChar
        qualifiedName: Febucci.UI.Core.TextUtilities.RotateChar
      VB:
      - id: Febucci.UI.Core.TextUtilities.RotateChar*
        name: RotateChar
        nameWithType: TextUtilities.RotateChar
        qualifiedName: Febucci.UI.Core.TextUtilities.RotateChar
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TextUtilities.RotateChar
  Color32:
    name:
      CSharp:
      - id: Color32
        name: Color32
        nameWithType: Color32
        qualifiedName: Color32
        isExternal: true
      VB:
      - id: Color32
        name: Color32
        nameWithType: Color32
        qualifiedName: Color32
        isExternal: true
    isDefinition: true
  Febucci.UI.Core.TextUtilities.SetColor*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TextUtilities.SetColor*
        name: SetColor
        nameWithType: TextUtilities.SetColor
        qualifiedName: Febucci.UI.Core.TextUtilities.SetColor
      VB:
      - id: Febucci.UI.Core.TextUtilities.SetColor*
        name: SetColor
        nameWithType: TextUtilities.SetColor
        qualifiedName: Febucci.UI.Core.TextUtilities.SetColor
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TextUtilities.SetColor
  AnimationCurve:
    name:
      CSharp:
      - id: AnimationCurve
        name: AnimationCurve
        nameWithType: AnimationCurve
        qualifiedName: AnimationCurve
        isExternal: true
      VB:
      - id: AnimationCurve
        name: AnimationCurve
        nameWithType: AnimationCurve
        qualifiedName: AnimationCurve
        isExternal: true
    isDefinition: true
  Febucci.UI.Core.TextUtilities.CalculateCurveDuration*:
    name:
      CSharp:
      - id: Febucci.UI.Core.TextUtilities.CalculateCurveDuration*
        name: CalculateCurveDuration
        nameWithType: TextUtilities.CalculateCurveDuration
        qualifiedName: Febucci.UI.Core.TextUtilities.CalculateCurveDuration
      VB:
      - id: Febucci.UI.Core.TextUtilities.CalculateCurveDuration*
        name: CalculateCurveDuration
        nameWithType: TextUtilities.CalculateCurveDuration
        qualifiedName: Febucci.UI.Core.TextUtilities.CalculateCurveDuration
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.TextUtilities.CalculateCurveDuration
  Febucci.UI.Core.TextUtilities:
    name:
      CSharp:
      - id: Febucci.UI.Core.TextUtilities
        name: TextUtilities
        nameWithType: TextUtilities
        qualifiedName: Febucci.UI.Core.TextUtilities
      VB:
      - id: Febucci.UI.Core.TextUtilities
        name: TextUtilities
        nameWithType: TextUtilities
        qualifiedName: Febucci.UI.Core.TextUtilities
    isDefinition: true
    commentId: T:Febucci.UI.Core.TextUtilities
  Febucci.UI.Core.Parsing:
    name:
      CSharp:
      - name: Febucci.UI.Core.Parsing
        nameWithType: Febucci.UI.Core.Parsing
        qualifiedName: Febucci.UI.Core.Parsing
      VB:
      - name: Febucci.UI.Core.Parsing
        nameWithType: Febucci.UI.Core.Parsing
        qualifiedName: Febucci.UI.Core.Parsing
    isDefinition: true
    commentId: N:Febucci.UI.Core.Parsing
  Febucci.UI.Core.Parsing.TagParserBase:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.TagParserBase
        name: TagParserBase
        nameWithType: TagParserBase
        qualifiedName: Febucci.UI.Core.Parsing.TagParserBase
      VB:
      - id: Febucci.UI.Core.Parsing.TagParserBase
        name: TagParserBase
        nameWithType: TagParserBase
        qualifiedName: Febucci.UI.Core.Parsing.TagParserBase
    isDefinition: true
    parent: Febucci.UI.Core.Parsing
    commentId: T:Febucci.UI.Core.Parsing.TagParserBase
  Febucci.UI.Core.Parsing.TagParserBase.startSymbol:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.TagParserBase.startSymbol
        name: startSymbol
        nameWithType: TagParserBase.startSymbol
        qualifiedName: Febucci.UI.Core.Parsing.TagParserBase.startSymbol
      VB:
      - id: Febucci.UI.Core.Parsing.TagParserBase.startSymbol
        name: startSymbol
        nameWithType: TagParserBase.startSymbol
        qualifiedName: Febucci.UI.Core.Parsing.TagParserBase.startSymbol
    isDefinition: true
    parent: Febucci.UI.Core.Parsing.TagParserBase
    commentId: F:Febucci.UI.Core.Parsing.TagParserBase.startSymbol
  Febucci.UI.Core.Parsing.TagParserBase.endSymbol:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.TagParserBase.endSymbol
        name: endSymbol
        nameWithType: TagParserBase.endSymbol
        qualifiedName: Febucci.UI.Core.Parsing.TagParserBase.endSymbol
      VB:
      - id: Febucci.UI.Core.Parsing.TagParserBase.endSymbol
        name: endSymbol
        nameWithType: TagParserBase.endSymbol
        qualifiedName: Febucci.UI.Core.Parsing.TagParserBase.endSymbol
    isDefinition: true
    parent: Febucci.UI.Core.Parsing.TagParserBase
    commentId: F:Febucci.UI.Core.Parsing.TagParserBase.endSymbol
  Febucci.UI.Core.Parsing.TagParserBase.closingSymbol:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.TagParserBase.closingSymbol
        name: closingSymbol
        nameWithType: TagParserBase.closingSymbol
        qualifiedName: Febucci.UI.Core.Parsing.TagParserBase.closingSymbol
      VB:
      - id: Febucci.UI.Core.Parsing.TagParserBase.closingSymbol
        name: closingSymbol
        nameWithType: TagParserBase.closingSymbol
        qualifiedName: Febucci.UI.Core.Parsing.TagParserBase.closingSymbol
    isDefinition: true
    parent: Febucci.UI.Core.Parsing.TagParserBase
    commentId: F:Febucci.UI.Core.Parsing.TagParserBase.closingSymbol
  Febucci.UI.Core.Parsing.TagParserBase.Initialize:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.TagParserBase.Initialize
        name: Initialize
        nameWithType: TagParserBase.Initialize
        qualifiedName: Febucci.UI.Core.Parsing.TagParserBase.Initialize
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Core.Parsing.TagParserBase.Initialize
        name: Initialize
        nameWithType: TagParserBase.Initialize
        qualifiedName: Febucci.UI.Core.Parsing.TagParserBase.Initialize
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Febucci.UI.Core.Parsing.TagParserBase
    commentId: M:Febucci.UI.Core.Parsing.TagParserBase.Initialize
  Febucci.UI.Core.Parsing.TagParserBase.OnInitialize:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.TagParserBase.OnInitialize
        name: OnInitialize
        nameWithType: TagParserBase.OnInitialize
        qualifiedName: Febucci.UI.Core.Parsing.TagParserBase.OnInitialize
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Core.Parsing.TagParserBase.OnInitialize
        name: OnInitialize
        nameWithType: TagParserBase.OnInitialize
        qualifiedName: Febucci.UI.Core.Parsing.TagParserBase.OnInitialize
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Febucci.UI.Core.Parsing.TagParserBase
    commentId: M:Febucci.UI.Core.Parsing.TagParserBase.OnInitialize
  Febucci.UI.Core.Parsing.TMPTagParser.#ctor*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.TMPTagParser.#ctor*
        name: TMPTagParser
        nameWithType: TMPTagParser.TMPTagParser
        qualifiedName: Febucci.UI.Core.Parsing.TMPTagParser.TMPTagParser
      VB:
      - id: Febucci.UI.Core.Parsing.TMPTagParser.#ctor*
        name: TMPTagParser
        nameWithType: TMPTagParser.TMPTagParser
        qualifiedName: Febucci.UI.Core.Parsing.TMPTagParser.TMPTagParser
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.TMPTagParser.#ctor
  StringBuilder:
    name:
      CSharp:
      - id: StringBuilder
        name: StringBuilder
        nameWithType: StringBuilder
        qualifiedName: StringBuilder
        isExternal: true
      VB:
      - id: StringBuilder
        name: StringBuilder
        nameWithType: StringBuilder
        qualifiedName: StringBuilder
        isExternal: true
    isDefinition: true
  Febucci.UI.Core.Parsing.TagParserBase.TryProcessingTag(System.String,System.Int32,System.Int32@,StringBuilder,System.Int32):
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.TagParserBase.TryProcessingTag(System.String,System.Int32,System.Int32@,StringBuilder,System.Int32)
        name: TryProcessingTag
        nameWithType: TagParserBase.TryProcessingTag
        qualifiedName: Febucci.UI.Core.Parsing.TagParserBase.TryProcessingTag
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: StringBuilder
        name: StringBuilder
        nameWithType: StringBuilder
        qualifiedName: StringBuilder
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Core.Parsing.TagParserBase.TryProcessingTag(System.String,System.Int32,System.Int32@,StringBuilder,System.Int32)
        name: TryProcessingTag
        nameWithType: TagParserBase.TryProcessingTag
        qualifiedName: Febucci.UI.Core.Parsing.TagParserBase.TryProcessingTag
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: StringBuilder
        name: StringBuilder
        nameWithType: StringBuilder
        qualifiedName: StringBuilder
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Febucci.UI.Core.Parsing.TagParserBase
    commentId: M:Febucci.UI.Core.Parsing.TagParserBase.TryProcessingTag(System.String,System.Int32,System.Int32@,StringBuilder,System.Int32)
  Febucci.UI.Core.Parsing.TMPTagParser.TryProcessingTag*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.TMPTagParser.TryProcessingTag*
        name: TryProcessingTag
        nameWithType: TMPTagParser.TryProcessingTag
        qualifiedName: Febucci.UI.Core.Parsing.TMPTagParser.TryProcessingTag
      VB:
      - id: Febucci.UI.Core.Parsing.TMPTagParser.TryProcessingTag*
        name: TryProcessingTag
        nameWithType: TMPTagParser.TryProcessingTag
        qualifiedName: Febucci.UI.Core.Parsing.TMPTagParser.TryProcessingTag
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.TMPTagParser.TryProcessingTag
  Febucci.UI.Core.Parsing.TMPTagParser:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.TMPTagParser
        name: TMPTagParser
        nameWithType: TMPTagParser
        qualifiedName: Febucci.UI.Core.Parsing.TMPTagParser
      VB:
      - id: Febucci.UI.Core.Parsing.TMPTagParser
        name: TMPTagParser
        nameWithType: TMPTagParser
        qualifiedName: Febucci.UI.Core.Parsing.TMPTagParser
    isDefinition: true
    commentId: T:Febucci.UI.Core.Parsing.TMPTagParser
  Febucci.UI.Core.Parsing.TagParserBase[]:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.TagParserBase
        name: TagParserBase
        nameWithType: TagParserBase
        qualifiedName: Febucci.UI.Core.Parsing.TagParserBase
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Febucci.UI.Core.Parsing.TagParserBase
        name: TagParserBase
        nameWithType: TagParserBase
        qualifiedName: Febucci.UI.Core.Parsing.TagParserBase
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Febucci.UI.Core.Parsing.TextParser.ParseText*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.TextParser.ParseText*
        name: ParseText
        nameWithType: TextParser.ParseText
        qualifiedName: Febucci.UI.Core.Parsing.TextParser.ParseText
      VB:
      - id: Febucci.UI.Core.Parsing.TextParser.ParseText*
        name: ParseText
        nameWithType: TextParser.ParseText
        qualifiedName: Febucci.UI.Core.Parsing.TextParser.ParseText
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.TextParser.ParseText
  Febucci.UI.Core.Parsing.TextParser:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.TextParser
        name: TextParser
        nameWithType: TextParser
        qualifiedName: Febucci.UI.Core.Parsing.TextParser
      VB:
      - id: Febucci.UI.Core.Parsing.TextParser
        name: TextParser
        nameWithType: TextParser
        qualifiedName: Febucci.UI.Core.Parsing.TextParser
    isDefinition: true
    commentId: T:Febucci.UI.Core.Parsing.TextParser
  Febucci.UI.Core.Parsing.MarkerBase:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.MarkerBase
        name: MarkerBase
        nameWithType: MarkerBase
        qualifiedName: Febucci.UI.Core.Parsing.MarkerBase
      VB:
      - id: Febucci.UI.Core.Parsing.MarkerBase
        name: MarkerBase
        nameWithType: MarkerBase
        qualifiedName: Febucci.UI.Core.Parsing.MarkerBase
    isDefinition: true
    parent: Febucci.UI.Core.Parsing
    commentId: T:Febucci.UI.Core.Parsing.MarkerBase
  Febucci.UI.Core.Parsing.MarkerBase.name:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.MarkerBase.name
        name: name
        nameWithType: MarkerBase.name
        qualifiedName: Febucci.UI.Core.Parsing.MarkerBase.name
      VB:
      - id: Febucci.UI.Core.Parsing.MarkerBase.name
        name: name
        nameWithType: MarkerBase.name
        qualifiedName: Febucci.UI.Core.Parsing.MarkerBase.name
    isDefinition: true
    parent: Febucci.UI.Core.Parsing.MarkerBase
    commentId: F:Febucci.UI.Core.Parsing.MarkerBase.name
  Febucci.UI.Core.Parsing.MarkerBase.index:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.MarkerBase.index
        name: index
        nameWithType: MarkerBase.index
        qualifiedName: Febucci.UI.Core.Parsing.MarkerBase.index
      VB:
      - id: Febucci.UI.Core.Parsing.MarkerBase.index
        name: index
        nameWithType: MarkerBase.index
        qualifiedName: Febucci.UI.Core.Parsing.MarkerBase.index
    isDefinition: true
    parent: Febucci.UI.Core.Parsing.MarkerBase
    commentId: F:Febucci.UI.Core.Parsing.MarkerBase.index
  Febucci.UI.Core.Parsing.MarkerBase.parameters:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.MarkerBase.parameters
        name: parameters
        nameWithType: MarkerBase.parameters
        qualifiedName: Febucci.UI.Core.Parsing.MarkerBase.parameters
      VB:
      - id: Febucci.UI.Core.Parsing.MarkerBase.parameters
        name: parameters
        nameWithType: MarkerBase.parameters
        qualifiedName: Febucci.UI.Core.Parsing.MarkerBase.parameters
    isDefinition: true
    parent: Febucci.UI.Core.Parsing.MarkerBase
    commentId: F:Febucci.UI.Core.Parsing.MarkerBase.parameters
  Febucci.UI.Core.Parsing.MarkerBase.CompareTo(Febucci.UI.Core.Parsing.MarkerBase):
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.MarkerBase.CompareTo(Febucci.UI.Core.Parsing.MarkerBase)
        name: CompareTo
        nameWithType: MarkerBase.CompareTo
        qualifiedName: Febucci.UI.Core.Parsing.MarkerBase.CompareTo
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Febucci.UI.Core.Parsing.MarkerBase
        name: MarkerBase
        nameWithType: MarkerBase
        qualifiedName: Febucci.UI.Core.Parsing.MarkerBase
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Core.Parsing.MarkerBase.CompareTo(Febucci.UI.Core.Parsing.MarkerBase)
        name: CompareTo
        nameWithType: MarkerBase.CompareTo
        qualifiedName: Febucci.UI.Core.Parsing.MarkerBase.CompareTo
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Febucci.UI.Core.Parsing.MarkerBase
        name: MarkerBase
        nameWithType: MarkerBase
        qualifiedName: Febucci.UI.Core.Parsing.MarkerBase
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Febucci.UI.Core.Parsing.MarkerBase
    commentId: M:Febucci.UI.Core.Parsing.MarkerBase.CompareTo(Febucci.UI.Core.Parsing.MarkerBase)
  Febucci.UI.Core.Parsing.MarkerBase.ToString:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.MarkerBase.ToString
        name: ToString
        nameWithType: MarkerBase.ToString
        qualifiedName: Febucci.UI.Core.Parsing.MarkerBase.ToString
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Core.Parsing.MarkerBase.ToString
        name: ToString
        nameWithType: MarkerBase.ToString
        qualifiedName: Febucci.UI.Core.Parsing.MarkerBase.ToString
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Febucci.UI.Core.Parsing.MarkerBase
    commentId: M:Febucci.UI.Core.Parsing.MarkerBase.ToString
  System.IComparable`1:
    name:
      CSharp:
      - id: System.IComparable`1
        name: IComparable
        nameWithType: IComparable
        qualifiedName: System.IComparable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.IComparable`1
        name: IComparable
        nameWithType: IComparable
        qualifiedName: System.IComparable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.IComparable`1
  System.IComparable{Febucci.UI.Core.Parsing.MarkerBase}:
    name:
      CSharp:
      - id: System.IComparable`1
        name: IComparable
        nameWithType: IComparable
        qualifiedName: System.IComparable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Febucci.UI.Core.Parsing.MarkerBase
        name: MarkerBase
        nameWithType: MarkerBase
        qualifiedName: Febucci.UI.Core.Parsing.MarkerBase
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.IComparable`1
        name: IComparable
        nameWithType: IComparable
        qualifiedName: System.IComparable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Febucci.UI.Core.Parsing.MarkerBase
        name: MarkerBase
        nameWithType: MarkerBase
        qualifiedName: Febucci.UI.Core.Parsing.MarkerBase
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.IComparable`1
    parent: System
    commentId: T:System.IComparable{Febucci.UI.Core.Parsing.MarkerBase}
  Febucci.UI.Core.Parsing.ActionMarker.#ctor*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.ActionMarker.#ctor*
        name: ActionMarker
        nameWithType: ActionMarker.ActionMarker
        qualifiedName: Febucci.UI.Core.Parsing.ActionMarker.ActionMarker
      VB:
      - id: Febucci.UI.Core.Parsing.ActionMarker.#ctor*
        name: ActionMarker
        nameWithType: ActionMarker.ActionMarker
        qualifiedName: Febucci.UI.Core.Parsing.ActionMarker.ActionMarker
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.ActionMarker.#ctor
  Febucci.UI.Core.Parsing.ActionMarker:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.ActionMarker
        name: ActionMarker
        nameWithType: ActionMarker
        qualifiedName: Febucci.UI.Core.Parsing.ActionMarker
      VB:
      - id: Febucci.UI.Core.Parsing.ActionMarker
        name: ActionMarker
        nameWithType: ActionMarker
        qualifiedName: Febucci.UI.Core.Parsing.ActionMarker
    isDefinition: true
    commentId: T:Febucci.UI.Core.Parsing.ActionMarker
  Febucci.UI.Core.Parsing.ActionMarker[]:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.ActionMarker
        name: ActionMarker
        nameWithType: ActionMarker
        qualifiedName: Febucci.UI.Core.Parsing.ActionMarker
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Febucci.UI.Core.Parsing.ActionMarker
        name: ActionMarker
        nameWithType: ActionMarker
        qualifiedName: Febucci.UI.Core.Parsing.ActionMarker
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Febucci.UI.Core.Parsing.ActionParser.results*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.ActionParser.results*
        name: results
        nameWithType: ActionParser.results
        qualifiedName: Febucci.UI.Core.Parsing.ActionParser.results
      VB:
      - id: Febucci.UI.Core.Parsing.ActionParser.results*
        name: results
        nameWithType: ActionParser.results
        qualifiedName: Febucci.UI.Core.Parsing.ActionParser.results
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.ActionParser.results
  Febucci.UI.Core.Parsing.ActionParser.#ctor*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.ActionParser.#ctor*
        name: ActionParser
        nameWithType: ActionParser.ActionParser
        qualifiedName: Febucci.UI.Core.Parsing.ActionParser.ActionParser
      VB:
      - id: Febucci.UI.Core.Parsing.ActionParser.#ctor*
        name: ActionParser
        nameWithType: ActionParser.ActionParser
        qualifiedName: Febucci.UI.Core.Parsing.ActionParser.ActionParser
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.ActionParser.#ctor
  Febucci.UI.Core.Parsing.ActionParser.OnInitialize*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.ActionParser.OnInitialize*
        name: OnInitialize
        nameWithType: ActionParser.OnInitialize
        qualifiedName: Febucci.UI.Core.Parsing.ActionParser.OnInitialize
      VB:
      - id: Febucci.UI.Core.Parsing.ActionParser.OnInitialize*
        name: OnInitialize
        nameWithType: ActionParser.OnInitialize
        qualifiedName: Febucci.UI.Core.Parsing.ActionParser.OnInitialize
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.ActionParser.OnInitialize
  Febucci.UI.Core.Parsing.ActionParser.TryProcessingTag*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.ActionParser.TryProcessingTag*
        name: TryProcessingTag
        nameWithType: ActionParser.TryProcessingTag
        qualifiedName: Febucci.UI.Core.Parsing.ActionParser.TryProcessingTag
      VB:
      - id: Febucci.UI.Core.Parsing.ActionParser.TryProcessingTag*
        name: TryProcessingTag
        nameWithType: ActionParser.TryProcessingTag
        qualifiedName: Febucci.UI.Core.Parsing.ActionParser.TryProcessingTag
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.ActionParser.TryProcessingTag
  Febucci.UI.Core.Parsing.ActionParser:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.ActionParser
        name: ActionParser
        nameWithType: ActionParser
        qualifiedName: Febucci.UI.Core.Parsing.ActionParser
      VB:
      - id: Febucci.UI.Core.Parsing.ActionParser
        name: ActionParser
        nameWithType: ActionParser
        qualifiedName: Febucci.UI.Core.Parsing.ActionParser
    isDefinition: true
    commentId: T:Febucci.UI.Core.Parsing.ActionParser
  Febucci.UI.Core.Parsing.EventMarker.#ctor*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.EventMarker.#ctor*
        name: EventMarker
        nameWithType: EventMarker.EventMarker
        qualifiedName: Febucci.UI.Core.Parsing.EventMarker.EventMarker
      VB:
      - id: Febucci.UI.Core.Parsing.EventMarker.#ctor*
        name: EventMarker
        nameWithType: EventMarker.EventMarker
        qualifiedName: Febucci.UI.Core.Parsing.EventMarker.EventMarker
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.EventMarker.#ctor
  Febucci.UI.Core.Parsing.EventMarker:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.EventMarker
        name: EventMarker
        nameWithType: EventMarker
        qualifiedName: Febucci.UI.Core.Parsing.EventMarker
      VB:
      - id: Febucci.UI.Core.Parsing.EventMarker
        name: EventMarker
        nameWithType: EventMarker
        qualifiedName: Febucci.UI.Core.Parsing.EventMarker
    isDefinition: true
    commentId: T:Febucci.UI.Core.Parsing.EventMarker
  Febucci.UI.Core.Parsing.EventParser.#ctor*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.EventParser.#ctor*
        name: EventParser
        nameWithType: EventParser.EventParser
        qualifiedName: Febucci.UI.Core.Parsing.EventParser.EventParser
      VB:
      - id: Febucci.UI.Core.Parsing.EventParser.#ctor*
        name: EventParser
        nameWithType: EventParser.EventParser
        qualifiedName: Febucci.UI.Core.Parsing.EventParser.EventParser
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.EventParser.#ctor
  Febucci.UI.Core.Parsing.EventMarker[]:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.EventMarker
        name: EventMarker
        nameWithType: EventMarker
        qualifiedName: Febucci.UI.Core.Parsing.EventMarker
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Febucci.UI.Core.Parsing.EventMarker
        name: EventMarker
        nameWithType: EventMarker
        qualifiedName: Febucci.UI.Core.Parsing.EventMarker
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Febucci.UI.Core.Parsing.EventParser.results*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.EventParser.results*
        name: results
        nameWithType: EventParser.results
        qualifiedName: Febucci.UI.Core.Parsing.EventParser.results
      VB:
      - id: Febucci.UI.Core.Parsing.EventParser.results*
        name: results
        nameWithType: EventParser.results
        qualifiedName: Febucci.UI.Core.Parsing.EventParser.results
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.EventParser.results
  Febucci.UI.Core.Parsing.EventParser.OnInitialize*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.EventParser.OnInitialize*
        name: OnInitialize
        nameWithType: EventParser.OnInitialize
        qualifiedName: Febucci.UI.Core.Parsing.EventParser.OnInitialize
      VB:
      - id: Febucci.UI.Core.Parsing.EventParser.OnInitialize*
        name: OnInitialize
        nameWithType: EventParser.OnInitialize
        qualifiedName: Febucci.UI.Core.Parsing.EventParser.OnInitialize
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.EventParser.OnInitialize
  Febucci.UI.Core.Parsing.EventParser.TryProcessingTag*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.EventParser.TryProcessingTag*
        name: TryProcessingTag
        nameWithType: EventParser.TryProcessingTag
        qualifiedName: Febucci.UI.Core.Parsing.EventParser.TryProcessingTag
      VB:
      - id: Febucci.UI.Core.Parsing.EventParser.TryProcessingTag*
        name: TryProcessingTag
        nameWithType: EventParser.TryProcessingTag
        qualifiedName: Febucci.UI.Core.Parsing.EventParser.TryProcessingTag
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.EventParser.TryProcessingTag
  Febucci.UI.Core.Parsing.EventParser:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.EventParser
        name: EventParser
        nameWithType: EventParser
        qualifiedName: Febucci.UI.Core.Parsing.EventParser
      VB:
      - id: Febucci.UI.Core.Parsing.EventParser
        name: EventParser
        nameWithType: EventParser
        qualifiedName: Febucci.UI.Core.Parsing.EventParser
    isDefinition: true
    commentId: T:Febucci.UI.Core.Parsing.EventParser
  Febucci.UI.Core.Parsing.MarkerBase.#ctor*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.MarkerBase.#ctor*
        name: MarkerBase
        nameWithType: MarkerBase.MarkerBase
        qualifiedName: Febucci.UI.Core.Parsing.MarkerBase.MarkerBase
      VB:
      - id: Febucci.UI.Core.Parsing.MarkerBase.#ctor*
        name: MarkerBase
        nameWithType: MarkerBase.MarkerBase
        qualifiedName: Febucci.UI.Core.Parsing.MarkerBase.MarkerBase
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.MarkerBase.#ctor
  Febucci.UI.Core.Parsing.MarkerBase.CompareTo*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.MarkerBase.CompareTo*
        name: CompareTo
        nameWithType: MarkerBase.CompareTo
        qualifiedName: Febucci.UI.Core.Parsing.MarkerBase.CompareTo
      VB:
      - id: Febucci.UI.Core.Parsing.MarkerBase.CompareTo*
        name: CompareTo
        nameWithType: MarkerBase.CompareTo
        qualifiedName: Febucci.UI.Core.Parsing.MarkerBase.CompareTo
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.MarkerBase.CompareTo
  System.IComparable`1.CompareTo(`0):
    name:
      CSharp:
      - id: System.IComparable`1.CompareTo(`0)
        name: CompareTo
        nameWithType: IComparable<T>.CompareTo
        qualifiedName: System.IComparable<T>.CompareTo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.IComparable`1.CompareTo(`0)
        name: CompareTo
        nameWithType: IComparable(Of T).CompareTo
        qualifiedName: System.IComparable(Of T).CompareTo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.IComparable`1.CompareTo(`0)
  System.IComparable{Febucci.UI.Core.Parsing.MarkerBase}.CompareTo(Febucci.UI.Core.Parsing.MarkerBase):
    name:
      CSharp:
      - id: System.IComparable`1.CompareTo(`0)
        name: CompareTo
        nameWithType: IComparable<MarkerBase>.CompareTo
        qualifiedName: System.IComparable<Febucci.UI.Core.Parsing.MarkerBase>.CompareTo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Febucci.UI.Core.Parsing.MarkerBase
        name: MarkerBase
        nameWithType: MarkerBase
        qualifiedName: Febucci.UI.Core.Parsing.MarkerBase
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.IComparable`1.CompareTo(`0)
        name: CompareTo
        nameWithType: IComparable(Of MarkerBase).CompareTo
        qualifiedName: System.IComparable(Of Febucci.UI.Core.Parsing.MarkerBase).CompareTo
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Febucci.UI.Core.Parsing.MarkerBase
        name: MarkerBase
        nameWithType: MarkerBase
        qualifiedName: Febucci.UI.Core.Parsing.MarkerBase
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.IComparable`1.CompareTo(`0)
    parent: System.IComparable{Febucci.UI.Core.Parsing.MarkerBase}
    commentId: M:System.IComparable{Febucci.UI.Core.Parsing.MarkerBase}.CompareTo(Febucci.UI.Core.Parsing.MarkerBase)
  Febucci.UI.Core.Parsing.MarkerBase.ToString*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.MarkerBase.ToString*
        name: ToString
        nameWithType: MarkerBase.ToString
        qualifiedName: Febucci.UI.Core.Parsing.MarkerBase.ToString
      VB:
      - id: Febucci.UI.Core.Parsing.MarkerBase.ToString*
        name: ToString
        nameWithType: MarkerBase.ToString
        qualifiedName: Febucci.UI.Core.Parsing.MarkerBase.ToString
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.MarkerBase.ToString
  Febucci.UI.Core.Database{{T}}:
    name:
      CSharp:
      - id: Febucci.UI.Core.Database`1
        name: Database
        nameWithType: Database
        qualifiedName: Febucci.UI.Core.Database
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Febucci.UI.Core.Database`1
        name: Database
        nameWithType: Database
        qualifiedName: Febucci.UI.Core.Database
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Febucci.UI.Core.Database`1
    parent: Febucci.UI.Core
    commentId: T:Febucci.UI.Core.Database{`0}
  Febucci.UI.Core.Parsing.VisibilityMode:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.VisibilityMode
        name: VisibilityMode
        nameWithType: VisibilityMode
        qualifiedName: Febucci.UI.Core.Parsing.VisibilityMode
      VB:
      - id: Febucci.UI.Core.Parsing.VisibilityMode
        name: VisibilityMode
        nameWithType: VisibilityMode
        qualifiedName: Febucci.UI.Core.Parsing.VisibilityMode
    isDefinition: true
    parent: Febucci.UI.Core.Parsing
    commentId: T:Febucci.UI.Core.Parsing.VisibilityMode
  Febucci.UI.Core.Parsing.AnimationParser`1.#ctor*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.AnimationParser`1.#ctor*
        name: AnimationParser
        nameWithType: AnimationParser<T>.AnimationParser
        qualifiedName: Febucci.UI.Core.Parsing.AnimationParser<T>.AnimationParser
      VB:
      - id: Febucci.UI.Core.Parsing.AnimationParser`1.#ctor*
        name: AnimationParser
        nameWithType: AnimationParser(Of T).AnimationParser
        qualifiedName: Febucci.UI.Core.Parsing.AnimationParser(Of T).AnimationParser
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.AnimationParser`1.#ctor
  Febucci.UI.Core.Parsing.AnimationRegion[]:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.AnimationRegion
        name: AnimationRegion
        nameWithType: AnimationRegion
        qualifiedName: Febucci.UI.Core.Parsing.AnimationRegion
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Febucci.UI.Core.Parsing.AnimationRegion
        name: AnimationRegion
        nameWithType: AnimationRegion
        qualifiedName: Febucci.UI.Core.Parsing.AnimationRegion
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Febucci.UI.Core.Parsing.AnimationParser`1.results*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.AnimationParser`1.results*
        name: results
        nameWithType: AnimationParser<T>.results
        qualifiedName: Febucci.UI.Core.Parsing.AnimationParser<T>.results
      VB:
      - id: Febucci.UI.Core.Parsing.AnimationParser`1.results*
        name: results
        nameWithType: AnimationParser(Of T).results
        qualifiedName: Febucci.UI.Core.Parsing.AnimationParser(Of T).results
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.AnimationParser`1.results
  Febucci.UI.Core.Parsing.AnimationParser`1.OnInitialize*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.AnimationParser`1.OnInitialize*
        name: OnInitialize
        nameWithType: AnimationParser<T>.OnInitialize
        qualifiedName: Febucci.UI.Core.Parsing.AnimationParser<T>.OnInitialize
      VB:
      - id: Febucci.UI.Core.Parsing.AnimationParser`1.OnInitialize*
        name: OnInitialize
        nameWithType: AnimationParser(Of T).OnInitialize
        qualifiedName: Febucci.UI.Core.Parsing.AnimationParser(Of T).OnInitialize
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.AnimationParser`1.OnInitialize
  Febucci.UI.Core.Parsing.AnimationParser`1.TryProcessingTag*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.AnimationParser`1.TryProcessingTag*
        name: TryProcessingTag
        nameWithType: AnimationParser<T>.TryProcessingTag
        qualifiedName: Febucci.UI.Core.Parsing.AnimationParser<T>.TryProcessingTag
      VB:
      - id: Febucci.UI.Core.Parsing.AnimationParser`1.TryProcessingTag*
        name: TryProcessingTag
        nameWithType: AnimationParser(Of T).TryProcessingTag
        qualifiedName: Febucci.UI.Core.Parsing.AnimationParser(Of T).TryProcessingTag
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.AnimationParser`1.TryProcessingTag
  Febucci.UI.Core.Parsing.AnimationParser`1:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.AnimationParser`1
        name: AnimationParser
        nameWithType: AnimationParser
        qualifiedName: Febucci.UI.Core.Parsing.AnimationParser
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Febucci.UI.Core.Parsing.AnimationParser`1
        name: AnimationParser
        nameWithType: AnimationParser
        qualifiedName: Febucci.UI.Core.Parsing.AnimationParser
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Febucci.UI.Core.Parsing.AnimationParser`1
  Febucci.UI.Core.Parsing.RegionBase:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.RegionBase
        name: RegionBase
        nameWithType: RegionBase
        qualifiedName: Febucci.UI.Core.Parsing.RegionBase
      VB:
      - id: Febucci.UI.Core.Parsing.RegionBase
        name: RegionBase
        nameWithType: RegionBase
        qualifiedName: Febucci.UI.Core.Parsing.RegionBase
    isDefinition: true
    parent: Febucci.UI.Core.Parsing
    commentId: T:Febucci.UI.Core.Parsing.RegionBase
  Febucci.UI.Core.Parsing.RegionBase.tagId:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.RegionBase.tagId
        name: tagId
        nameWithType: RegionBase.tagId
        qualifiedName: Febucci.UI.Core.Parsing.RegionBase.tagId
      VB:
      - id: Febucci.UI.Core.Parsing.RegionBase.tagId
        name: tagId
        nameWithType: RegionBase.tagId
        qualifiedName: Febucci.UI.Core.Parsing.RegionBase.tagId
    isDefinition: true
    parent: Febucci.UI.Core.Parsing.RegionBase
    commentId: F:Febucci.UI.Core.Parsing.RegionBase.tagId
  Febucci.UI.Core.Parsing.RegionBase.ranges:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.RegionBase.ranges
        name: ranges
        nameWithType: RegionBase.ranges
        qualifiedName: Febucci.UI.Core.Parsing.RegionBase.ranges
      VB:
      - id: Febucci.UI.Core.Parsing.RegionBase.ranges
        name: ranges
        nameWithType: RegionBase.ranges
        qualifiedName: Febucci.UI.Core.Parsing.RegionBase.ranges
    isDefinition: true
    parent: Febucci.UI.Core.Parsing.RegionBase
    commentId: F:Febucci.UI.Core.Parsing.RegionBase.ranges
  AnimationScriptableBase:
    name:
      CSharp:
      - id: AnimationScriptableBase
        name: AnimationScriptableBase
        nameWithType: AnimationScriptableBase
        qualifiedName: AnimationScriptableBase
        isExternal: true
      VB:
      - id: AnimationScriptableBase
        name: AnimationScriptableBase
        nameWithType: AnimationScriptableBase
        qualifiedName: AnimationScriptableBase
        isExternal: true
    isDefinition: true
  Febucci.UI.Core.Parsing.AnimationRegion.#ctor*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.AnimationRegion.#ctor*
        name: AnimationRegion
        nameWithType: AnimationRegion.AnimationRegion
        qualifiedName: Febucci.UI.Core.Parsing.AnimationRegion.AnimationRegion
      VB:
      - id: Febucci.UI.Core.Parsing.AnimationRegion.#ctor*
        name: AnimationRegion
        nameWithType: AnimationRegion.AnimationRegion
        qualifiedName: Febucci.UI.Core.Parsing.AnimationRegion.AnimationRegion
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.AnimationRegion.#ctor
  Febucci.UI.Core.Parsing.AnimationRegion.IsVisibilityPolicySatisfied*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.AnimationRegion.IsVisibilityPolicySatisfied*
        name: IsVisibilityPolicySatisfied
        nameWithType: AnimationRegion.IsVisibilityPolicySatisfied
        qualifiedName: Febucci.UI.Core.Parsing.AnimationRegion.IsVisibilityPolicySatisfied
      VB:
      - id: Febucci.UI.Core.Parsing.AnimationRegion.IsVisibilityPolicySatisfied*
        name: IsVisibilityPolicySatisfied
        nameWithType: AnimationRegion.IsVisibilityPolicySatisfied
        qualifiedName: Febucci.UI.Core.Parsing.AnimationRegion.IsVisibilityPolicySatisfied
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.AnimationRegion.IsVisibilityPolicySatisfied
  Febucci.UI.Core.Parsing.AnimationRegion.OpenNewRange*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.AnimationRegion.OpenNewRange*
        name: OpenNewRange
        nameWithType: AnimationRegion.OpenNewRange
        qualifiedName: Febucci.UI.Core.Parsing.AnimationRegion.OpenNewRange
      VB:
      - id: Febucci.UI.Core.Parsing.AnimationRegion.OpenNewRange*
        name: OpenNewRange
        nameWithType: AnimationRegion.OpenNewRange
        qualifiedName: Febucci.UI.Core.Parsing.AnimationRegion.OpenNewRange
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.AnimationRegion.OpenNewRange
  Febucci.UI.Core.Parsing.AnimationRegion.TryClosingRange*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.AnimationRegion.TryClosingRange*
        name: TryClosingRange
        nameWithType: AnimationRegion.TryClosingRange
        qualifiedName: Febucci.UI.Core.Parsing.AnimationRegion.TryClosingRange
      VB:
      - id: Febucci.UI.Core.Parsing.AnimationRegion.TryClosingRange*
        name: TryClosingRange
        nameWithType: AnimationRegion.TryClosingRange
        qualifiedName: Febucci.UI.Core.Parsing.AnimationRegion.TryClosingRange
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.AnimationRegion.TryClosingRange
  Febucci.UI.Core.Parsing.AnimationRegion.CloseAllOpenedRanges*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.AnimationRegion.CloseAllOpenedRanges*
        name: CloseAllOpenedRanges
        nameWithType: AnimationRegion.CloseAllOpenedRanges
        qualifiedName: Febucci.UI.Core.Parsing.AnimationRegion.CloseAllOpenedRanges
      VB:
      - id: Febucci.UI.Core.Parsing.AnimationRegion.CloseAllOpenedRanges*
        name: CloseAllOpenedRanges
        nameWithType: AnimationRegion.CloseAllOpenedRanges
        qualifiedName: Febucci.UI.Core.Parsing.AnimationRegion.CloseAllOpenedRanges
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.AnimationRegion.CloseAllOpenedRanges
  Febucci.UI.ModifierInfo[]:
    name:
      CSharp:
      - id: Febucci.UI.ModifierInfo
        name: ModifierInfo
        nameWithType: ModifierInfo
        qualifiedName: Febucci.UI.ModifierInfo
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Febucci.UI.ModifierInfo
        name: ModifierInfo
        nameWithType: ModifierInfo
        qualifiedName: Febucci.UI.ModifierInfo
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Febucci.UI.Core.Parsing.AnimationRegion.SetupContextFor*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.AnimationRegion.SetupContextFor*
        name: SetupContextFor
        nameWithType: AnimationRegion.SetupContextFor
        qualifiedName: Febucci.UI.Core.Parsing.AnimationRegion.SetupContextFor
      VB:
      - id: Febucci.UI.Core.Parsing.AnimationRegion.SetupContextFor*
        name: SetupContextFor
        nameWithType: AnimationRegion.SetupContextFor
        qualifiedName: Febucci.UI.Core.Parsing.AnimationRegion.SetupContextFor
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.AnimationRegion.SetupContextFor
  Febucci.UI.Core.Parsing.AnimationRegion.ToString*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.AnimationRegion.ToString*
        name: ToString
        nameWithType: AnimationRegion.ToString
        qualifiedName: Febucci.UI.Core.Parsing.AnimationRegion.ToString
      VB:
      - id: Febucci.UI.Core.Parsing.AnimationRegion.ToString*
        name: ToString
        nameWithType: AnimationRegion.ToString
        qualifiedName: Febucci.UI.Core.Parsing.AnimationRegion.ToString
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.AnimationRegion.ToString
  Febucci.UI.Core.Parsing.AnimationRegion:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.AnimationRegion
        name: AnimationRegion
        nameWithType: AnimationRegion
        qualifiedName: Febucci.UI.Core.Parsing.AnimationRegion
      VB:
      - id: Febucci.UI.Core.Parsing.AnimationRegion
        name: AnimationRegion
        nameWithType: AnimationRegion
        qualifiedName: Febucci.UI.Core.Parsing.AnimationRegion
    isDefinition: true
    commentId: T:Febucci.UI.Core.Parsing.AnimationRegion
  Febucci.UI.Core.Parsing.StylesParser.#ctor*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.StylesParser.#ctor*
        name: StylesParser
        nameWithType: StylesParser.StylesParser
        qualifiedName: Febucci.UI.Core.Parsing.StylesParser.StylesParser
      VB:
      - id: Febucci.UI.Core.Parsing.StylesParser.#ctor*
        name: StylesParser
        nameWithType: StylesParser.StylesParser
        qualifiedName: Febucci.UI.Core.Parsing.StylesParser.StylesParser
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.StylesParser.#ctor
  Febucci.UI.Core.Parsing.StylesParser.TryProcessingTag*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.StylesParser.TryProcessingTag*
        name: TryProcessingTag
        nameWithType: StylesParser.TryProcessingTag
        qualifiedName: Febucci.UI.Core.Parsing.StylesParser.TryProcessingTag
      VB:
      - id: Febucci.UI.Core.Parsing.StylesParser.TryProcessingTag*
        name: TryProcessingTag
        nameWithType: StylesParser.TryProcessingTag
        qualifiedName: Febucci.UI.Core.Parsing.StylesParser.TryProcessingTag
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.StylesParser.TryProcessingTag
  Febucci.UI.Core.Parsing.StylesParser:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.StylesParser
        name: StylesParser
        nameWithType: StylesParser
        qualifiedName: Febucci.UI.Core.Parsing.StylesParser
      VB:
      - id: Febucci.UI.Core.Parsing.StylesParser
        name: StylesParser
        nameWithType: StylesParser
        qualifiedName: Febucci.UI.Core.Parsing.StylesParser
    isDefinition: true
    commentId: T:Febucci.UI.Core.Parsing.StylesParser
  Febucci.UI.Core.Parsing.TagRange[]:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.TagRange
        name: TagRange
        nameWithType: TagRange
        qualifiedName: Febucci.UI.Core.Parsing.TagRange
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Febucci.UI.Core.Parsing.TagRange
        name: TagRange
        nameWithType: TagRange
        qualifiedName: Febucci.UI.Core.Parsing.TagRange
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Febucci.UI.Core.Parsing.RegionBase.#ctor*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.RegionBase.#ctor*
        name: RegionBase
        nameWithType: RegionBase.RegionBase
        qualifiedName: Febucci.UI.Core.Parsing.RegionBase.RegionBase
      VB:
      - id: Febucci.UI.Core.Parsing.RegionBase.#ctor*
        name: RegionBase
        nameWithType: RegionBase.RegionBase
        qualifiedName: Febucci.UI.Core.Parsing.RegionBase.RegionBase
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.RegionBase.#ctor
  Vector2Int:
    name:
      CSharp:
      - id: Vector2Int
        name: Vector2Int
        nameWithType: Vector2Int
        qualifiedName: Vector2Int
        isExternal: true
      VB:
      - id: Vector2Int
        name: Vector2Int
        nameWithType: Vector2Int
        qualifiedName: Vector2Int
        isExternal: true
    isDefinition: true
  Febucci.UI.Core.Parsing.TagRange.#ctor*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.TagRange.#ctor*
        name: TagRange
        nameWithType: TagRange.TagRange
        qualifiedName: Febucci.UI.Core.Parsing.TagRange.TagRange
      VB:
      - id: Febucci.UI.Core.Parsing.TagRange.#ctor*
        name: TagRange
        nameWithType: TagRange.TagRange
        qualifiedName: Febucci.UI.Core.Parsing.TagRange.TagRange
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.TagRange.#ctor
  Febucci.UI.Core.Parsing.TagRange.ToString*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.TagRange.ToString*
        name: ToString
        nameWithType: TagRange.ToString
        qualifiedName: Febucci.UI.Core.Parsing.TagRange.ToString
      VB:
      - id: Febucci.UI.Core.Parsing.TagRange.ToString*
        name: ToString
        nameWithType: TagRange.ToString
        qualifiedName: Febucci.UI.Core.Parsing.TagRange.ToString
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.TagRange.ToString
  Febucci.UI.Core.Parsing.TagRange:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.TagRange
        name: TagRange
        nameWithType: TagRange
        qualifiedName: Febucci.UI.Core.Parsing.TagRange
      VB:
      - id: Febucci.UI.Core.Parsing.TagRange
        name: TagRange
        nameWithType: TagRange
        qualifiedName: Febucci.UI.Core.Parsing.TagRange
    isDefinition: true
    commentId: T:Febucci.UI.Core.Parsing.TagRange
  Febucci.UI.Core.Parsing.PlainTagParser.#ctor*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.PlainTagParser.#ctor*
        name: PlainTagParser
        nameWithType: PlainTagParser.PlainTagParser
        qualifiedName: Febucci.UI.Core.Parsing.PlainTagParser.PlainTagParser
      VB:
      - id: Febucci.UI.Core.Parsing.PlainTagParser.#ctor*
        name: PlainTagParser
        nameWithType: PlainTagParser.PlainTagParser
        qualifiedName: Febucci.UI.Core.Parsing.PlainTagParser.PlainTagParser
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.PlainTagParser.#ctor
  Febucci.UI.Core.Parsing.PlainTagParser.TryProcessingTag*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.PlainTagParser.TryProcessingTag*
        name: TryProcessingTag
        nameWithType: PlainTagParser.TryProcessingTag
        qualifiedName: Febucci.UI.Core.Parsing.PlainTagParser.TryProcessingTag
      VB:
      - id: Febucci.UI.Core.Parsing.PlainTagParser.TryProcessingTag*
        name: TryProcessingTag
        nameWithType: PlainTagParser.TryProcessingTag
        qualifiedName: Febucci.UI.Core.Parsing.PlainTagParser.TryProcessingTag
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.PlainTagParser.TryProcessingTag
  Febucci.UI.Core.Parsing.PlainTagParser:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.PlainTagParser
        name: PlainTagParser
        nameWithType: PlainTagParser
        qualifiedName: Febucci.UI.Core.Parsing.PlainTagParser
      VB:
      - id: Febucci.UI.Core.Parsing.PlainTagParser
        name: PlainTagParser
        nameWithType: PlainTagParser
        qualifiedName: Febucci.UI.Core.Parsing.PlainTagParser
    isDefinition: true
    commentId: T:Febucci.UI.Core.Parsing.PlainTagParser
  Febucci.UI.Core.Parsing.TagParserBase.#ctor*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.TagParserBase.#ctor*
        name: TagParserBase
        nameWithType: TagParserBase.TagParserBase
        qualifiedName: Febucci.UI.Core.Parsing.TagParserBase.TagParserBase
      VB:
      - id: Febucci.UI.Core.Parsing.TagParserBase.#ctor*
        name: TagParserBase
        nameWithType: TagParserBase.TagParserBase
        qualifiedName: Febucci.UI.Core.Parsing.TagParserBase.TagParserBase
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.TagParserBase.#ctor
  Febucci.UI.Core.Parsing.TagParserBase.TryProcessingTag*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.TagParserBase.TryProcessingTag*
        name: TryProcessingTag
        nameWithType: TagParserBase.TryProcessingTag
        qualifiedName: Febucci.UI.Core.Parsing.TagParserBase.TryProcessingTag
      VB:
      - id: Febucci.UI.Core.Parsing.TagParserBase.TryProcessingTag*
        name: TryProcessingTag
        nameWithType: TagParserBase.TryProcessingTag
        qualifiedName: Febucci.UI.Core.Parsing.TagParserBase.TryProcessingTag
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.TagParserBase.TryProcessingTag
  Febucci.UI.Core.Parsing.TagParserBase.Initialize*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.TagParserBase.Initialize*
        name: Initialize
        nameWithType: TagParserBase.Initialize
        qualifiedName: Febucci.UI.Core.Parsing.TagParserBase.Initialize
      VB:
      - id: Febucci.UI.Core.Parsing.TagParserBase.Initialize*
        name: Initialize
        nameWithType: TagParserBase.Initialize
        qualifiedName: Febucci.UI.Core.Parsing.TagParserBase.Initialize
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.TagParserBase.Initialize
  Febucci.UI.Core.Parsing.TagParserBase.OnInitialize*:
    name:
      CSharp:
      - id: Febucci.UI.Core.Parsing.TagParserBase.OnInitialize*
        name: OnInitialize
        nameWithType: TagParserBase.OnInitialize
        qualifiedName: Febucci.UI.Core.Parsing.TagParserBase.OnInitialize
      VB:
      - id: Febucci.UI.Core.Parsing.TagParserBase.OnInitialize*
        name: OnInitialize
        nameWithType: TagParserBase.OnInitialize
        qualifiedName: Febucci.UI.Core.Parsing.TagParserBase.OnInitialize
    isDefinition: true
    commentId: Overload:Febucci.UI.Core.Parsing.TagParserBase.OnInitialize
  Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}:
    name:
      CSharp:
      - id: Febucci.UI.Core.Database`1
        name: Database
        nameWithType: Database
        qualifiedName: Febucci.UI.Core.Database
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Febucci.UI.Actions.ActionScriptableBase
        name: ActionScriptableBase
        nameWithType: ActionScriptableBase
        qualifiedName: Febucci.UI.Actions.ActionScriptableBase
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Febucci.UI.Core.Database`1
        name: Database
        nameWithType: Database
        qualifiedName: Febucci.UI.Core.Database
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Febucci.UI.Actions.ActionScriptableBase
        name: ActionScriptableBase
        nameWithType: ActionScriptableBase
        qualifiedName: Febucci.UI.Actions.ActionScriptableBase
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Febucci.UI.Core.Database`1
    parent: Febucci.UI.Core
    commentId: T:Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}
  Febucci.UI.Core.Database`1.Data:
    name:
      CSharp:
      - id: Febucci.UI.Core.Database`1.Data
        name: Data
        nameWithType: Database<T>.Data
        qualifiedName: Febucci.UI.Core.Database<T>.Data
      VB:
      - id: Febucci.UI.Core.Database`1.Data
        name: Data
        nameWithType: Database(Of T).Data
        qualifiedName: Febucci.UI.Core.Database(Of T).Data
    isDefinition: true
    commentId: P:Febucci.UI.Core.Database`1.Data
  Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}.Data:
    name:
      CSharp:
      - id: Febucci.UI.Core.Database`1.Data
        name: Data
        nameWithType: Database<ActionScriptableBase>.Data
        qualifiedName: Febucci.UI.Core.Database<Febucci.UI.Actions.ActionScriptableBase>.Data
      VB:
      - id: Febucci.UI.Core.Database`1.Data
        name: Data
        nameWithType: Database(Of ActionScriptableBase).Data
        qualifiedName: Febucci.UI.Core.Database(Of Febucci.UI.Actions.ActionScriptableBase).Data
    isDefinition: false
    definition: Febucci.UI.Core.Database`1.Data
    parent: Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}
    commentId: P:Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}.Data
  Febucci.UI.Core.Database`1.Add(`0):
    name:
      CSharp:
      - id: Febucci.UI.Core.Database`1.Add(`0)
        name: Add
        nameWithType: Database<T>.Add
        qualifiedName: Febucci.UI.Core.Database<T>.Add
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Core.Database`1.Add(`0)
        name: Add
        nameWithType: Database(Of T).Add
        qualifiedName: Febucci.UI.Core.Database(Of T).Add
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Febucci.UI.Core.Database`1.Add(`0)
  Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}.Add(Febucci.UI.Actions.ActionScriptableBase):
    name:
      CSharp:
      - id: Febucci.UI.Core.Database`1.Add(`0)
        name: Add
        nameWithType: Database<ActionScriptableBase>.Add
        qualifiedName: Febucci.UI.Core.Database<Febucci.UI.Actions.ActionScriptableBase>.Add
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Febucci.UI.Actions.ActionScriptableBase
        name: ActionScriptableBase
        nameWithType: ActionScriptableBase
        qualifiedName: Febucci.UI.Actions.ActionScriptableBase
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Core.Database`1.Add(`0)
        name: Add
        nameWithType: Database(Of ActionScriptableBase).Add
        qualifiedName: Febucci.UI.Core.Database(Of Febucci.UI.Actions.ActionScriptableBase).Add
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Febucci.UI.Actions.ActionScriptableBase
        name: ActionScriptableBase
        nameWithType: ActionScriptableBase
        qualifiedName: Febucci.UI.Actions.ActionScriptableBase
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Febucci.UI.Core.Database`1.Add(`0)
    parent: Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}
    commentId: M:Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}.Add(Febucci.UI.Actions.ActionScriptableBase)
  Febucci.UI.Core.Database`1.ForceBuildRefresh:
    name:
      CSharp:
      - id: Febucci.UI.Core.Database`1.ForceBuildRefresh
        name: ForceBuildRefresh
        nameWithType: Database<T>.ForceBuildRefresh
        qualifiedName: Febucci.UI.Core.Database<T>.ForceBuildRefresh
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Core.Database`1.ForceBuildRefresh
        name: ForceBuildRefresh
        nameWithType: Database(Of T).ForceBuildRefresh
        qualifiedName: Febucci.UI.Core.Database(Of T).ForceBuildRefresh
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Febucci.UI.Core.Database`1.ForceBuildRefresh
  Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}.ForceBuildRefresh:
    name:
      CSharp:
      - id: Febucci.UI.Core.Database`1.ForceBuildRefresh
        name: ForceBuildRefresh
        nameWithType: Database<ActionScriptableBase>.ForceBuildRefresh
        qualifiedName: Febucci.UI.Core.Database<Febucci.UI.Actions.ActionScriptableBase>.ForceBuildRefresh
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Core.Database`1.ForceBuildRefresh
        name: ForceBuildRefresh
        nameWithType: Database(Of ActionScriptableBase).ForceBuildRefresh
        qualifiedName: Febucci.UI.Core.Database(Of Febucci.UI.Actions.ActionScriptableBase).ForceBuildRefresh
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Febucci.UI.Core.Database`1.ForceBuildRefresh
    parent: Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}
    commentId: M:Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}.ForceBuildRefresh
  Febucci.UI.Core.Database`1.BuildOnce:
    name:
      CSharp:
      - id: Febucci.UI.Core.Database`1.BuildOnce
        name: BuildOnce
        nameWithType: Database<T>.BuildOnce
        qualifiedName: Febucci.UI.Core.Database<T>.BuildOnce
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Core.Database`1.BuildOnce
        name: BuildOnce
        nameWithType: Database(Of T).BuildOnce
        qualifiedName: Febucci.UI.Core.Database(Of T).BuildOnce
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Febucci.UI.Core.Database`1.BuildOnce
  Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}.BuildOnce:
    name:
      CSharp:
      - id: Febucci.UI.Core.Database`1.BuildOnce
        name: BuildOnce
        nameWithType: Database<ActionScriptableBase>.BuildOnce
        qualifiedName: Febucci.UI.Core.Database<Febucci.UI.Actions.ActionScriptableBase>.BuildOnce
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Core.Database`1.BuildOnce
        name: BuildOnce
        nameWithType: Database(Of ActionScriptableBase).BuildOnce
        qualifiedName: Febucci.UI.Core.Database(Of Febucci.UI.Actions.ActionScriptableBase).BuildOnce
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Febucci.UI.Core.Database`1.BuildOnce
    parent: Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}
    commentId: M:Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}.BuildOnce
  Febucci.UI.Core.Database`1.OnBuildOnce:
    name:
      CSharp:
      - id: Febucci.UI.Core.Database`1.OnBuildOnce
        name: OnBuildOnce
        nameWithType: Database<T>.OnBuildOnce
        qualifiedName: Febucci.UI.Core.Database<T>.OnBuildOnce
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Core.Database`1.OnBuildOnce
        name: OnBuildOnce
        nameWithType: Database(Of T).OnBuildOnce
        qualifiedName: Febucci.UI.Core.Database(Of T).OnBuildOnce
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Febucci.UI.Core.Database`1.OnBuildOnce
  Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}.OnBuildOnce:
    name:
      CSharp:
      - id: Febucci.UI.Core.Database`1.OnBuildOnce
        name: OnBuildOnce
        nameWithType: Database<ActionScriptableBase>.OnBuildOnce
        qualifiedName: Febucci.UI.Core.Database<Febucci.UI.Actions.ActionScriptableBase>.OnBuildOnce
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Core.Database`1.OnBuildOnce
        name: OnBuildOnce
        nameWithType: Database(Of ActionScriptableBase).OnBuildOnce
        qualifiedName: Febucci.UI.Core.Database(Of Febucci.UI.Actions.ActionScriptableBase).OnBuildOnce
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Febucci.UI.Core.Database`1.OnBuildOnce
    parent: Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}
    commentId: M:Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}.OnBuildOnce
  Febucci.UI.Core.Database`1.ContainsKey(System.String):
    name:
      CSharp:
      - id: Febucci.UI.Core.Database`1.ContainsKey(System.String)
        name: ContainsKey
        nameWithType: Database<T>.ContainsKey
        qualifiedName: Febucci.UI.Core.Database<T>.ContainsKey
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Core.Database`1.ContainsKey(System.String)
        name: ContainsKey
        nameWithType: Database(Of T).ContainsKey
        qualifiedName: Febucci.UI.Core.Database(Of T).ContainsKey
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Febucci.UI.Core.Database`1.ContainsKey(System.String)
  Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}.ContainsKey(System.String):
    name:
      CSharp:
      - id: Febucci.UI.Core.Database`1.ContainsKey(System.String)
        name: ContainsKey
        nameWithType: Database<ActionScriptableBase>.ContainsKey
        qualifiedName: Febucci.UI.Core.Database<Febucci.UI.Actions.ActionScriptableBase>.ContainsKey
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Core.Database`1.ContainsKey(System.String)
        name: ContainsKey
        nameWithType: Database(Of ActionScriptableBase).ContainsKey
        qualifiedName: Febucci.UI.Core.Database(Of Febucci.UI.Actions.ActionScriptableBase).ContainsKey
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Febucci.UI.Core.Database`1.ContainsKey(System.String)
    parent: Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}
    commentId: M:Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}.ContainsKey(System.String)
  Febucci.UI.Core.Database`1.Item(System.String):
    name:
      CSharp:
      - id: Febucci.UI.Core.Database`1.Item(System.String)
        name: Item
        nameWithType: Database<T>.Item
        qualifiedName: Febucci.UI.Core.Database<T>.Item
      - name: '['
        nameWithType: '['
        qualifiedName: '['
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ']'
        nameWithType: ']'
        qualifiedName: ']'
      VB:
      - id: Febucci.UI.Core.Database`1.Item(System.String)
        name: Item
        nameWithType: Database(Of T).Item
        qualifiedName: Febucci.UI.Core.Database(Of T).Item
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: P:Febucci.UI.Core.Database`1.Item(System.String)
  Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}.Item(System.String):
    name:
      CSharp:
      - id: Febucci.UI.Core.Database`1.Item(System.String)
        name: Item
        nameWithType: Database<ActionScriptableBase>.Item
        qualifiedName: Febucci.UI.Core.Database<Febucci.UI.Actions.ActionScriptableBase>.Item
      - name: '['
        nameWithType: '['
        qualifiedName: '['
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ']'
        nameWithType: ']'
        qualifiedName: ']'
      VB:
      - id: Febucci.UI.Core.Database`1.Item(System.String)
        name: Item
        nameWithType: Database(Of ActionScriptableBase).Item
        qualifiedName: Febucci.UI.Core.Database(Of Febucci.UI.Actions.ActionScriptableBase).Item
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Febucci.UI.Core.Database`1.Item(System.String)
    parent: Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}
    commentId: P:Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}.Item(System.String)
  Febucci.UI.Core.Database`1.DestroyImmediate(System.Boolean):
    name:
      CSharp:
      - id: Febucci.UI.Core.Database`1.DestroyImmediate(System.Boolean)
        name: DestroyImmediate
        nameWithType: Database<T>.DestroyImmediate
        qualifiedName: Febucci.UI.Core.Database<T>.DestroyImmediate
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Core.Database`1.DestroyImmediate(System.Boolean)
        name: DestroyImmediate
        nameWithType: Database(Of T).DestroyImmediate
        qualifiedName: Febucci.UI.Core.Database(Of T).DestroyImmediate
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:Febucci.UI.Core.Database`1.DestroyImmediate(System.Boolean)
  Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}.DestroyImmediate(System.Boolean):
    name:
      CSharp:
      - id: Febucci.UI.Core.Database`1.DestroyImmediate(System.Boolean)
        name: DestroyImmediate
        nameWithType: Database<ActionScriptableBase>.DestroyImmediate
        qualifiedName: Febucci.UI.Core.Database<Febucci.UI.Actions.ActionScriptableBase>.DestroyImmediate
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Core.Database`1.DestroyImmediate(System.Boolean)
        name: DestroyImmediate
        nameWithType: Database(Of ActionScriptableBase).DestroyImmediate
        qualifiedName: Febucci.UI.Core.Database(Of Febucci.UI.Actions.ActionScriptableBase).DestroyImmediate
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Febucci.UI.Core.Database`1.DestroyImmediate(System.Boolean)
    parent: Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}
    commentId: M:Febucci.UI.Core.Database{Febucci.UI.Actions.ActionScriptableBase}.DestroyImmediate(System.Boolean)
  Febucci.UI.Actions.ActionDatabase:
    name:
      CSharp:
      - id: Febucci.UI.Actions.ActionDatabase
        name: ActionDatabase
        nameWithType: ActionDatabase
        qualifiedName: Febucci.UI.Actions.ActionDatabase
      VB:
      - id: Febucci.UI.Actions.ActionDatabase
        name: ActionDatabase
        nameWithType: ActionDatabase
        qualifiedName: Febucci.UI.Actions.ActionDatabase
    isDefinition: true
    commentId: T:Febucci.UI.Actions.ActionDatabase
  Febucci.UI.Actions:
    name:
      CSharp:
      - name: Febucci.UI.Actions
        nameWithType: Febucci.UI.Actions
        qualifiedName: Febucci.UI.Actions
      VB:
      - name: Febucci.UI.Actions
        nameWithType: Febucci.UI.Actions
        qualifiedName: Febucci.UI.Actions
    isDefinition: true
    commentId: N:Febucci.UI.Actions
  Febucci.UI.Actions.ActionScriptableBase:
    name:
      CSharp:
      - id: Febucci.UI.Actions.ActionScriptableBase
        name: ActionScriptableBase
        nameWithType: ActionScriptableBase
        qualifiedName: Febucci.UI.Actions.ActionScriptableBase
      VB:
      - id: Febucci.UI.Actions.ActionScriptableBase
        name: ActionScriptableBase
        nameWithType: ActionScriptableBase
        qualifiedName: Febucci.UI.Actions.ActionScriptableBase
    isDefinition: true
    parent: Febucci.UI.Actions
    commentId: T:Febucci.UI.Actions.ActionScriptableBase
  Febucci.UI.Actions.ActionScriptableBase.TagID:
    name:
      CSharp:
      - id: Febucci.UI.Actions.ActionScriptableBase.TagID
        name: TagID
        nameWithType: ActionScriptableBase.TagID
        qualifiedName: Febucci.UI.Actions.ActionScriptableBase.TagID
      VB:
      - id: Febucci.UI.Actions.ActionScriptableBase.TagID
        name: TagID
        nameWithType: ActionScriptableBase.TagID
        qualifiedName: Febucci.UI.Actions.ActionScriptableBase.TagID
    isDefinition: true
    parent: Febucci.UI.Actions.ActionScriptableBase
    commentId: P:Febucci.UI.Actions.ActionScriptableBase.TagID
  ITagProvider:
    name:
      CSharp:
      - id: ITagProvider
        name: ITagProvider
        nameWithType: ITagProvider
        qualifiedName: ITagProvider
        isExternal: true
      VB:
      - id: ITagProvider
        name: ITagProvider
        nameWithType: ITagProvider
        qualifiedName: ITagProvider
        isExternal: true
    isDefinition: true
  System.Collections:
    name:
      CSharp:
      - name: System.Collections
        nameWithType: System.Collections
        qualifiedName: System.Collections
        isExternal: true
      VB:
      - name: System.Collections
        nameWithType: System.Collections
        qualifiedName: System.Collections
    isDefinition: true
    commentId: N:System.Collections
  System.Collections.IEnumerator:
    name:
      CSharp:
      - id: System.Collections.IEnumerator
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.IEnumerator
        isExternal: true
      VB:
      - id: System.Collections.IEnumerator
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.IEnumerator
        isExternal: true
    isDefinition: true
    parent: System.Collections
    commentId: T:System.Collections.IEnumerator
  ActionMarker:
    name:
      CSharp:
      - id: ActionMarker
        name: ActionMarker
        nameWithType: ActionMarker
        qualifiedName: ActionMarker
        isExternal: true
      VB:
      - id: ActionMarker
        name: ActionMarker
        nameWithType: ActionMarker
        qualifiedName: ActionMarker
        isExternal: true
    isDefinition: true
  TypingInfo:
    name:
      CSharp:
      - id: TypingInfo
        name: TypingInfo
        nameWithType: TypingInfo
        qualifiedName: TypingInfo
        isExternal: true
      VB:
      - id: TypingInfo
        name: TypingInfo
        nameWithType: TypingInfo
        qualifiedName: TypingInfo
        isExternal: true
    isDefinition: true
  Febucci.UI.Actions.ActionScriptableBase.DoAction(ActionMarker,TypewriterCore,TypingInfo):
    name:
      CSharp:
      - id: Febucci.UI.Actions.ActionScriptableBase.DoAction(ActionMarker,TypewriterCore,TypingInfo)
        name: DoAction
        nameWithType: ActionScriptableBase.DoAction
        qualifiedName: Febucci.UI.Actions.ActionScriptableBase.DoAction
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: ActionMarker
        name: ActionMarker
        nameWithType: ActionMarker
        qualifiedName: ActionMarker
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: TypewriterCore
        name: TypewriterCore
        nameWithType: TypewriterCore
        qualifiedName: TypewriterCore
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: TypingInfo
        name: TypingInfo
        nameWithType: TypingInfo
        qualifiedName: TypingInfo
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Actions.ActionScriptableBase.DoAction(ActionMarker,TypewriterCore,TypingInfo)
        name: DoAction
        nameWithType: ActionScriptableBase.DoAction
        qualifiedName: Febucci.UI.Actions.ActionScriptableBase.DoAction
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: ActionMarker
        name: ActionMarker
        nameWithType: ActionMarker
        qualifiedName: ActionMarker
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: TypewriterCore
        name: TypewriterCore
        nameWithType: TypewriterCore
        qualifiedName: TypewriterCore
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: TypingInfo
        name: TypingInfo
        nameWithType: TypingInfo
        qualifiedName: TypingInfo
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Febucci.UI.Actions.ActionScriptableBase
    commentId: M:Febucci.UI.Actions.ActionScriptableBase.DoAction(ActionMarker,TypewriterCore,TypingInfo)
  Febucci.UI.Actions.SpeedAction.DoAction*:
    name:
      CSharp:
      - id: Febucci.UI.Actions.SpeedAction.DoAction*
        name: DoAction
        nameWithType: SpeedAction.DoAction
        qualifiedName: Febucci.UI.Actions.SpeedAction.DoAction
      VB:
      - id: Febucci.UI.Actions.SpeedAction.DoAction*
        name: DoAction
        nameWithType: SpeedAction.DoAction
        qualifiedName: Febucci.UI.Actions.SpeedAction.DoAction
    isDefinition: true
    commentId: Overload:Febucci.UI.Actions.SpeedAction.DoAction
  Febucci.UI.Actions.SpeedAction:
    name:
      CSharp:
      - id: Febucci.UI.Actions.SpeedAction
        name: SpeedAction
        nameWithType: SpeedAction
        qualifiedName: Febucci.UI.Actions.SpeedAction
      VB:
      - id: Febucci.UI.Actions.SpeedAction
        name: SpeedAction
        nameWithType: SpeedAction
        qualifiedName: Febucci.UI.Actions.SpeedAction
    isDefinition: true
    commentId: T:Febucci.UI.Actions.SpeedAction
  Febucci.UI.Actions.WaitAnyInputAction.DoAction*:
    name:
      CSharp:
      - id: Febucci.UI.Actions.WaitAnyInputAction.DoAction*
        name: DoAction
        nameWithType: WaitAnyInputAction.DoAction
        qualifiedName: Febucci.UI.Actions.WaitAnyInputAction.DoAction
      VB:
      - id: Febucci.UI.Actions.WaitAnyInputAction.DoAction*
        name: DoAction
        nameWithType: WaitAnyInputAction.DoAction
        qualifiedName: Febucci.UI.Actions.WaitAnyInputAction.DoAction
    isDefinition: true
    commentId: Overload:Febucci.UI.Actions.WaitAnyInputAction.DoAction
  Febucci.UI.Actions.WaitAnyInputAction:
    name:
      CSharp:
      - id: Febucci.UI.Actions.WaitAnyInputAction
        name: WaitAnyInputAction
        nameWithType: WaitAnyInputAction
        qualifiedName: Febucci.UI.Actions.WaitAnyInputAction
      VB:
      - id: Febucci.UI.Actions.WaitAnyInputAction
        name: WaitAnyInputAction
        nameWithType: WaitAnyInputAction
        qualifiedName: Febucci.UI.Actions.WaitAnyInputAction
    isDefinition: true
    commentId: T:Febucci.UI.Actions.WaitAnyInputAction
  Febucci.UI.Actions.WaitForAction.DoAction*:
    name:
      CSharp:
      - id: Febucci.UI.Actions.WaitForAction.DoAction*
        name: DoAction
        nameWithType: WaitForAction.DoAction
        qualifiedName: Febucci.UI.Actions.WaitForAction.DoAction
      VB:
      - id: Febucci.UI.Actions.WaitForAction.DoAction*
        name: DoAction
        nameWithType: WaitForAction.DoAction
        qualifiedName: Febucci.UI.Actions.WaitForAction.DoAction
    isDefinition: true
    commentId: Overload:Febucci.UI.Actions.WaitForAction.DoAction
  Febucci.UI.Actions.WaitForAction:
    name:
      CSharp:
      - id: Febucci.UI.Actions.WaitForAction
        name: WaitForAction
        nameWithType: WaitForAction
        qualifiedName: Febucci.UI.Actions.WaitForAction
      VB:
      - id: Febucci.UI.Actions.WaitForAction
        name: WaitForAction
        nameWithType: WaitForAction
        qualifiedName: Febucci.UI.Actions.WaitForAction
    isDefinition: true
    commentId: T:Febucci.UI.Actions.WaitForAction
  Febucci.UI.Actions.ActionScriptableBase.TagID*:
    name:
      CSharp:
      - id: Febucci.UI.Actions.ActionScriptableBase.TagID*
        name: TagID
        nameWithType: ActionScriptableBase.TagID
        qualifiedName: Febucci.UI.Actions.ActionScriptableBase.TagID
      VB:
      - id: Febucci.UI.Actions.ActionScriptableBase.TagID*
        name: TagID
        nameWithType: ActionScriptableBase.TagID
        qualifiedName: Febucci.UI.Actions.ActionScriptableBase.TagID
    isDefinition: true
    commentId: Overload:Febucci.UI.Actions.ActionScriptableBase.TagID
  Febucci.UI.Actions.ActionScriptableBase.DoAction*:
    name:
      CSharp:
      - id: Febucci.UI.Actions.ActionScriptableBase.DoAction*
        name: DoAction
        nameWithType: ActionScriptableBase.DoAction
        qualifiedName: Febucci.UI.Actions.ActionScriptableBase.DoAction
      VB:
      - id: Febucci.UI.Actions.ActionScriptableBase.DoAction*
        name: DoAction
        nameWithType: ActionScriptableBase.DoAction
        qualifiedName: Febucci.UI.Actions.ActionScriptableBase.DoAction
    isDefinition: true
    commentId: Overload:Febucci.UI.Actions.ActionScriptableBase.DoAction
  Febucci.UI.Effects:
    name:
      CSharp:
      - name: Febucci.UI.Effects
        nameWithType: Febucci.UI.Effects
        qualifiedName: Febucci.UI.Effects
      VB:
      - name: Febucci.UI.Effects
        nameWithType: Febucci.UI.Effects
        qualifiedName: Febucci.UI.Effects
    isDefinition: true
    commentId: N:Febucci.UI.Effects
  Febucci.UI.Effects.AppearanceScriptableBase:
    name:
      CSharp:
      - id: Febucci.UI.Effects.AppearanceScriptableBase
        name: AppearanceScriptableBase
        nameWithType: AppearanceScriptableBase
        qualifiedName: Febucci.UI.Effects.AppearanceScriptableBase
      VB:
      - id: Febucci.UI.Effects.AppearanceScriptableBase
        name: AppearanceScriptableBase
        nameWithType: AppearanceScriptableBase
        qualifiedName: Febucci.UI.Effects.AppearanceScriptableBase
    isDefinition: true
    parent: Febucci.UI.Effects
    commentId: T:Febucci.UI.Effects.AppearanceScriptableBase
  Febucci.UI.Effects.AppearanceScriptableBase.baseDuration:
    name:
      CSharp:
      - id: Febucci.UI.Effects.AppearanceScriptableBase.baseDuration
        name: baseDuration
        nameWithType: AppearanceScriptableBase.baseDuration
        qualifiedName: Febucci.UI.Effects.AppearanceScriptableBase.baseDuration
      VB:
      - id: Febucci.UI.Effects.AppearanceScriptableBase.baseDuration
        name: baseDuration
        nameWithType: AppearanceScriptableBase.baseDuration
        qualifiedName: Febucci.UI.Effects.AppearanceScriptableBase.baseDuration
    isDefinition: true
    parent: Febucci.UI.Effects.AppearanceScriptableBase
    commentId: F:Febucci.UI.Effects.AppearanceScriptableBase.baseDuration
  Febucci.UI.Effects.AppearanceScriptableBase.duration:
    name:
      CSharp:
      - id: Febucci.UI.Effects.AppearanceScriptableBase.duration
        name: duration
        nameWithType: AppearanceScriptableBase.duration
        qualifiedName: Febucci.UI.Effects.AppearanceScriptableBase.duration
      VB:
      - id: Febucci.UI.Effects.AppearanceScriptableBase.duration
        name: duration
        nameWithType: AppearanceScriptableBase.duration
        qualifiedName: Febucci.UI.Effects.AppearanceScriptableBase.duration
    isDefinition: true
    parent: Febucci.UI.Effects.AppearanceScriptableBase
    commentId: F:Febucci.UI.Effects.AppearanceScriptableBase.duration
  Febucci.UI.Effects.AppearanceScriptableBase.GetMaxDuration:
    name:
      CSharp:
      - id: Febucci.UI.Effects.AppearanceScriptableBase.GetMaxDuration
        name: GetMaxDuration
        nameWithType: AppearanceScriptableBase.GetMaxDuration
        qualifiedName: Febucci.UI.Effects.AppearanceScriptableBase.GetMaxDuration
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Effects.AppearanceScriptableBase.GetMaxDuration
        name: GetMaxDuration
        nameWithType: AppearanceScriptableBase.GetMaxDuration
        qualifiedName: Febucci.UI.Effects.AppearanceScriptableBase.GetMaxDuration
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Febucci.UI.Effects.AppearanceScriptableBase
    commentId: M:Febucci.UI.Effects.AppearanceScriptableBase.GetMaxDuration
  Febucci.UI.Effects.AppearanceScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore):
    name:
      CSharp:
      - id: Febucci.UI.Effects.AppearanceScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
        name: CanApplyEffectTo
        nameWithType: AppearanceScriptableBase.CanApplyEffectTo
        qualifiedName: Febucci.UI.Effects.AppearanceScriptableBase.CanApplyEffectTo
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: CharacterData
        name: CharacterData
        nameWithType: CharacterData
        qualifiedName: CharacterData
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: TAnimCore
        name: TAnimCore
        nameWithType: TAnimCore
        qualifiedName: TAnimCore
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Effects.AppearanceScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
        name: CanApplyEffectTo
        nameWithType: AppearanceScriptableBase.CanApplyEffectTo
        qualifiedName: Febucci.UI.Effects.AppearanceScriptableBase.CanApplyEffectTo
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: CharacterData
        name: CharacterData
        nameWithType: CharacterData
        qualifiedName: CharacterData
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: TAnimCore
        name: TAnimCore
        nameWithType: TAnimCore
        qualifiedName: TAnimCore
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Febucci.UI.Effects.AppearanceScriptableBase
    commentId: M:Febucci.UI.Effects.AppearanceScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
  Febucci.UI.Effects.AnimationScriptableBase:
    name:
      CSharp:
      - id: Febucci.UI.Effects.AnimationScriptableBase
        name: AnimationScriptableBase
        nameWithType: AnimationScriptableBase
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase
      VB:
      - id: Febucci.UI.Effects.AnimationScriptableBase
        name: AnimationScriptableBase
        nameWithType: AnimationScriptableBase
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase
    isDefinition: true
    parent: Febucci.UI.Effects
    commentId: T:Febucci.UI.Effects.AnimationScriptableBase
  Febucci.UI.Effects.AnimationScriptableBase.TagID:
    name:
      CSharp:
      - id: Febucci.UI.Effects.AnimationScriptableBase.TagID
        name: TagID
        nameWithType: AnimationScriptableBase.TagID
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase.TagID
      VB:
      - id: Febucci.UI.Effects.AnimationScriptableBase.TagID
        name: TagID
        nameWithType: AnimationScriptableBase.TagID
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase.TagID
    isDefinition: true
    parent: Febucci.UI.Effects.AnimationScriptableBase
    commentId: P:Febucci.UI.Effects.AnimationScriptableBase.TagID
  Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce:
    name:
      CSharp:
      - id: Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
        name: InitializeOnce
        nameWithType: AnimationScriptableBase.InitializeOnce
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
        name: InitializeOnce
        nameWithType: AnimationScriptableBase.InitializeOnce
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Febucci.UI.Effects.AnimationScriptableBase
    commentId: M:Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
  Febucci.UI.Effects.AnimationScriptableBase.OnInitialize:
    name:
      CSharp:
      - id: Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
        name: OnInitialize
        nameWithType: AnimationScriptableBase.OnInitialize
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
        name: OnInitialize
        nameWithType: AnimationScriptableBase.OnInitialize
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Febucci.UI.Effects.AnimationScriptableBase
    commentId: M:Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
  Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(CharacterData@,TAnimCore):
    name:
      CSharp:
      - id: Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(CharacterData@,TAnimCore)
        name: ApplyEffectTo
        nameWithType: AnimationScriptableBase.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: CharacterData
        name: CharacterData
        nameWithType: CharacterData
        qualifiedName: CharacterData
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: TAnimCore
        name: TAnimCore
        nameWithType: TAnimCore
        qualifiedName: TAnimCore
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(CharacterData@,TAnimCore)
        name: ApplyEffectTo
        nameWithType: AnimationScriptableBase.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: CharacterData
        name: CharacterData
        nameWithType: CharacterData
        qualifiedName: CharacterData
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: TAnimCore
        name: TAnimCore
        nameWithType: TAnimCore
        qualifiedName: TAnimCore
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Febucci.UI.Effects.AnimationScriptableBase
    commentId: M:Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo(CharacterData@,TAnimCore)
  TAnimCore:
    name:
      CSharp:
      - id: TAnimCore
        name: TAnimCore
        nameWithType: TAnimCore
        qualifiedName: TAnimCore
        isExternal: true
      VB:
      - id: TAnimCore
        name: TAnimCore
        nameWithType: TAnimCore
        qualifiedName: TAnimCore
        isExternal: true
    isDefinition: true
  Febucci.UI.Effects.AppearanceScriptableBase.ResetContext(TAnimCore):
    name:
      CSharp:
      - id: Febucci.UI.Effects.AppearanceScriptableBase.ResetContext(TAnimCore)
        name: ResetContext
        nameWithType: AppearanceScriptableBase.ResetContext
        qualifiedName: Febucci.UI.Effects.AppearanceScriptableBase.ResetContext
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: TAnimCore
        name: TAnimCore
        nameWithType: TAnimCore
        qualifiedName: TAnimCore
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Effects.AppearanceScriptableBase.ResetContext(TAnimCore)
        name: ResetContext
        nameWithType: AppearanceScriptableBase.ResetContext
        qualifiedName: Febucci.UI.Effects.AppearanceScriptableBase.ResetContext
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: TAnimCore
        name: TAnimCore
        nameWithType: TAnimCore
        qualifiedName: TAnimCore
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Febucci.UI.Effects.AppearanceScriptableBase
    commentId: M:Febucci.UI.Effects.AppearanceScriptableBase.ResetContext(TAnimCore)
  Febucci.UI.Effects.DiagonalExpandAppearance.ResetContext*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.DiagonalExpandAppearance.ResetContext*
        name: ResetContext
        nameWithType: DiagonalExpandAppearance.ResetContext
        qualifiedName: Febucci.UI.Effects.DiagonalExpandAppearance.ResetContext
      VB:
      - id: Febucci.UI.Effects.DiagonalExpandAppearance.ResetContext*
        name: ResetContext
        nameWithType: DiagonalExpandAppearance.ResetContext
        qualifiedName: Febucci.UI.Effects.DiagonalExpandAppearance.ResetContext
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.DiagonalExpandAppearance.ResetContext
  Febucci.UI.Effects.DiagonalExpandAppearance.ApplyEffectTo*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.DiagonalExpandAppearance.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: DiagonalExpandAppearance.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.DiagonalExpandAppearance.ApplyEffectTo
      VB:
      - id: Febucci.UI.Effects.DiagonalExpandAppearance.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: DiagonalExpandAppearance.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.DiagonalExpandAppearance.ApplyEffectTo
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.DiagonalExpandAppearance.ApplyEffectTo
  Febucci.UI.Effects.AppearanceScriptableBase.SetModifier(Febucci.UI.ModifierInfo):
    name:
      CSharp:
      - id: Febucci.UI.Effects.AppearanceScriptableBase.SetModifier(Febucci.UI.ModifierInfo)
        name: SetModifier
        nameWithType: AppearanceScriptableBase.SetModifier
        qualifiedName: Febucci.UI.Effects.AppearanceScriptableBase.SetModifier
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Febucci.UI.ModifierInfo
        name: ModifierInfo
        nameWithType: ModifierInfo
        qualifiedName: Febucci.UI.ModifierInfo
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Effects.AppearanceScriptableBase.SetModifier(Febucci.UI.ModifierInfo)
        name: SetModifier
        nameWithType: AppearanceScriptableBase.SetModifier
        qualifiedName: Febucci.UI.Effects.AppearanceScriptableBase.SetModifier
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Febucci.UI.ModifierInfo
        name: ModifierInfo
        nameWithType: ModifierInfo
        qualifiedName: Febucci.UI.ModifierInfo
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Febucci.UI.Effects.AppearanceScriptableBase
    commentId: M:Febucci.UI.Effects.AppearanceScriptableBase.SetModifier(Febucci.UI.ModifierInfo)
  Febucci.UI.Effects.DiagonalExpandAppearance.SetModifier*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.DiagonalExpandAppearance.SetModifier*
        name: SetModifier
        nameWithType: DiagonalExpandAppearance.SetModifier
        qualifiedName: Febucci.UI.Effects.DiagonalExpandAppearance.SetModifier
      VB:
      - id: Febucci.UI.Effects.DiagonalExpandAppearance.SetModifier*
        name: SetModifier
        nameWithType: DiagonalExpandAppearance.SetModifier
        qualifiedName: Febucci.UI.Effects.DiagonalExpandAppearance.SetModifier
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.DiagonalExpandAppearance.SetModifier
  Febucci.UI.Effects.DiagonalExpandAppearance:
    name:
      CSharp:
      - id: Febucci.UI.Effects.DiagonalExpandAppearance
        name: DiagonalExpandAppearance
        nameWithType: DiagonalExpandAppearance
        qualifiedName: Febucci.UI.Effects.DiagonalExpandAppearance
      VB:
      - id: Febucci.UI.Effects.DiagonalExpandAppearance
        name: DiagonalExpandAppearance
        nameWithType: DiagonalExpandAppearance
        qualifiedName: Febucci.UI.Effects.DiagonalExpandAppearance
    isDefinition: true
    commentId: T:Febucci.UI.Effects.DiagonalExpandAppearance
  Febucci.UI.Effects.FadeAppearance.ApplyEffectTo*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.FadeAppearance.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: FadeAppearance.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.FadeAppearance.ApplyEffectTo
      VB:
      - id: Febucci.UI.Effects.FadeAppearance.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: FadeAppearance.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.FadeAppearance.ApplyEffectTo
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.FadeAppearance.ApplyEffectTo
  Febucci.UI.Effects.FadeAppearance:
    name:
      CSharp:
      - id: Febucci.UI.Effects.FadeAppearance
        name: FadeAppearance
        nameWithType: FadeAppearance
        qualifiedName: Febucci.UI.Effects.FadeAppearance
      VB:
      - id: Febucci.UI.Effects.FadeAppearance
        name: FadeAppearance
        nameWithType: FadeAppearance
        qualifiedName: Febucci.UI.Effects.FadeAppearance
    isDefinition: true
    commentId: T:Febucci.UI.Effects.FadeAppearance
  Febucci.UI.Effects.HorizontalExpandAppearance.ExpType:
    name:
      CSharp:
      - id: Febucci.UI.Effects.HorizontalExpandAppearance.ExpType
        name: HorizontalExpandAppearance.ExpType
        nameWithType: HorizontalExpandAppearance.ExpType
        qualifiedName: Febucci.UI.Effects.HorizontalExpandAppearance.ExpType
      VB:
      - id: Febucci.UI.Effects.HorizontalExpandAppearance.ExpType
        name: HorizontalExpandAppearance.ExpType
        nameWithType: HorizontalExpandAppearance.ExpType
        qualifiedName: Febucci.UI.Effects.HorizontalExpandAppearance.ExpType
    isDefinition: true
    parent: Febucci.UI.Effects
    commentId: T:Febucci.UI.Effects.HorizontalExpandAppearance.ExpType
  Febucci.UI.Effects.HorizontalExpandAppearance.ResetContext*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.HorizontalExpandAppearance.ResetContext*
        name: ResetContext
        nameWithType: HorizontalExpandAppearance.ResetContext
        qualifiedName: Febucci.UI.Effects.HorizontalExpandAppearance.ResetContext
      VB:
      - id: Febucci.UI.Effects.HorizontalExpandAppearance.ResetContext*
        name: ResetContext
        nameWithType: HorizontalExpandAppearance.ResetContext
        qualifiedName: Febucci.UI.Effects.HorizontalExpandAppearance.ResetContext
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.HorizontalExpandAppearance.ResetContext
  Febucci.UI.Effects.HorizontalExpandAppearance.ApplyEffectTo*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.HorizontalExpandAppearance.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: HorizontalExpandAppearance.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.HorizontalExpandAppearance.ApplyEffectTo
      VB:
      - id: Febucci.UI.Effects.HorizontalExpandAppearance.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: HorizontalExpandAppearance.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.HorizontalExpandAppearance.ApplyEffectTo
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.HorizontalExpandAppearance.ApplyEffectTo
  Febucci.UI.Effects.HorizontalExpandAppearance.SetModifier*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.HorizontalExpandAppearance.SetModifier*
        name: SetModifier
        nameWithType: HorizontalExpandAppearance.SetModifier
        qualifiedName: Febucci.UI.Effects.HorizontalExpandAppearance.SetModifier
      VB:
      - id: Febucci.UI.Effects.HorizontalExpandAppearance.SetModifier*
        name: SetModifier
        nameWithType: HorizontalExpandAppearance.SetModifier
        qualifiedName: Febucci.UI.Effects.HorizontalExpandAppearance.SetModifier
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.HorizontalExpandAppearance.SetModifier
  Febucci.UI.Effects.HorizontalExpandAppearance:
    name:
      CSharp:
      - id: Febucci.UI.Effects.HorizontalExpandAppearance
        name: HorizontalExpandAppearance
        nameWithType: HorizontalExpandAppearance
        qualifiedName: Febucci.UI.Effects.HorizontalExpandAppearance
      VB:
      - id: Febucci.UI.Effects.HorizontalExpandAppearance
        name: HorizontalExpandAppearance
        nameWithType: HorizontalExpandAppearance
        qualifiedName: Febucci.UI.Effects.HorizontalExpandAppearance
    isDefinition: true
    commentId: T:Febucci.UI.Effects.HorizontalExpandAppearance
  Febucci.UI.Effects.OffsetAppearance.ResetContext*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.OffsetAppearance.ResetContext*
        name: ResetContext
        nameWithType: OffsetAppearance.ResetContext
        qualifiedName: Febucci.UI.Effects.OffsetAppearance.ResetContext
      VB:
      - id: Febucci.UI.Effects.OffsetAppearance.ResetContext*
        name: ResetContext
        nameWithType: OffsetAppearance.ResetContext
        qualifiedName: Febucci.UI.Effects.OffsetAppearance.ResetContext
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.OffsetAppearance.ResetContext
  Febucci.UI.Effects.OffsetAppearance.ApplyEffectTo*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.OffsetAppearance.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: OffsetAppearance.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.OffsetAppearance.ApplyEffectTo
      VB:
      - id: Febucci.UI.Effects.OffsetAppearance.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: OffsetAppearance.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.OffsetAppearance.ApplyEffectTo
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.OffsetAppearance.ApplyEffectTo
  Febucci.UI.Effects.OffsetAppearance.SetModifier*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.OffsetAppearance.SetModifier*
        name: SetModifier
        nameWithType: OffsetAppearance.SetModifier
        qualifiedName: Febucci.UI.Effects.OffsetAppearance.SetModifier
      VB:
      - id: Febucci.UI.Effects.OffsetAppearance.SetModifier*
        name: SetModifier
        nameWithType: OffsetAppearance.SetModifier
        qualifiedName: Febucci.UI.Effects.OffsetAppearance.SetModifier
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.OffsetAppearance.SetModifier
  Febucci.UI.Effects.OffsetAppearance:
    name:
      CSharp:
      - id: Febucci.UI.Effects.OffsetAppearance
        name: OffsetAppearance
        nameWithType: OffsetAppearance
        qualifiedName: Febucci.UI.Effects.OffsetAppearance
      VB:
      - id: Febucci.UI.Effects.OffsetAppearance
        name: OffsetAppearance
        nameWithType: OffsetAppearance
        qualifiedName: Febucci.UI.Effects.OffsetAppearance
    isDefinition: true
    commentId: T:Febucci.UI.Effects.OffsetAppearance
  Febucci.UI.Effects.RandomDirectionAppearance.ResetContext*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.RandomDirectionAppearance.ResetContext*
        name: ResetContext
        nameWithType: RandomDirectionAppearance.ResetContext
        qualifiedName: Febucci.UI.Effects.RandomDirectionAppearance.ResetContext
      VB:
      - id: Febucci.UI.Effects.RandomDirectionAppearance.ResetContext*
        name: ResetContext
        nameWithType: RandomDirectionAppearance.ResetContext
        qualifiedName: Febucci.UI.Effects.RandomDirectionAppearance.ResetContext
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.RandomDirectionAppearance.ResetContext
  Febucci.UI.Effects.RandomDirectionAppearance.OnInitialize*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.RandomDirectionAppearance.OnInitialize*
        name: OnInitialize
        nameWithType: RandomDirectionAppearance.OnInitialize
        qualifiedName: Febucci.UI.Effects.RandomDirectionAppearance.OnInitialize
      VB:
      - id: Febucci.UI.Effects.RandomDirectionAppearance.OnInitialize*
        name: OnInitialize
        nameWithType: RandomDirectionAppearance.OnInitialize
        qualifiedName: Febucci.UI.Effects.RandomDirectionAppearance.OnInitialize
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.RandomDirectionAppearance.OnInitialize
  Febucci.UI.Effects.RandomDirectionAppearance.ApplyEffectTo*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.RandomDirectionAppearance.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: RandomDirectionAppearance.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.RandomDirectionAppearance.ApplyEffectTo
      VB:
      - id: Febucci.UI.Effects.RandomDirectionAppearance.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: RandomDirectionAppearance.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.RandomDirectionAppearance.ApplyEffectTo
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.RandomDirectionAppearance.ApplyEffectTo
  Febucci.UI.Effects.RandomDirectionAppearance.SetModifier*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.RandomDirectionAppearance.SetModifier*
        name: SetModifier
        nameWithType: RandomDirectionAppearance.SetModifier
        qualifiedName: Febucci.UI.Effects.RandomDirectionAppearance.SetModifier
      VB:
      - id: Febucci.UI.Effects.RandomDirectionAppearance.SetModifier*
        name: SetModifier
        nameWithType: RandomDirectionAppearance.SetModifier
        qualifiedName: Febucci.UI.Effects.RandomDirectionAppearance.SetModifier
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.RandomDirectionAppearance.SetModifier
  Febucci.UI.Effects.RandomDirectionAppearance:
    name:
      CSharp:
      - id: Febucci.UI.Effects.RandomDirectionAppearance
        name: RandomDirectionAppearance
        nameWithType: RandomDirectionAppearance
        qualifiedName: Febucci.UI.Effects.RandomDirectionAppearance
      VB:
      - id: Febucci.UI.Effects.RandomDirectionAppearance
        name: RandomDirectionAppearance
        nameWithType: RandomDirectionAppearance
        qualifiedName: Febucci.UI.Effects.RandomDirectionAppearance
    isDefinition: true
    commentId: T:Febucci.UI.Effects.RandomDirectionAppearance
  Febucci.UI.Effects.RotatingAppearance.ResetContext*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.RotatingAppearance.ResetContext*
        name: ResetContext
        nameWithType: RotatingAppearance.ResetContext
        qualifiedName: Febucci.UI.Effects.RotatingAppearance.ResetContext
      VB:
      - id: Febucci.UI.Effects.RotatingAppearance.ResetContext*
        name: ResetContext
        nameWithType: RotatingAppearance.ResetContext
        qualifiedName: Febucci.UI.Effects.RotatingAppearance.ResetContext
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.RotatingAppearance.ResetContext
  Febucci.UI.Effects.RotatingAppearance.ApplyEffectTo*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.RotatingAppearance.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: RotatingAppearance.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.RotatingAppearance.ApplyEffectTo
      VB:
      - id: Febucci.UI.Effects.RotatingAppearance.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: RotatingAppearance.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.RotatingAppearance.ApplyEffectTo
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.RotatingAppearance.ApplyEffectTo
  Febucci.UI.Effects.RotatingAppearance.SetModifier*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.RotatingAppearance.SetModifier*
        name: SetModifier
        nameWithType: RotatingAppearance.SetModifier
        qualifiedName: Febucci.UI.Effects.RotatingAppearance.SetModifier
      VB:
      - id: Febucci.UI.Effects.RotatingAppearance.SetModifier*
        name: SetModifier
        nameWithType: RotatingAppearance.SetModifier
        qualifiedName: Febucci.UI.Effects.RotatingAppearance.SetModifier
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.RotatingAppearance.SetModifier
  Febucci.UI.Effects.RotatingAppearance:
    name:
      CSharp:
      - id: Febucci.UI.Effects.RotatingAppearance
        name: RotatingAppearance
        nameWithType: RotatingAppearance
        qualifiedName: Febucci.UI.Effects.RotatingAppearance
      VB:
      - id: Febucci.UI.Effects.RotatingAppearance
        name: RotatingAppearance
        nameWithType: RotatingAppearance
        qualifiedName: Febucci.UI.Effects.RotatingAppearance
    isDefinition: true
    commentId: T:Febucci.UI.Effects.RotatingAppearance
  Febucci.UI.Effects.SizeAppearance.ResetContext*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.SizeAppearance.ResetContext*
        name: ResetContext
        nameWithType: SizeAppearance.ResetContext
        qualifiedName: Febucci.UI.Effects.SizeAppearance.ResetContext
      VB:
      - id: Febucci.UI.Effects.SizeAppearance.ResetContext*
        name: ResetContext
        nameWithType: SizeAppearance.ResetContext
        qualifiedName: Febucci.UI.Effects.SizeAppearance.ResetContext
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.SizeAppearance.ResetContext
  Febucci.UI.Effects.SizeAppearance.ApplyEffectTo*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.SizeAppearance.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: SizeAppearance.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.SizeAppearance.ApplyEffectTo
      VB:
      - id: Febucci.UI.Effects.SizeAppearance.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: SizeAppearance.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.SizeAppearance.ApplyEffectTo
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.SizeAppearance.ApplyEffectTo
  Febucci.UI.Effects.SizeAppearance.SetModifier*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.SizeAppearance.SetModifier*
        name: SetModifier
        nameWithType: SizeAppearance.SetModifier
        qualifiedName: Febucci.UI.Effects.SizeAppearance.SetModifier
      VB:
      - id: Febucci.UI.Effects.SizeAppearance.SetModifier*
        name: SetModifier
        nameWithType: SizeAppearance.SetModifier
        qualifiedName: Febucci.UI.Effects.SizeAppearance.SetModifier
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.SizeAppearance.SetModifier
  Febucci.UI.Effects.SizeAppearance:
    name:
      CSharp:
      - id: Febucci.UI.Effects.SizeAppearance
        name: SizeAppearance
        nameWithType: SizeAppearance
        qualifiedName: Febucci.UI.Effects.SizeAppearance
      VB:
      - id: Febucci.UI.Effects.SizeAppearance
        name: SizeAppearance
        nameWithType: SizeAppearance
        qualifiedName: Febucci.UI.Effects.SizeAppearance
    isDefinition: true
    commentId: T:Febucci.UI.Effects.SizeAppearance
  Febucci.UI.Effects.VerticalExpandAppearance.ResetContext*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.VerticalExpandAppearance.ResetContext*
        name: ResetContext
        nameWithType: VerticalExpandAppearance.ResetContext
        qualifiedName: Febucci.UI.Effects.VerticalExpandAppearance.ResetContext
      VB:
      - id: Febucci.UI.Effects.VerticalExpandAppearance.ResetContext*
        name: ResetContext
        nameWithType: VerticalExpandAppearance.ResetContext
        qualifiedName: Febucci.UI.Effects.VerticalExpandAppearance.ResetContext
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.VerticalExpandAppearance.ResetContext
  Febucci.UI.Effects.VerticalExpandAppearance.ApplyEffectTo*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.VerticalExpandAppearance.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: VerticalExpandAppearance.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.VerticalExpandAppearance.ApplyEffectTo
      VB:
      - id: Febucci.UI.Effects.VerticalExpandAppearance.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: VerticalExpandAppearance.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.VerticalExpandAppearance.ApplyEffectTo
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.VerticalExpandAppearance.ApplyEffectTo
  Febucci.UI.Effects.VerticalExpandAppearance.SetModifier*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.VerticalExpandAppearance.SetModifier*
        name: SetModifier
        nameWithType: VerticalExpandAppearance.SetModifier
        qualifiedName: Febucci.UI.Effects.VerticalExpandAppearance.SetModifier
      VB:
      - id: Febucci.UI.Effects.VerticalExpandAppearance.SetModifier*
        name: SetModifier
        nameWithType: VerticalExpandAppearance.SetModifier
        qualifiedName: Febucci.UI.Effects.VerticalExpandAppearance.SetModifier
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.VerticalExpandAppearance.SetModifier
  Febucci.UI.Effects.VerticalExpandAppearance:
    name:
      CSharp:
      - id: Febucci.UI.Effects.VerticalExpandAppearance
        name: VerticalExpandAppearance
        nameWithType: VerticalExpandAppearance
        qualifiedName: Febucci.UI.Effects.VerticalExpandAppearance
      VB:
      - id: Febucci.UI.Effects.VerticalExpandAppearance
        name: VerticalExpandAppearance
        nameWithType: VerticalExpandAppearance
        qualifiedName: Febucci.UI.Effects.VerticalExpandAppearance
    isDefinition: true
    commentId: T:Febucci.UI.Effects.VerticalExpandAppearance
  Febucci.UI.Effects.AnimationScriptableBase.ResetContext(TAnimCore):
    name:
      CSharp:
      - id: Febucci.UI.Effects.AnimationScriptableBase.ResetContext(TAnimCore)
        name: ResetContext
        nameWithType: AnimationScriptableBase.ResetContext
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase.ResetContext
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: TAnimCore
        name: TAnimCore
        nameWithType: TAnimCore
        qualifiedName: TAnimCore
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Effects.AnimationScriptableBase.ResetContext(TAnimCore)
        name: ResetContext
        nameWithType: AnimationScriptableBase.ResetContext
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase.ResetContext
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: TAnimCore
        name: TAnimCore
        nameWithType: TAnimCore
        qualifiedName: TAnimCore
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Febucci.UI.Effects.AnimationScriptableBase
    commentId: M:Febucci.UI.Effects.AnimationScriptableBase.ResetContext(TAnimCore)
  Febucci.UI.Effects.AppearanceScriptableBase.ResetContext*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.AppearanceScriptableBase.ResetContext*
        name: ResetContext
        nameWithType: AppearanceScriptableBase.ResetContext
        qualifiedName: Febucci.UI.Effects.AppearanceScriptableBase.ResetContext
      VB:
      - id: Febucci.UI.Effects.AppearanceScriptableBase.ResetContext*
        name: ResetContext
        nameWithType: AppearanceScriptableBase.ResetContext
        qualifiedName: Febucci.UI.Effects.AppearanceScriptableBase.ResetContext
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.AppearanceScriptableBase.ResetContext
  Febucci.UI.Effects.AnimationScriptableBase.GetMaxDuration:
    name:
      CSharp:
      - id: Febucci.UI.Effects.AnimationScriptableBase.GetMaxDuration
        name: GetMaxDuration
        nameWithType: AnimationScriptableBase.GetMaxDuration
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase.GetMaxDuration
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Effects.AnimationScriptableBase.GetMaxDuration
        name: GetMaxDuration
        nameWithType: AnimationScriptableBase.GetMaxDuration
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase.GetMaxDuration
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Febucci.UI.Effects.AnimationScriptableBase
    commentId: M:Febucci.UI.Effects.AnimationScriptableBase.GetMaxDuration
  Febucci.UI.Effects.AppearanceScriptableBase.GetMaxDuration*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.AppearanceScriptableBase.GetMaxDuration*
        name: GetMaxDuration
        nameWithType: AppearanceScriptableBase.GetMaxDuration
        qualifiedName: Febucci.UI.Effects.AppearanceScriptableBase.GetMaxDuration
      VB:
      - id: Febucci.UI.Effects.AppearanceScriptableBase.GetMaxDuration*
        name: GetMaxDuration
        nameWithType: AppearanceScriptableBase.GetMaxDuration
        qualifiedName: Febucci.UI.Effects.AppearanceScriptableBase.GetMaxDuration
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.AppearanceScriptableBase.GetMaxDuration
  Febucci.UI.Effects.AnimationScriptableBase.SetModifier(Febucci.UI.ModifierInfo):
    name:
      CSharp:
      - id: Febucci.UI.Effects.AnimationScriptableBase.SetModifier(Febucci.UI.ModifierInfo)
        name: SetModifier
        nameWithType: AnimationScriptableBase.SetModifier
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase.SetModifier
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Febucci.UI.ModifierInfo
        name: ModifierInfo
        nameWithType: ModifierInfo
        qualifiedName: Febucci.UI.ModifierInfo
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Effects.AnimationScriptableBase.SetModifier(Febucci.UI.ModifierInfo)
        name: SetModifier
        nameWithType: AnimationScriptableBase.SetModifier
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase.SetModifier
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Febucci.UI.ModifierInfo
        name: ModifierInfo
        nameWithType: ModifierInfo
        qualifiedName: Febucci.UI.ModifierInfo
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Febucci.UI.Effects.AnimationScriptableBase
    commentId: M:Febucci.UI.Effects.AnimationScriptableBase.SetModifier(Febucci.UI.ModifierInfo)
  Febucci.UI.Effects.AppearanceScriptableBase.SetModifier*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.AppearanceScriptableBase.SetModifier*
        name: SetModifier
        nameWithType: AppearanceScriptableBase.SetModifier
        qualifiedName: Febucci.UI.Effects.AppearanceScriptableBase.SetModifier
      VB:
      - id: Febucci.UI.Effects.AppearanceScriptableBase.SetModifier*
        name: SetModifier
        nameWithType: AppearanceScriptableBase.SetModifier
        qualifiedName: Febucci.UI.Effects.AppearanceScriptableBase.SetModifier
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.AppearanceScriptableBase.SetModifier
  CharacterData:
    name:
      CSharp:
      - id: CharacterData
        name: CharacterData
        nameWithType: CharacterData
        qualifiedName: CharacterData
        isExternal: true
      VB:
      - id: CharacterData
        name: CharacterData
        nameWithType: CharacterData
        qualifiedName: CharacterData
        isExternal: true
    isDefinition: true
  Febucci.UI.Effects.AnimationScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore):
    name:
      CSharp:
      - id: Febucci.UI.Effects.AnimationScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
        name: CanApplyEffectTo
        nameWithType: AnimationScriptableBase.CanApplyEffectTo
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase.CanApplyEffectTo
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: CharacterData
        name: CharacterData
        nameWithType: CharacterData
        qualifiedName: CharacterData
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: TAnimCore
        name: TAnimCore
        nameWithType: TAnimCore
        qualifiedName: TAnimCore
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Effects.AnimationScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
        name: CanApplyEffectTo
        nameWithType: AnimationScriptableBase.CanApplyEffectTo
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase.CanApplyEffectTo
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: CharacterData
        name: CharacterData
        nameWithType: CharacterData
        qualifiedName: CharacterData
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: TAnimCore
        name: TAnimCore
        nameWithType: TAnimCore
        qualifiedName: TAnimCore
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Febucci.UI.Effects.AnimationScriptableBase
    commentId: M:Febucci.UI.Effects.AnimationScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
  Febucci.UI.Effects.AppearanceScriptableBase.CanApplyEffectTo*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.AppearanceScriptableBase.CanApplyEffectTo*
        name: CanApplyEffectTo
        nameWithType: AppearanceScriptableBase.CanApplyEffectTo
        qualifiedName: Febucci.UI.Effects.AppearanceScriptableBase.CanApplyEffectTo
      VB:
      - id: Febucci.UI.Effects.AppearanceScriptableBase.CanApplyEffectTo*
        name: CanApplyEffectTo
        nameWithType: AppearanceScriptableBase.CanApplyEffectTo
        qualifiedName: Febucci.UI.Effects.AppearanceScriptableBase.CanApplyEffectTo
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.AppearanceScriptableBase.CanApplyEffectTo
  Febucci.UI.Effects.BehaviorScriptableSine:
    name:
      CSharp:
      - id: Febucci.UI.Effects.BehaviorScriptableSine
        name: BehaviorScriptableSine
        nameWithType: BehaviorScriptableSine
        qualifiedName: Febucci.UI.Effects.BehaviorScriptableSine
      VB:
      - id: Febucci.UI.Effects.BehaviorScriptableSine
        name: BehaviorScriptableSine
        nameWithType: BehaviorScriptableSine
        qualifiedName: Febucci.UI.Effects.BehaviorScriptableSine
    isDefinition: true
    parent: Febucci.UI.Effects
    commentId: T:Febucci.UI.Effects.BehaviorScriptableSine
  Febucci.UI.Effects.BehaviorScriptableSine.baseAmplitude:
    name:
      CSharp:
      - id: Febucci.UI.Effects.BehaviorScriptableSine.baseAmplitude
        name: baseAmplitude
        nameWithType: BehaviorScriptableSine.baseAmplitude
        qualifiedName: Febucci.UI.Effects.BehaviorScriptableSine.baseAmplitude
      VB:
      - id: Febucci.UI.Effects.BehaviorScriptableSine.baseAmplitude
        name: baseAmplitude
        nameWithType: BehaviorScriptableSine.baseAmplitude
        qualifiedName: Febucci.UI.Effects.BehaviorScriptableSine.baseAmplitude
    isDefinition: true
    parent: Febucci.UI.Effects.BehaviorScriptableSine
    commentId: F:Febucci.UI.Effects.BehaviorScriptableSine.baseAmplitude
  Febucci.UI.Effects.BehaviorScriptableSine.baseFrequency:
    name:
      CSharp:
      - id: Febucci.UI.Effects.BehaviorScriptableSine.baseFrequency
        name: baseFrequency
        nameWithType: BehaviorScriptableSine.baseFrequency
        qualifiedName: Febucci.UI.Effects.BehaviorScriptableSine.baseFrequency
      VB:
      - id: Febucci.UI.Effects.BehaviorScriptableSine.baseFrequency
        name: baseFrequency
        nameWithType: BehaviorScriptableSine.baseFrequency
        qualifiedName: Febucci.UI.Effects.BehaviorScriptableSine.baseFrequency
    isDefinition: true
    parent: Febucci.UI.Effects.BehaviorScriptableSine
    commentId: F:Febucci.UI.Effects.BehaviorScriptableSine.baseFrequency
  Febucci.UI.Effects.BehaviorScriptableSine.baseWaveSize:
    name:
      CSharp:
      - id: Febucci.UI.Effects.BehaviorScriptableSine.baseWaveSize
        name: baseWaveSize
        nameWithType: BehaviorScriptableSine.baseWaveSize
        qualifiedName: Febucci.UI.Effects.BehaviorScriptableSine.baseWaveSize
      VB:
      - id: Febucci.UI.Effects.BehaviorScriptableSine.baseWaveSize
        name: baseWaveSize
        nameWithType: BehaviorScriptableSine.baseWaveSize
        qualifiedName: Febucci.UI.Effects.BehaviorScriptableSine.baseWaveSize
    isDefinition: true
    parent: Febucci.UI.Effects.BehaviorScriptableSine
    commentId: F:Febucci.UI.Effects.BehaviorScriptableSine.baseWaveSize
  Febucci.UI.Effects.BehaviorScriptableSine.amplitude:
    name:
      CSharp:
      - id: Febucci.UI.Effects.BehaviorScriptableSine.amplitude
        name: amplitude
        nameWithType: BehaviorScriptableSine.amplitude
        qualifiedName: Febucci.UI.Effects.BehaviorScriptableSine.amplitude
      VB:
      - id: Febucci.UI.Effects.BehaviorScriptableSine.amplitude
        name: amplitude
        nameWithType: BehaviorScriptableSine.amplitude
        qualifiedName: Febucci.UI.Effects.BehaviorScriptableSine.amplitude
    isDefinition: true
    parent: Febucci.UI.Effects.BehaviorScriptableSine
    commentId: F:Febucci.UI.Effects.BehaviorScriptableSine.amplitude
  Febucci.UI.Effects.BehaviorScriptableSine.frequency:
    name:
      CSharp:
      - id: Febucci.UI.Effects.BehaviorScriptableSine.frequency
        name: frequency
        nameWithType: BehaviorScriptableSine.frequency
        qualifiedName: Febucci.UI.Effects.BehaviorScriptableSine.frequency
      VB:
      - id: Febucci.UI.Effects.BehaviorScriptableSine.frequency
        name: frequency
        nameWithType: BehaviorScriptableSine.frequency
        qualifiedName: Febucci.UI.Effects.BehaviorScriptableSine.frequency
    isDefinition: true
    parent: Febucci.UI.Effects.BehaviorScriptableSine
    commentId: F:Febucci.UI.Effects.BehaviorScriptableSine.frequency
  Febucci.UI.Effects.BehaviorScriptableSine.waveSize:
    name:
      CSharp:
      - id: Febucci.UI.Effects.BehaviorScriptableSine.waveSize
        name: waveSize
        nameWithType: BehaviorScriptableSine.waveSize
        qualifiedName: Febucci.UI.Effects.BehaviorScriptableSine.waveSize
      VB:
      - id: Febucci.UI.Effects.BehaviorScriptableSine.waveSize
        name: waveSize
        nameWithType: BehaviorScriptableSine.waveSize
        qualifiedName: Febucci.UI.Effects.BehaviorScriptableSine.waveSize
    isDefinition: true
    parent: Febucci.UI.Effects.BehaviorScriptableSine
    commentId: F:Febucci.UI.Effects.BehaviorScriptableSine.waveSize
  Febucci.UI.Effects.BehaviorScriptableSine.ResetContext(TAnimCore):
    name:
      CSharp:
      - id: Febucci.UI.Effects.BehaviorScriptableSine.ResetContext(TAnimCore)
        name: ResetContext
        nameWithType: BehaviorScriptableSine.ResetContext
        qualifiedName: Febucci.UI.Effects.BehaviorScriptableSine.ResetContext
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: TAnimCore
        name: TAnimCore
        nameWithType: TAnimCore
        qualifiedName: TAnimCore
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Effects.BehaviorScriptableSine.ResetContext(TAnimCore)
        name: ResetContext
        nameWithType: BehaviorScriptableSine.ResetContext
        qualifiedName: Febucci.UI.Effects.BehaviorScriptableSine.ResetContext
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: TAnimCore
        name: TAnimCore
        nameWithType: TAnimCore
        qualifiedName: TAnimCore
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Febucci.UI.Effects.BehaviorScriptableSine
    commentId: M:Febucci.UI.Effects.BehaviorScriptableSine.ResetContext(TAnimCore)
  Febucci.UI.Effects.BehaviorScriptableSine.SetModifier(Febucci.UI.ModifierInfo):
    name:
      CSharp:
      - id: Febucci.UI.Effects.BehaviorScriptableSine.SetModifier(Febucci.UI.ModifierInfo)
        name: SetModifier
        nameWithType: BehaviorScriptableSine.SetModifier
        qualifiedName: Febucci.UI.Effects.BehaviorScriptableSine.SetModifier
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Febucci.UI.ModifierInfo
        name: ModifierInfo
        nameWithType: ModifierInfo
        qualifiedName: Febucci.UI.ModifierInfo
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Effects.BehaviorScriptableSine.SetModifier(Febucci.UI.ModifierInfo)
        name: SetModifier
        nameWithType: BehaviorScriptableSine.SetModifier
        qualifiedName: Febucci.UI.Effects.BehaviorScriptableSine.SetModifier
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Febucci.UI.ModifierInfo
        name: ModifierInfo
        nameWithType: ModifierInfo
        qualifiedName: Febucci.UI.ModifierInfo
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Febucci.UI.Effects.BehaviorScriptableSine
    commentId: M:Febucci.UI.Effects.BehaviorScriptableSine.SetModifier(Febucci.UI.ModifierInfo)
  Febucci.UI.Effects.BehaviorScriptableBase:
    name:
      CSharp:
      - id: Febucci.UI.Effects.BehaviorScriptableBase
        name: BehaviorScriptableBase
        nameWithType: BehaviorScriptableBase
        qualifiedName: Febucci.UI.Effects.BehaviorScriptableBase
      VB:
      - id: Febucci.UI.Effects.BehaviorScriptableBase
        name: BehaviorScriptableBase
        nameWithType: BehaviorScriptableBase
        qualifiedName: Febucci.UI.Effects.BehaviorScriptableBase
    isDefinition: true
    parent: Febucci.UI.Effects
    commentId: T:Febucci.UI.Effects.BehaviorScriptableBase
  Febucci.UI.Effects.BehaviorScriptableBase.GetMaxDuration:
    name:
      CSharp:
      - id: Febucci.UI.Effects.BehaviorScriptableBase.GetMaxDuration
        name: GetMaxDuration
        nameWithType: BehaviorScriptableBase.GetMaxDuration
        qualifiedName: Febucci.UI.Effects.BehaviorScriptableBase.GetMaxDuration
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Effects.BehaviorScriptableBase.GetMaxDuration
        name: GetMaxDuration
        nameWithType: BehaviorScriptableBase.GetMaxDuration
        qualifiedName: Febucci.UI.Effects.BehaviorScriptableBase.GetMaxDuration
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Febucci.UI.Effects.BehaviorScriptableBase
    commentId: M:Febucci.UI.Effects.BehaviorScriptableBase.GetMaxDuration
  Febucci.UI.Effects.BehaviorScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore):
    name:
      CSharp:
      - id: Febucci.UI.Effects.BehaviorScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
        name: CanApplyEffectTo
        nameWithType: BehaviorScriptableBase.CanApplyEffectTo
        qualifiedName: Febucci.UI.Effects.BehaviorScriptableBase.CanApplyEffectTo
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: CharacterData
        name: CharacterData
        nameWithType: CharacterData
        qualifiedName: CharacterData
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: TAnimCore
        name: TAnimCore
        nameWithType: TAnimCore
        qualifiedName: TAnimCore
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Febucci.UI.Effects.BehaviorScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
        name: CanApplyEffectTo
        nameWithType: BehaviorScriptableBase.CanApplyEffectTo
        qualifiedName: Febucci.UI.Effects.BehaviorScriptableBase.CanApplyEffectTo
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: CharacterData
        name: CharacterData
        nameWithType: CharacterData
        qualifiedName: CharacterData
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: TAnimCore
        name: TAnimCore
        nameWithType: TAnimCore
        qualifiedName: TAnimCore
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Febucci.UI.Effects.BehaviorScriptableBase
    commentId: M:Febucci.UI.Effects.BehaviorScriptableBase.CanApplyEffectTo(CharacterData,TAnimCore)
  Febucci.UI.Effects.BounceBehavior.ApplyEffectTo*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.BounceBehavior.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: BounceBehavior.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.BounceBehavior.ApplyEffectTo
      VB:
      - id: Febucci.UI.Effects.BounceBehavior.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: BounceBehavior.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.BounceBehavior.ApplyEffectTo
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.BounceBehavior.ApplyEffectTo
  Febucci.UI.Effects.BounceBehavior:
    name:
      CSharp:
      - id: Febucci.UI.Effects.BounceBehavior
        name: BounceBehavior
        nameWithType: BounceBehavior
        qualifiedName: Febucci.UI.Effects.BounceBehavior
      VB:
      - id: Febucci.UI.Effects.BounceBehavior
        name: BounceBehavior
        nameWithType: BounceBehavior
        qualifiedName: Febucci.UI.Effects.BounceBehavior
    isDefinition: true
    commentId: T:Febucci.UI.Effects.BounceBehavior
  Febucci.UI.Effects.DangleBehavior.ResetContext*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.DangleBehavior.ResetContext*
        name: ResetContext
        nameWithType: DangleBehavior.ResetContext
        qualifiedName: Febucci.UI.Effects.DangleBehavior.ResetContext
      VB:
      - id: Febucci.UI.Effects.DangleBehavior.ResetContext*
        name: ResetContext
        nameWithType: DangleBehavior.ResetContext
        qualifiedName: Febucci.UI.Effects.DangleBehavior.ResetContext
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.DangleBehavior.ResetContext
  Febucci.UI.Effects.DangleBehavior.ApplyEffectTo*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.DangleBehavior.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: DangleBehavior.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.DangleBehavior.ApplyEffectTo
      VB:
      - id: Febucci.UI.Effects.DangleBehavior.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: DangleBehavior.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.DangleBehavior.ApplyEffectTo
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.DangleBehavior.ApplyEffectTo
  Febucci.UI.Effects.DangleBehavior:
    name:
      CSharp:
      - id: Febucci.UI.Effects.DangleBehavior
        name: DangleBehavior
        nameWithType: DangleBehavior
        qualifiedName: Febucci.UI.Effects.DangleBehavior
      VB:
      - id: Febucci.UI.Effects.DangleBehavior
        name: DangleBehavior
        nameWithType: DangleBehavior
        qualifiedName: Febucci.UI.Effects.DangleBehavior
    isDefinition: true
    commentId: T:Febucci.UI.Effects.DangleBehavior
  Febucci.UI.Effects.FadeBehavior.ResetContext*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.FadeBehavior.ResetContext*
        name: ResetContext
        nameWithType: FadeBehavior.ResetContext
        qualifiedName: Febucci.UI.Effects.FadeBehavior.ResetContext
      VB:
      - id: Febucci.UI.Effects.FadeBehavior.ResetContext*
        name: ResetContext
        nameWithType: FadeBehavior.ResetContext
        qualifiedName: Febucci.UI.Effects.FadeBehavior.ResetContext
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.FadeBehavior.ResetContext
  Febucci.UI.Effects.FadeBehavior.SetModifier*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.FadeBehavior.SetModifier*
        name: SetModifier
        nameWithType: FadeBehavior.SetModifier
        qualifiedName: Febucci.UI.Effects.FadeBehavior.SetModifier
      VB:
      - id: Febucci.UI.Effects.FadeBehavior.SetModifier*
        name: SetModifier
        nameWithType: FadeBehavior.SetModifier
        qualifiedName: Febucci.UI.Effects.FadeBehavior.SetModifier
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.FadeBehavior.SetModifier
  Febucci.UI.Effects.FadeBehavior.ApplyEffectTo*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.FadeBehavior.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: FadeBehavior.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.FadeBehavior.ApplyEffectTo
      VB:
      - id: Febucci.UI.Effects.FadeBehavior.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: FadeBehavior.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.FadeBehavior.ApplyEffectTo
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.FadeBehavior.ApplyEffectTo
  Febucci.UI.Effects.FadeBehavior:
    name:
      CSharp:
      - id: Febucci.UI.Effects.FadeBehavior
        name: FadeBehavior
        nameWithType: FadeBehavior
        qualifiedName: Febucci.UI.Effects.FadeBehavior
      VB:
      - id: Febucci.UI.Effects.FadeBehavior
        name: FadeBehavior
        nameWithType: FadeBehavior
        qualifiedName: Febucci.UI.Effects.FadeBehavior
    isDefinition: true
    commentId: T:Febucci.UI.Effects.FadeBehavior
  Febucci.UI.Effects.PendulumBehavior.ResetContext*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.PendulumBehavior.ResetContext*
        name: ResetContext
        nameWithType: PendulumBehavior.ResetContext
        qualifiedName: Febucci.UI.Effects.PendulumBehavior.ResetContext
      VB:
      - id: Febucci.UI.Effects.PendulumBehavior.ResetContext*
        name: ResetContext
        nameWithType: PendulumBehavior.ResetContext
        qualifiedName: Febucci.UI.Effects.PendulumBehavior.ResetContext
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.PendulumBehavior.ResetContext
  Febucci.UI.Effects.PendulumBehavior.ApplyEffectTo*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.PendulumBehavior.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: PendulumBehavior.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.PendulumBehavior.ApplyEffectTo
      VB:
      - id: Febucci.UI.Effects.PendulumBehavior.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: PendulumBehavior.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.PendulumBehavior.ApplyEffectTo
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.PendulumBehavior.ApplyEffectTo
  Febucci.UI.Effects.PendulumBehavior:
    name:
      CSharp:
      - id: Febucci.UI.Effects.PendulumBehavior
        name: PendulumBehavior
        nameWithType: PendulumBehavior
        qualifiedName: Febucci.UI.Effects.PendulumBehavior
      VB:
      - id: Febucci.UI.Effects.PendulumBehavior
        name: PendulumBehavior
        nameWithType: PendulumBehavior
        qualifiedName: Febucci.UI.Effects.PendulumBehavior
    isDefinition: true
    commentId: T:Febucci.UI.Effects.PendulumBehavior
  Febucci.UI.Effects.RainbowBehavior.SetModifier*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.RainbowBehavior.SetModifier*
        name: SetModifier
        nameWithType: RainbowBehavior.SetModifier
        qualifiedName: Febucci.UI.Effects.RainbowBehavior.SetModifier
      VB:
      - id: Febucci.UI.Effects.RainbowBehavior.SetModifier*
        name: SetModifier
        nameWithType: RainbowBehavior.SetModifier
        qualifiedName: Febucci.UI.Effects.RainbowBehavior.SetModifier
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.RainbowBehavior.SetModifier
  Febucci.UI.Effects.RainbowBehavior.ResetContext*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.RainbowBehavior.ResetContext*
        name: ResetContext
        nameWithType: RainbowBehavior.ResetContext
        qualifiedName: Febucci.UI.Effects.RainbowBehavior.ResetContext
      VB:
      - id: Febucci.UI.Effects.RainbowBehavior.ResetContext*
        name: ResetContext
        nameWithType: RainbowBehavior.ResetContext
        qualifiedName: Febucci.UI.Effects.RainbowBehavior.ResetContext
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.RainbowBehavior.ResetContext
  Febucci.UI.Effects.RainbowBehavior.ApplyEffectTo*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.RainbowBehavior.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: RainbowBehavior.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.RainbowBehavior.ApplyEffectTo
      VB:
      - id: Febucci.UI.Effects.RainbowBehavior.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: RainbowBehavior.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.RainbowBehavior.ApplyEffectTo
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.RainbowBehavior.ApplyEffectTo
  Febucci.UI.Effects.RainbowBehavior:
    name:
      CSharp:
      - id: Febucci.UI.Effects.RainbowBehavior
        name: RainbowBehavior
        nameWithType: RainbowBehavior
        qualifiedName: Febucci.UI.Effects.RainbowBehavior
      VB:
      - id: Febucci.UI.Effects.RainbowBehavior
        name: RainbowBehavior
        nameWithType: RainbowBehavior
        qualifiedName: Febucci.UI.Effects.RainbowBehavior
    isDefinition: true
    commentId: T:Febucci.UI.Effects.RainbowBehavior
  Febucci.UI.Effects.RotationBehavior.SetModifier*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.RotationBehavior.SetModifier*
        name: SetModifier
        nameWithType: RotationBehavior.SetModifier
        qualifiedName: Febucci.UI.Effects.RotationBehavior.SetModifier
      VB:
      - id: Febucci.UI.Effects.RotationBehavior.SetModifier*
        name: SetModifier
        nameWithType: RotationBehavior.SetModifier
        qualifiedName: Febucci.UI.Effects.RotationBehavior.SetModifier
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.RotationBehavior.SetModifier
  Febucci.UI.Effects.RotationBehavior.ResetContext*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.RotationBehavior.ResetContext*
        name: ResetContext
        nameWithType: RotationBehavior.ResetContext
        qualifiedName: Febucci.UI.Effects.RotationBehavior.ResetContext
      VB:
      - id: Febucci.UI.Effects.RotationBehavior.ResetContext*
        name: ResetContext
        nameWithType: RotationBehavior.ResetContext
        qualifiedName: Febucci.UI.Effects.RotationBehavior.ResetContext
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.RotationBehavior.ResetContext
  Febucci.UI.Effects.RotationBehavior.ApplyEffectTo*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.RotationBehavior.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: RotationBehavior.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.RotationBehavior.ApplyEffectTo
      VB:
      - id: Febucci.UI.Effects.RotationBehavior.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: RotationBehavior.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.RotationBehavior.ApplyEffectTo
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.RotationBehavior.ApplyEffectTo
  Febucci.UI.Effects.RotationBehavior:
    name:
      CSharp:
      - id: Febucci.UI.Effects.RotationBehavior
        name: RotationBehavior
        nameWithType: RotationBehavior
        qualifiedName: Febucci.UI.Effects.RotationBehavior
      VB:
      - id: Febucci.UI.Effects.RotationBehavior
        name: RotationBehavior
        nameWithType: RotationBehavior
        qualifiedName: Febucci.UI.Effects.RotationBehavior
    isDefinition: true
    commentId: T:Febucci.UI.Effects.RotationBehavior
  Febucci.UI.Effects.ShakeBehavior.OnInitialize*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.ShakeBehavior.OnInitialize*
        name: OnInitialize
        nameWithType: ShakeBehavior.OnInitialize
        qualifiedName: Febucci.UI.Effects.ShakeBehavior.OnInitialize
      VB:
      - id: Febucci.UI.Effects.ShakeBehavior.OnInitialize*
        name: OnInitialize
        nameWithType: ShakeBehavior.OnInitialize
        qualifiedName: Febucci.UI.Effects.ShakeBehavior.OnInitialize
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.ShakeBehavior.OnInitialize
  Febucci.UI.Effects.ShakeBehavior.ResetContext*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.ShakeBehavior.ResetContext*
        name: ResetContext
        nameWithType: ShakeBehavior.ResetContext
        qualifiedName: Febucci.UI.Effects.ShakeBehavior.ResetContext
      VB:
      - id: Febucci.UI.Effects.ShakeBehavior.ResetContext*
        name: ResetContext
        nameWithType: ShakeBehavior.ResetContext
        qualifiedName: Febucci.UI.Effects.ShakeBehavior.ResetContext
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.ShakeBehavior.ResetContext
  Febucci.UI.Effects.ShakeBehavior.SetModifier*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.ShakeBehavior.SetModifier*
        name: SetModifier
        nameWithType: ShakeBehavior.SetModifier
        qualifiedName: Febucci.UI.Effects.ShakeBehavior.SetModifier
      VB:
      - id: Febucci.UI.Effects.ShakeBehavior.SetModifier*
        name: SetModifier
        nameWithType: ShakeBehavior.SetModifier
        qualifiedName: Febucci.UI.Effects.ShakeBehavior.SetModifier
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.ShakeBehavior.SetModifier
  Febucci.UI.Effects.ShakeBehavior.ApplyEffectTo*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.ShakeBehavior.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: ShakeBehavior.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.ShakeBehavior.ApplyEffectTo
      VB:
      - id: Febucci.UI.Effects.ShakeBehavior.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: ShakeBehavior.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.ShakeBehavior.ApplyEffectTo
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.ShakeBehavior.ApplyEffectTo
  Febucci.UI.Effects.ShakeBehavior:
    name:
      CSharp:
      - id: Febucci.UI.Effects.ShakeBehavior
        name: ShakeBehavior
        nameWithType: ShakeBehavior
        qualifiedName: Febucci.UI.Effects.ShakeBehavior
      VB:
      - id: Febucci.UI.Effects.ShakeBehavior
        name: ShakeBehavior
        nameWithType: ShakeBehavior
        qualifiedName: Febucci.UI.Effects.ShakeBehavior
    isDefinition: true
    commentId: T:Febucci.UI.Effects.ShakeBehavior
  Febucci.UI.Effects.SizeBehavior.ResetContext*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.SizeBehavior.ResetContext*
        name: ResetContext
        nameWithType: SizeBehavior.ResetContext
        qualifiedName: Febucci.UI.Effects.SizeBehavior.ResetContext
      VB:
      - id: Febucci.UI.Effects.SizeBehavior.ResetContext*
        name: ResetContext
        nameWithType: SizeBehavior.ResetContext
        qualifiedName: Febucci.UI.Effects.SizeBehavior.ResetContext
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.SizeBehavior.ResetContext
  Febucci.UI.Effects.SizeBehavior.SetModifier*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.SizeBehavior.SetModifier*
        name: SetModifier
        nameWithType: SizeBehavior.SetModifier
        qualifiedName: Febucci.UI.Effects.SizeBehavior.SetModifier
      VB:
      - id: Febucci.UI.Effects.SizeBehavior.SetModifier*
        name: SetModifier
        nameWithType: SizeBehavior.SetModifier
        qualifiedName: Febucci.UI.Effects.SizeBehavior.SetModifier
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.SizeBehavior.SetModifier
  Febucci.UI.Effects.SizeBehavior.ApplyEffectTo*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.SizeBehavior.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: SizeBehavior.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.SizeBehavior.ApplyEffectTo
      VB:
      - id: Febucci.UI.Effects.SizeBehavior.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: SizeBehavior.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.SizeBehavior.ApplyEffectTo
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.SizeBehavior.ApplyEffectTo
  Febucci.UI.Effects.SizeBehavior:
    name:
      CSharp:
      - id: Febucci.UI.Effects.SizeBehavior
        name: SizeBehavior
        nameWithType: SizeBehavior
        qualifiedName: Febucci.UI.Effects.SizeBehavior
      VB:
      - id: Febucci.UI.Effects.SizeBehavior
        name: SizeBehavior
        nameWithType: SizeBehavior
        qualifiedName: Febucci.UI.Effects.SizeBehavior
    isDefinition: true
    commentId: T:Febucci.UI.Effects.SizeBehavior
  Febucci.UI.Effects.SlideBehavior.ApplyEffectTo*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.SlideBehavior.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: SlideBehavior.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.SlideBehavior.ApplyEffectTo
      VB:
      - id: Febucci.UI.Effects.SlideBehavior.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: SlideBehavior.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.SlideBehavior.ApplyEffectTo
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.SlideBehavior.ApplyEffectTo
  Febucci.UI.Effects.SlideBehavior:
    name:
      CSharp:
      - id: Febucci.UI.Effects.SlideBehavior
        name: SlideBehavior
        nameWithType: SlideBehavior
        qualifiedName: Febucci.UI.Effects.SlideBehavior
      VB:
      - id: Febucci.UI.Effects.SlideBehavior
        name: SlideBehavior
        nameWithType: SlideBehavior
        qualifiedName: Febucci.UI.Effects.SlideBehavior
    isDefinition: true
    commentId: T:Febucci.UI.Effects.SlideBehavior
  Febucci.UI.Effects.SwingBehavior.ApplyEffectTo*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.SwingBehavior.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: SwingBehavior.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.SwingBehavior.ApplyEffectTo
      VB:
      - id: Febucci.UI.Effects.SwingBehavior.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: SwingBehavior.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.SwingBehavior.ApplyEffectTo
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.SwingBehavior.ApplyEffectTo
  Febucci.UI.Effects.SwingBehavior:
    name:
      CSharp:
      - id: Febucci.UI.Effects.SwingBehavior
        name: SwingBehavior
        nameWithType: SwingBehavior
        qualifiedName: Febucci.UI.Effects.SwingBehavior
      VB:
      - id: Febucci.UI.Effects.SwingBehavior
        name: SwingBehavior
        nameWithType: SwingBehavior
        qualifiedName: Febucci.UI.Effects.SwingBehavior
    isDefinition: true
    commentId: T:Febucci.UI.Effects.SwingBehavior
  Febucci.UI.Effects.WaveBehavior.ApplyEffectTo*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.WaveBehavior.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: WaveBehavior.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.WaveBehavior.ApplyEffectTo
      VB:
      - id: Febucci.UI.Effects.WaveBehavior.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: WaveBehavior.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.WaveBehavior.ApplyEffectTo
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.WaveBehavior.ApplyEffectTo
  Febucci.UI.Effects.WaveBehavior:
    name:
      CSharp:
      - id: Febucci.UI.Effects.WaveBehavior
        name: WaveBehavior
        nameWithType: WaveBehavior
        qualifiedName: Febucci.UI.Effects.WaveBehavior
      VB:
      - id: Febucci.UI.Effects.WaveBehavior
        name: WaveBehavior
        nameWithType: WaveBehavior
        qualifiedName: Febucci.UI.Effects.WaveBehavior
    isDefinition: true
    commentId: T:Febucci.UI.Effects.WaveBehavior
  Febucci.UI.Effects.WiggleBehavior.OnInitialize*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.WiggleBehavior.OnInitialize*
        name: OnInitialize
        nameWithType: WiggleBehavior.OnInitialize
        qualifiedName: Febucci.UI.Effects.WiggleBehavior.OnInitialize
      VB:
      - id: Febucci.UI.Effects.WiggleBehavior.OnInitialize*
        name: OnInitialize
        nameWithType: WiggleBehavior.OnInitialize
        qualifiedName: Febucci.UI.Effects.WiggleBehavior.OnInitialize
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.WiggleBehavior.OnInitialize
  Febucci.UI.Effects.WiggleBehavior.ApplyEffectTo*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.WiggleBehavior.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: WiggleBehavior.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.WiggleBehavior.ApplyEffectTo
      VB:
      - id: Febucci.UI.Effects.WiggleBehavior.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: WiggleBehavior.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.WiggleBehavior.ApplyEffectTo
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.WiggleBehavior.ApplyEffectTo
  Febucci.UI.Effects.WiggleBehavior:
    name:
      CSharp:
      - id: Febucci.UI.Effects.WiggleBehavior
        name: WiggleBehavior
        nameWithType: WiggleBehavior
        qualifiedName: Febucci.UI.Effects.WiggleBehavior
      VB:
      - id: Febucci.UI.Effects.WiggleBehavior
        name: WiggleBehavior
        nameWithType: WiggleBehavior
        qualifiedName: Febucci.UI.Effects.WiggleBehavior
    isDefinition: true
    commentId: T:Febucci.UI.Effects.WiggleBehavior
  Febucci.UI.Effects.BehaviorScriptableBase.GetMaxDuration*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.BehaviorScriptableBase.GetMaxDuration*
        name: GetMaxDuration
        nameWithType: BehaviorScriptableBase.GetMaxDuration
        qualifiedName: Febucci.UI.Effects.BehaviorScriptableBase.GetMaxDuration
      VB:
      - id: Febucci.UI.Effects.BehaviorScriptableBase.GetMaxDuration*
        name: GetMaxDuration
        nameWithType: BehaviorScriptableBase.GetMaxDuration
        qualifiedName: Febucci.UI.Effects.BehaviorScriptableBase.GetMaxDuration
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.BehaviorScriptableBase.GetMaxDuration
  Febucci.UI.Effects.BehaviorScriptableBase.CanApplyEffectTo*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.BehaviorScriptableBase.CanApplyEffectTo*
        name: CanApplyEffectTo
        nameWithType: BehaviorScriptableBase.CanApplyEffectTo
        qualifiedName: Febucci.UI.Effects.BehaviorScriptableBase.CanApplyEffectTo
      VB:
      - id: Febucci.UI.Effects.BehaviorScriptableBase.CanApplyEffectTo*
        name: CanApplyEffectTo
        nameWithType: BehaviorScriptableBase.CanApplyEffectTo
        qualifiedName: Febucci.UI.Effects.BehaviorScriptableBase.CanApplyEffectTo
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.BehaviorScriptableBase.CanApplyEffectTo
  Febucci.UI.Effects.BehaviorScriptableSine.ResetContext*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.BehaviorScriptableSine.ResetContext*
        name: ResetContext
        nameWithType: BehaviorScriptableSine.ResetContext
        qualifiedName: Febucci.UI.Effects.BehaviorScriptableSine.ResetContext
      VB:
      - id: Febucci.UI.Effects.BehaviorScriptableSine.ResetContext*
        name: ResetContext
        nameWithType: BehaviorScriptableSine.ResetContext
        qualifiedName: Febucci.UI.Effects.BehaviorScriptableSine.ResetContext
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.BehaviorScriptableSine.ResetContext
  Febucci.UI.Effects.BehaviorScriptableSine.SetModifier*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.BehaviorScriptableSine.SetModifier*
        name: SetModifier
        nameWithType: BehaviorScriptableSine.SetModifier
        qualifiedName: Febucci.UI.Effects.BehaviorScriptableSine.SetModifier
      VB:
      - id: Febucci.UI.Effects.BehaviorScriptableSine.SetModifier*
        name: SetModifier
        nameWithType: BehaviorScriptableSine.SetModifier
        qualifiedName: Febucci.UI.Effects.BehaviorScriptableSine.SetModifier
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.BehaviorScriptableSine.SetModifier
  Febucci.UI.Effects.AnimationScriptableBase[]:
    name:
      CSharp:
      - id: Febucci.UI.Effects.AnimationScriptableBase
        name: AnimationScriptableBase
        nameWithType: AnimationScriptableBase
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Febucci.UI.Effects.AnimationScriptableBase
        name: AnimationScriptableBase
        nameWithType: AnimationScriptableBase
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Febucci.UI.Effects.CompositeAnimation.OnInitialize*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.CompositeAnimation.OnInitialize*
        name: OnInitialize
        nameWithType: CompositeAnimation.OnInitialize
        qualifiedName: Febucci.UI.Effects.CompositeAnimation.OnInitialize
      VB:
      - id: Febucci.UI.Effects.CompositeAnimation.OnInitialize*
        name: OnInitialize
        nameWithType: CompositeAnimation.OnInitialize
        qualifiedName: Febucci.UI.Effects.CompositeAnimation.OnInitialize
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.CompositeAnimation.OnInitialize
  Febucci.UI.Effects.CompositeAnimation.ResetContext*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.CompositeAnimation.ResetContext*
        name: ResetContext
        nameWithType: CompositeAnimation.ResetContext
        qualifiedName: Febucci.UI.Effects.CompositeAnimation.ResetContext
      VB:
      - id: Febucci.UI.Effects.CompositeAnimation.ResetContext*
        name: ResetContext
        nameWithType: CompositeAnimation.ResetContext
        qualifiedName: Febucci.UI.Effects.CompositeAnimation.ResetContext
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.CompositeAnimation.ResetContext
  Febucci.UI.Effects.CompositeAnimation.SetModifier*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.CompositeAnimation.SetModifier*
        name: SetModifier
        nameWithType: CompositeAnimation.SetModifier
        qualifiedName: Febucci.UI.Effects.CompositeAnimation.SetModifier
      VB:
      - id: Febucci.UI.Effects.CompositeAnimation.SetModifier*
        name: SetModifier
        nameWithType: CompositeAnimation.SetModifier
        qualifiedName: Febucci.UI.Effects.CompositeAnimation.SetModifier
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.CompositeAnimation.SetModifier
  Febucci.UI.Effects.CompositeAnimation.ApplyEffectTo*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.CompositeAnimation.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: CompositeAnimation.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.CompositeAnimation.ApplyEffectTo
      VB:
      - id: Febucci.UI.Effects.CompositeAnimation.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: CompositeAnimation.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.CompositeAnimation.ApplyEffectTo
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.CompositeAnimation.ApplyEffectTo
  Febucci.UI.Effects.CompositeAnimation.CanApplyEffectTo*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.CompositeAnimation.CanApplyEffectTo*
        name: CanApplyEffectTo
        nameWithType: CompositeAnimation.CanApplyEffectTo
        qualifiedName: Febucci.UI.Effects.CompositeAnimation.CanApplyEffectTo
      VB:
      - id: Febucci.UI.Effects.CompositeAnimation.CanApplyEffectTo*
        name: CanApplyEffectTo
        nameWithType: CompositeAnimation.CanApplyEffectTo
        qualifiedName: Febucci.UI.Effects.CompositeAnimation.CanApplyEffectTo
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.CompositeAnimation.CanApplyEffectTo
  Febucci.UI.Effects.CompositeAnimation.GetMaxDuration*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.CompositeAnimation.GetMaxDuration*
        name: GetMaxDuration
        nameWithType: CompositeAnimation.GetMaxDuration
        qualifiedName: Febucci.UI.Effects.CompositeAnimation.GetMaxDuration
      VB:
      - id: Febucci.UI.Effects.CompositeAnimation.GetMaxDuration*
        name: GetMaxDuration
        nameWithType: CompositeAnimation.GetMaxDuration
        qualifiedName: Febucci.UI.Effects.CompositeAnimation.GetMaxDuration
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.CompositeAnimation.GetMaxDuration
  Febucci.UI.Effects.CompositeAnimation:
    name:
      CSharp:
      - id: Febucci.UI.Effects.CompositeAnimation
        name: CompositeAnimation
        nameWithType: CompositeAnimation
        qualifiedName: Febucci.UI.Effects.CompositeAnimation
      VB:
      - id: Febucci.UI.Effects.CompositeAnimation
        name: CompositeAnimation
        nameWithType: CompositeAnimation
        qualifiedName: Febucci.UI.Effects.CompositeAnimation
    isDefinition: true
    commentId: T:Febucci.UI.Effects.CompositeAnimation
  Febucci.UI.Effects.TimeMode:
    name:
      CSharp:
      - id: Febucci.UI.Effects.TimeMode
        name: TimeMode
        nameWithType: TimeMode
        qualifiedName: Febucci.UI.Effects.TimeMode
      VB:
      - id: Febucci.UI.Effects.TimeMode
        name: TimeMode
        nameWithType: TimeMode
        qualifiedName: Febucci.UI.Effects.TimeMode
    isDefinition: true
    parent: Febucci.UI.Effects
    commentId: T:Febucci.UI.Effects.TimeMode
  Febucci.UI.Effects.EmissionCurve:
    name:
      CSharp:
      - id: Febucci.UI.Effects.EmissionCurve
        name: EmissionCurve
        nameWithType: EmissionCurve
        qualifiedName: Febucci.UI.Effects.EmissionCurve
      VB:
      - id: Febucci.UI.Effects.EmissionCurve
        name: EmissionCurve
        nameWithType: EmissionCurve
        qualifiedName: Febucci.UI.Effects.EmissionCurve
    isDefinition: true
    parent: Febucci.UI.Effects
    commentId: T:Febucci.UI.Effects.EmissionCurve
  Febucci.UI.Effects.CompositeWithEmission.OnInitialize*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.CompositeWithEmission.OnInitialize*
        name: OnInitialize
        nameWithType: CompositeWithEmission.OnInitialize
        qualifiedName: Febucci.UI.Effects.CompositeWithEmission.OnInitialize
      VB:
      - id: Febucci.UI.Effects.CompositeWithEmission.OnInitialize*
        name: OnInitialize
        nameWithType: CompositeWithEmission.OnInitialize
        qualifiedName: Febucci.UI.Effects.CompositeWithEmission.OnInitialize
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.CompositeWithEmission.OnInitialize
  Febucci.UI.Effects.CompositeWithEmission.ResetContext*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.CompositeWithEmission.ResetContext*
        name: ResetContext
        nameWithType: CompositeWithEmission.ResetContext
        qualifiedName: Febucci.UI.Effects.CompositeWithEmission.ResetContext
      VB:
      - id: Febucci.UI.Effects.CompositeWithEmission.ResetContext*
        name: ResetContext
        nameWithType: CompositeWithEmission.ResetContext
        qualifiedName: Febucci.UI.Effects.CompositeWithEmission.ResetContext
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.CompositeWithEmission.ResetContext
  Febucci.UI.Effects.CompositeWithEmission.SetModifier*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.CompositeWithEmission.SetModifier*
        name: SetModifier
        nameWithType: CompositeWithEmission.SetModifier
        qualifiedName: Febucci.UI.Effects.CompositeWithEmission.SetModifier
      VB:
      - id: Febucci.UI.Effects.CompositeWithEmission.SetModifier*
        name: SetModifier
        nameWithType: CompositeWithEmission.SetModifier
        qualifiedName: Febucci.UI.Effects.CompositeWithEmission.SetModifier
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.CompositeWithEmission.SetModifier
  Febucci.UI.Effects.CompositeWithEmission.ApplyEffectTo*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.CompositeWithEmission.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: CompositeWithEmission.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.CompositeWithEmission.ApplyEffectTo
      VB:
      - id: Febucci.UI.Effects.CompositeWithEmission.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: CompositeWithEmission.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.CompositeWithEmission.ApplyEffectTo
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.CompositeWithEmission.ApplyEffectTo
  Febucci.UI.Effects.CompositeWithEmission.CanApplyEffectTo*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.CompositeWithEmission.CanApplyEffectTo*
        name: CanApplyEffectTo
        nameWithType: CompositeWithEmission.CanApplyEffectTo
        qualifiedName: Febucci.UI.Effects.CompositeWithEmission.CanApplyEffectTo
      VB:
      - id: Febucci.UI.Effects.CompositeWithEmission.CanApplyEffectTo*
        name: CanApplyEffectTo
        nameWithType: CompositeWithEmission.CanApplyEffectTo
        qualifiedName: Febucci.UI.Effects.CompositeWithEmission.CanApplyEffectTo
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.CompositeWithEmission.CanApplyEffectTo
  Febucci.UI.Effects.CompositeWithEmission.GetMaxDuration*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.CompositeWithEmission.GetMaxDuration*
        name: GetMaxDuration
        nameWithType: CompositeWithEmission.GetMaxDuration
        qualifiedName: Febucci.UI.Effects.CompositeWithEmission.GetMaxDuration
      VB:
      - id: Febucci.UI.Effects.CompositeWithEmission.GetMaxDuration*
        name: GetMaxDuration
        nameWithType: CompositeWithEmission.GetMaxDuration
        qualifiedName: Febucci.UI.Effects.CompositeWithEmission.GetMaxDuration
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.CompositeWithEmission.GetMaxDuration
  Febucci.UI.Effects.CompositeWithEmission:
    name:
      CSharp:
      - id: Febucci.UI.Effects.CompositeWithEmission
        name: CompositeWithEmission
        nameWithType: CompositeWithEmission
        qualifiedName: Febucci.UI.Effects.CompositeWithEmission
      VB:
      - id: Febucci.UI.Effects.CompositeWithEmission
        name: CompositeWithEmission
        nameWithType: CompositeWithEmission
        qualifiedName: Febucci.UI.Effects.CompositeWithEmission
    isDefinition: true
    commentId: T:Febucci.UI.Effects.CompositeWithEmission
  Febucci.UI.Effects.AnimationData:
    name:
      CSharp:
      - id: Febucci.UI.Effects.AnimationData
        name: AnimationData
        nameWithType: AnimationData
        qualifiedName: Febucci.UI.Effects.AnimationData
      VB:
      - id: Febucci.UI.Effects.AnimationData
        name: AnimationData
        nameWithType: AnimationData
        qualifiedName: Febucci.UI.Effects.AnimationData
    isDefinition: true
    parent: Febucci.UI.Effects
    commentId: T:Febucci.UI.Effects.AnimationData
  Febucci.UI.Effects.UniformCurveAnimation.ResetContext*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.UniformCurveAnimation.ResetContext*
        name: ResetContext
        nameWithType: UniformCurveAnimation.ResetContext
        qualifiedName: Febucci.UI.Effects.UniformCurveAnimation.ResetContext
      VB:
      - id: Febucci.UI.Effects.UniformCurveAnimation.ResetContext*
        name: ResetContext
        nameWithType: UniformCurveAnimation.ResetContext
        qualifiedName: Febucci.UI.Effects.UniformCurveAnimation.ResetContext
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.UniformCurveAnimation.ResetContext
  Febucci.UI.Effects.UniformCurveAnimation.SetModifier*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.UniformCurveAnimation.SetModifier*
        name: SetModifier
        nameWithType: UniformCurveAnimation.SetModifier
        qualifiedName: Febucci.UI.Effects.UniformCurveAnimation.SetModifier
      VB:
      - id: Febucci.UI.Effects.UniformCurveAnimation.SetModifier*
        name: SetModifier
        nameWithType: UniformCurveAnimation.SetModifier
        qualifiedName: Febucci.UI.Effects.UniformCurveAnimation.SetModifier
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.UniformCurveAnimation.SetModifier
  Febucci.UI.Effects.UniformCurveAnimation.ApplyEffectTo*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.UniformCurveAnimation.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: UniformCurveAnimation.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.UniformCurveAnimation.ApplyEffectTo
      VB:
      - id: Febucci.UI.Effects.UniformCurveAnimation.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: UniformCurveAnimation.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.UniformCurveAnimation.ApplyEffectTo
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.UniformCurveAnimation.ApplyEffectTo
  Febucci.UI.Effects.UniformCurveAnimation.GetMaxDuration*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.UniformCurveAnimation.GetMaxDuration*
        name: GetMaxDuration
        nameWithType: UniformCurveAnimation.GetMaxDuration
        qualifiedName: Febucci.UI.Effects.UniformCurveAnimation.GetMaxDuration
      VB:
      - id: Febucci.UI.Effects.UniformCurveAnimation.GetMaxDuration*
        name: GetMaxDuration
        nameWithType: UniformCurveAnimation.GetMaxDuration
        qualifiedName: Febucci.UI.Effects.UniformCurveAnimation.GetMaxDuration
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.UniformCurveAnimation.GetMaxDuration
  Febucci.UI.Effects.UniformCurveAnimation.CanApplyEffectTo*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.UniformCurveAnimation.CanApplyEffectTo*
        name: CanApplyEffectTo
        nameWithType: UniformCurveAnimation.CanApplyEffectTo
        qualifiedName: Febucci.UI.Effects.UniformCurveAnimation.CanApplyEffectTo
      VB:
      - id: Febucci.UI.Effects.UniformCurveAnimation.CanApplyEffectTo*
        name: CanApplyEffectTo
        nameWithType: UniformCurveAnimation.CanApplyEffectTo
        qualifiedName: Febucci.UI.Effects.UniformCurveAnimation.CanApplyEffectTo
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.UniformCurveAnimation.CanApplyEffectTo
  Febucci.UI.Effects.UniformCurveAnimation:
    name:
      CSharp:
      - id: Febucci.UI.Effects.UniformCurveAnimation
        name: UniformCurveAnimation
        nameWithType: UniformCurveAnimation
        qualifiedName: Febucci.UI.Effects.UniformCurveAnimation
      VB:
      - id: Febucci.UI.Effects.UniformCurveAnimation
        name: UniformCurveAnimation
        nameWithType: UniformCurveAnimation
        qualifiedName: Febucci.UI.Effects.UniformCurveAnimation
    isDefinition: true
    commentId: T:Febucci.UI.Effects.UniformCurveAnimation
  Febucci.UI.Effects.AnimationData[]:
    name:
      CSharp:
      - id: Febucci.UI.Effects.AnimationData
        name: AnimationData
        nameWithType: AnimationData
        qualifiedName: Febucci.UI.Effects.AnimationData
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Febucci.UI.Effects.AnimationData
        name: AnimationData
        nameWithType: AnimationData
        qualifiedName: Febucci.UI.Effects.AnimationData
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Febucci.UI.Effects.VertexCurveAnimation.VertexData*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.VertexCurveAnimation.VertexData*
        name: VertexData
        nameWithType: VertexCurveAnimation.VertexData
        qualifiedName: Febucci.UI.Effects.VertexCurveAnimation.VertexData
      VB:
      - id: Febucci.UI.Effects.VertexCurveAnimation.VertexData*
        name: VertexData
        nameWithType: VertexCurveAnimation.VertexData
        qualifiedName: Febucci.UI.Effects.VertexCurveAnimation.VertexData
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.VertexCurveAnimation.VertexData
  Febucci.UI.Effects.VertexCurveAnimation.ResetContext*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.VertexCurveAnimation.ResetContext*
        name: ResetContext
        nameWithType: VertexCurveAnimation.ResetContext
        qualifiedName: Febucci.UI.Effects.VertexCurveAnimation.ResetContext
      VB:
      - id: Febucci.UI.Effects.VertexCurveAnimation.ResetContext*
        name: ResetContext
        nameWithType: VertexCurveAnimation.ResetContext
        qualifiedName: Febucci.UI.Effects.VertexCurveAnimation.ResetContext
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.VertexCurveAnimation.ResetContext
  Febucci.UI.Effects.VertexCurveAnimation.SetModifier*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.VertexCurveAnimation.SetModifier*
        name: SetModifier
        nameWithType: VertexCurveAnimation.SetModifier
        qualifiedName: Febucci.UI.Effects.VertexCurveAnimation.SetModifier
      VB:
      - id: Febucci.UI.Effects.VertexCurveAnimation.SetModifier*
        name: SetModifier
        nameWithType: VertexCurveAnimation.SetModifier
        qualifiedName: Febucci.UI.Effects.VertexCurveAnimation.SetModifier
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.VertexCurveAnimation.SetModifier
  Febucci.UI.Effects.VertexCurveAnimation.ApplyEffectTo*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.VertexCurveAnimation.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: VertexCurveAnimation.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.VertexCurveAnimation.ApplyEffectTo
      VB:
      - id: Febucci.UI.Effects.VertexCurveAnimation.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: VertexCurveAnimation.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.VertexCurveAnimation.ApplyEffectTo
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.VertexCurveAnimation.ApplyEffectTo
  Febucci.UI.Effects.VertexCurveAnimation.GetMaxDuration*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.VertexCurveAnimation.GetMaxDuration*
        name: GetMaxDuration
        nameWithType: VertexCurveAnimation.GetMaxDuration
        qualifiedName: Febucci.UI.Effects.VertexCurveAnimation.GetMaxDuration
      VB:
      - id: Febucci.UI.Effects.VertexCurveAnimation.GetMaxDuration*
        name: GetMaxDuration
        nameWithType: VertexCurveAnimation.GetMaxDuration
        qualifiedName: Febucci.UI.Effects.VertexCurveAnimation.GetMaxDuration
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.VertexCurveAnimation.GetMaxDuration
  Febucci.UI.Effects.VertexCurveAnimation.CanApplyEffectTo*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.VertexCurveAnimation.CanApplyEffectTo*
        name: CanApplyEffectTo
        nameWithType: VertexCurveAnimation.CanApplyEffectTo
        qualifiedName: Febucci.UI.Effects.VertexCurveAnimation.CanApplyEffectTo
      VB:
      - id: Febucci.UI.Effects.VertexCurveAnimation.CanApplyEffectTo*
        name: CanApplyEffectTo
        nameWithType: VertexCurveAnimation.CanApplyEffectTo
        qualifiedName: Febucci.UI.Effects.VertexCurveAnimation.CanApplyEffectTo
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.VertexCurveAnimation.CanApplyEffectTo
  Febucci.UI.Effects.VertexCurveAnimation:
    name:
      CSharp:
      - id: Febucci.UI.Effects.VertexCurveAnimation
        name: VertexCurveAnimation
        nameWithType: VertexCurveAnimation
        qualifiedName: Febucci.UI.Effects.VertexCurveAnimation
      VB:
      - id: Febucci.UI.Effects.VertexCurveAnimation
        name: VertexCurveAnimation
        nameWithType: VertexCurveAnimation
        qualifiedName: Febucci.UI.Effects.VertexCurveAnimation
    isDefinition: true
    commentId: T:Febucci.UI.Effects.VertexCurveAnimation
  Febucci.UI.Effects.FloatCurve:
    name:
      CSharp:
      - id: Febucci.UI.Effects.FloatCurve
        name: FloatCurve
        nameWithType: FloatCurve
        qualifiedName: Febucci.UI.Effects.FloatCurve
      VB:
      - id: Febucci.UI.Effects.FloatCurve
        name: FloatCurve
        nameWithType: FloatCurve
        qualifiedName: Febucci.UI.Effects.FloatCurve
    isDefinition: true
    parent: Febucci.UI.Effects
    commentId: T:Febucci.UI.Effects.FloatCurve
  Febucci.UI.Effects.ColorCurve:
    name:
      CSharp:
      - id: Febucci.UI.Effects.ColorCurve
        name: ColorCurve
        nameWithType: ColorCurve
        qualifiedName: Febucci.UI.Effects.ColorCurve
      VB:
      - id: Febucci.UI.Effects.ColorCurve
        name: ColorCurve
        nameWithType: ColorCurve
        qualifiedName: Febucci.UI.Effects.ColorCurve
    isDefinition: true
    parent: Febucci.UI.Effects
    commentId: T:Febucci.UI.Effects.ColorCurve
  Matrix4x4:
    name:
      CSharp:
      - id: Matrix4x4
        name: Matrix4x4
        nameWithType: Matrix4x4
        qualifiedName: Matrix4x4
        isExternal: true
      VB:
      - id: Matrix4x4
        name: Matrix4x4
        nameWithType: Matrix4x4
        qualifiedName: Matrix4x4
        isExternal: true
    isDefinition: true
    commentId: '!:Matrix4x4'
  Febucci.UI.Effects.AnimationData.TryCalculatingMatrix*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.AnimationData.TryCalculatingMatrix*
        name: TryCalculatingMatrix
        nameWithType: AnimationData.TryCalculatingMatrix
        qualifiedName: Febucci.UI.Effects.AnimationData.TryCalculatingMatrix
      VB:
      - id: Febucci.UI.Effects.AnimationData.TryCalculatingMatrix*
        name: TryCalculatingMatrix
        nameWithType: AnimationData.TryCalculatingMatrix
        qualifiedName: Febucci.UI.Effects.AnimationData.TryCalculatingMatrix
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.AnimationData.TryCalculatingMatrix
  Febucci.UI.Effects.AnimationData.TryCalculatingColor*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.AnimationData.TryCalculatingColor*
        name: TryCalculatingColor
        nameWithType: AnimationData.TryCalculatingColor
        qualifiedName: Febucci.UI.Effects.AnimationData.TryCalculatingColor
      VB:
      - id: Febucci.UI.Effects.AnimationData.TryCalculatingColor*
        name: TryCalculatingColor
        nameWithType: AnimationData.TryCalculatingColor
        qualifiedName: Febucci.UI.Effects.AnimationData.TryCalculatingColor
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.AnimationData.TryCalculatingColor
  Febucci.UI.Effects.ColorCurveProperty:
    name:
      CSharp:
      - id: Febucci.UI.Effects.ColorCurveProperty
        name: ColorCurveProperty
        nameWithType: ColorCurveProperty
        qualifiedName: Febucci.UI.Effects.ColorCurveProperty
      VB:
      - id: Febucci.UI.Effects.ColorCurveProperty
        name: ColorCurveProperty
        nameWithType: ColorCurveProperty
        qualifiedName: Febucci.UI.Effects.ColorCurveProperty
    isDefinition: true
    commentId: T:Febucci.UI.Effects.ColorCurveProperty
  Gradient:
    name:
      CSharp:
      - id: Gradient
        name: Gradient
        nameWithType: Gradient
        qualifiedName: Gradient
        isExternal: true
      VB:
      - id: Gradient
        name: Gradient
        nameWithType: Gradient
        qualifiedName: Gradient
        isExternal: true
    isDefinition: true
    commentId: '!:Gradient'
  Febucci.UI.Effects.ColorCurve.#ctor*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.ColorCurve.#ctor*
        name: ColorCurve
        nameWithType: ColorCurve.ColorCurve
        qualifiedName: Febucci.UI.Effects.ColorCurve.ColorCurve
      VB:
      - id: Febucci.UI.Effects.ColorCurve.#ctor*
        name: ColorCurve
        nameWithType: ColorCurve.ColorCurve
        qualifiedName: Febucci.UI.Effects.ColorCurve.ColorCurve
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.ColorCurve.#ctor
  Febucci.UI.Effects.ColorCurve.Evaluate*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.ColorCurve.Evaluate*
        name: Evaluate
        nameWithType: ColorCurve.Evaluate
        qualifiedName: Febucci.UI.Effects.ColorCurve.Evaluate
      VB:
      - id: Febucci.UI.Effects.ColorCurve.Evaluate*
        name: Evaluate
        nameWithType: ColorCurve.Evaluate
        qualifiedName: Febucci.UI.Effects.ColorCurve.Evaluate
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.ColorCurve.Evaluate
  Febucci.UI.Effects.EmissionCurveProperty:
    name:
      CSharp:
      - id: Febucci.UI.Effects.EmissionCurveProperty
        name: EmissionCurveProperty
        nameWithType: EmissionCurveProperty
        qualifiedName: Febucci.UI.Effects.EmissionCurveProperty
      VB:
      - id: Febucci.UI.Effects.EmissionCurveProperty
        name: EmissionCurveProperty
        nameWithType: EmissionCurveProperty
        qualifiedName: Febucci.UI.Effects.EmissionCurveProperty
    isDefinition: true
    commentId: T:Febucci.UI.Effects.EmissionCurveProperty
  Febucci.UI.Effects.EmissionCurve.GetMaxDuration*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.EmissionCurve.GetMaxDuration*
        name: GetMaxDuration
        nameWithType: EmissionCurve.GetMaxDuration
        qualifiedName: Febucci.UI.Effects.EmissionCurve.GetMaxDuration
      VB:
      - id: Febucci.UI.Effects.EmissionCurve.GetMaxDuration*
        name: GetMaxDuration
        nameWithType: EmissionCurve.GetMaxDuration
        qualifiedName: Febucci.UI.Effects.EmissionCurve.GetMaxDuration
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.EmissionCurve.GetMaxDuration
  Febucci.UI.Effects.EmissionCurve.#ctor*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.EmissionCurve.#ctor*
        name: EmissionCurve
        nameWithType: EmissionCurve.EmissionCurve
        qualifiedName: Febucci.UI.Effects.EmissionCurve.EmissionCurve
      VB:
      - id: Febucci.UI.Effects.EmissionCurve.#ctor*
        name: EmissionCurve
        nameWithType: EmissionCurve.EmissionCurve
        qualifiedName: Febucci.UI.Effects.EmissionCurve.EmissionCurve
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.EmissionCurve.#ctor
  Keyframe[]:
    name:
      CSharp:
      - id: Keyframe
        name: Keyframe
        nameWithType: Keyframe
        qualifiedName: Keyframe
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Keyframe
        name: Keyframe
        nameWithType: Keyframe
        qualifiedName: Keyframe
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Febucci.UI.Effects.EmissionCurve.Evaluate*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.EmissionCurve.Evaluate*
        name: Evaluate
        nameWithType: EmissionCurve.Evaluate
        qualifiedName: Febucci.UI.Effects.EmissionCurve.Evaluate
      VB:
      - id: Febucci.UI.Effects.EmissionCurve.Evaluate*
        name: Evaluate
        nameWithType: EmissionCurve.Evaluate
        qualifiedName: Febucci.UI.Effects.EmissionCurve.Evaluate
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.EmissionCurve.Evaluate
  Febucci.UI.Effects.FloatCurveProperty:
    name:
      CSharp:
      - id: Febucci.UI.Effects.FloatCurveProperty
        name: FloatCurveProperty
        nameWithType: FloatCurveProperty
        qualifiedName: Febucci.UI.Effects.FloatCurveProperty
      VB:
      - id: Febucci.UI.Effects.FloatCurveProperty
        name: FloatCurveProperty
        nameWithType: FloatCurveProperty
        qualifiedName: Febucci.UI.Effects.FloatCurveProperty
    isDefinition: true
    commentId: T:Febucci.UI.Effects.FloatCurveProperty
  Febucci.UI.Effects.FloatCurve.#ctor*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.FloatCurve.#ctor*
        name: FloatCurve
        nameWithType: FloatCurve.FloatCurve
        qualifiedName: Febucci.UI.Effects.FloatCurve.FloatCurve
      VB:
      - id: Febucci.UI.Effects.FloatCurve.#ctor*
        name: FloatCurve
        nameWithType: FloatCurve.FloatCurve
        qualifiedName: Febucci.UI.Effects.FloatCurve.FloatCurve
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.FloatCurve.#ctor
  Febucci.UI.Effects.FloatCurve.Evaluate*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.FloatCurve.Evaluate*
        name: Evaluate
        nameWithType: FloatCurve.Evaluate
        qualifiedName: Febucci.UI.Effects.FloatCurve.Evaluate
      VB:
      - id: Febucci.UI.Effects.FloatCurve.Evaluate*
        name: Evaluate
        nameWithType: FloatCurve.Evaluate
        qualifiedName: Febucci.UI.Effects.FloatCurve.Evaluate
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.FloatCurve.Evaluate
  Febucci.UI.Effects.TimeMode.#ctor*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.TimeMode.#ctor*
        name: TimeMode
        nameWithType: TimeMode.TimeMode
        qualifiedName: Febucci.UI.Effects.TimeMode.TimeMode
      VB:
      - id: Febucci.UI.Effects.TimeMode.#ctor*
        name: TimeMode
        nameWithType: TimeMode.TimeMode
        qualifiedName: Febucci.UI.Effects.TimeMode.TimeMode
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.TimeMode.#ctor
  Febucci.UI.Effects.TimeMode.GetTime*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.TimeMode.GetTime*
        name: GetTime
        nameWithType: TimeMode.GetTime
        qualifiedName: Febucci.UI.Effects.TimeMode.GetTime
      VB:
      - id: Febucci.UI.Effects.TimeMode.GetTime*
        name: GetTime
        nameWithType: TimeMode.GetTime
        qualifiedName: Febucci.UI.Effects.TimeMode.GetTime
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.TimeMode.GetTime
  Febucci.UI.Effects.AnimationScriptableBase.TagID*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.AnimationScriptableBase.TagID*
        name: TagID
        nameWithType: AnimationScriptableBase.TagID
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase.TagID
      VB:
      - id: Febucci.UI.Effects.AnimationScriptableBase.TagID*
        name: TagID
        nameWithType: AnimationScriptableBase.TagID
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase.TagID
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.AnimationScriptableBase.TagID
  Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce*
        name: InitializeOnce
        nameWithType: AnimationScriptableBase.InitializeOnce
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
      VB:
      - id: Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce*
        name: InitializeOnce
        nameWithType: AnimationScriptableBase.InitializeOnce
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.AnimationScriptableBase.InitializeOnce
  Febucci.UI.Effects.AnimationScriptableBase.OnInitialize*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.AnimationScriptableBase.OnInitialize*
        name: OnInitialize
        nameWithType: AnimationScriptableBase.OnInitialize
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
      VB:
      - id: Febucci.UI.Effects.AnimationScriptableBase.OnInitialize*
        name: OnInitialize
        nameWithType: AnimationScriptableBase.OnInitialize
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.AnimationScriptableBase.OnInitialize
  Febucci.UI.Effects.AnimationScriptableBase.ResetContext*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.AnimationScriptableBase.ResetContext*
        name: ResetContext
        nameWithType: AnimationScriptableBase.ResetContext
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase.ResetContext
      VB:
      - id: Febucci.UI.Effects.AnimationScriptableBase.ResetContext*
        name: ResetContext
        nameWithType: AnimationScriptableBase.ResetContext
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase.ResetContext
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.AnimationScriptableBase.ResetContext
  Febucci.UI.Effects.AnimationScriptableBase.SetModifier*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.AnimationScriptableBase.SetModifier*
        name: SetModifier
        nameWithType: AnimationScriptableBase.SetModifier
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase.SetModifier
      VB:
      - id: Febucci.UI.Effects.AnimationScriptableBase.SetModifier*
        name: SetModifier
        nameWithType: AnimationScriptableBase.SetModifier
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase.SetModifier
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.AnimationScriptableBase.SetModifier
  Febucci.UI.Effects.AnimationScriptableBase.GetMaxDuration*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.AnimationScriptableBase.GetMaxDuration*
        name: GetMaxDuration
        nameWithType: AnimationScriptableBase.GetMaxDuration
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase.GetMaxDuration
      VB:
      - id: Febucci.UI.Effects.AnimationScriptableBase.GetMaxDuration*
        name: GetMaxDuration
        nameWithType: AnimationScriptableBase.GetMaxDuration
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase.GetMaxDuration
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.AnimationScriptableBase.GetMaxDuration
  Febucci.UI.Effects.AnimationScriptableBase.CanApplyEffectTo*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.AnimationScriptableBase.CanApplyEffectTo*
        name: CanApplyEffectTo
        nameWithType: AnimationScriptableBase.CanApplyEffectTo
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase.CanApplyEffectTo
      VB:
      - id: Febucci.UI.Effects.AnimationScriptableBase.CanApplyEffectTo*
        name: CanApplyEffectTo
        nameWithType: AnimationScriptableBase.CanApplyEffectTo
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase.CanApplyEffectTo
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.AnimationScriptableBase.CanApplyEffectTo
  Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: AnimationScriptableBase.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo
      VB:
      - id: Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo*
        name: ApplyEffectTo
        nameWithType: AnimationScriptableBase.ApplyEffectTo
        qualifiedName: Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.AnimationScriptableBase.ApplyEffectTo
  Febucci.UI.Effects.AnimationsDatabase:
    name:
      CSharp:
      - id: Febucci.UI.Effects.AnimationsDatabase
        name: AnimationsDatabase
        nameWithType: AnimationsDatabase
        qualifiedName: Febucci.UI.Effects.AnimationsDatabase
      VB:
      - id: Febucci.UI.Effects.AnimationsDatabase
        name: AnimationsDatabase
        nameWithType: AnimationsDatabase
        qualifiedName: Febucci.UI.Effects.AnimationsDatabase
    isDefinition: true
    commentId: T:Febucci.UI.Effects.AnimationsDatabase
  Febucci.UI.Effects.Tween.EaseIn*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.Tween.EaseIn*
        name: EaseIn
        nameWithType: Tween.EaseIn
        qualifiedName: Febucci.UI.Effects.Tween.EaseIn
      VB:
      - id: Febucci.UI.Effects.Tween.EaseIn*
        name: EaseIn
        nameWithType: Tween.EaseIn
        qualifiedName: Febucci.UI.Effects.Tween.EaseIn
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.Tween.EaseIn
  Febucci.UI.Effects.Tween.Flip*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.Tween.Flip*
        name: Flip
        nameWithType: Tween.Flip
        qualifiedName: Febucci.UI.Effects.Tween.Flip
      VB:
      - id: Febucci.UI.Effects.Tween.Flip*
        name: Flip
        nameWithType: Tween.Flip
        qualifiedName: Febucci.UI.Effects.Tween.Flip
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.Tween.Flip
  Febucci.UI.Effects.Tween.Square*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.Tween.Square*
        name: Square
        nameWithType: Tween.Square
        qualifiedName: Febucci.UI.Effects.Tween.Square
      VB:
      - id: Febucci.UI.Effects.Tween.Square*
        name: Square
        nameWithType: Tween.Square
        qualifiedName: Febucci.UI.Effects.Tween.Square
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.Tween.Square
  Febucci.UI.Effects.Tween.EaseOut*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.Tween.EaseOut*
        name: EaseOut
        nameWithType: Tween.EaseOut
        qualifiedName: Febucci.UI.Effects.Tween.EaseOut
      VB:
      - id: Febucci.UI.Effects.Tween.EaseOut*
        name: EaseOut
        nameWithType: Tween.EaseOut
        qualifiedName: Febucci.UI.Effects.Tween.EaseOut
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.Tween.EaseOut
  Febucci.UI.Effects.Tween.EaseInOut*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.Tween.EaseInOut*
        name: EaseInOut
        nameWithType: Tween.EaseInOut
        qualifiedName: Febucci.UI.Effects.Tween.EaseInOut
      VB:
      - id: Febucci.UI.Effects.Tween.EaseInOut*
        name: EaseInOut
        nameWithType: Tween.EaseInOut
        qualifiedName: Febucci.UI.Effects.Tween.EaseInOut
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.Tween.EaseInOut
  Febucci.UI.Effects.Tween.BounceOut*:
    name:
      CSharp:
      - id: Febucci.UI.Effects.Tween.BounceOut*
        name: BounceOut
        nameWithType: Tween.BounceOut
        qualifiedName: Febucci.UI.Effects.Tween.BounceOut
      VB:
      - id: Febucci.UI.Effects.Tween.BounceOut*
        name: BounceOut
        nameWithType: Tween.BounceOut
        qualifiedName: Febucci.UI.Effects.Tween.BounceOut
    isDefinition: true
    commentId: Overload:Febucci.UI.Effects.Tween.BounceOut
  Febucci.UI.Effects.Tween:
    name:
      CSharp:
      - id: Febucci.UI.Effects.Tween
        name: Tween
        nameWithType: Tween
        qualifiedName: Febucci.UI.Effects.Tween
      VB:
      - id: Febucci.UI.Effects.Tween
        name: Tween
        nameWithType: Tween
        qualifiedName: Febucci.UI.Effects.Tween
    isDefinition: true
    commentId: T:Febucci.UI.Effects.Tween
  Febucci.UI.Styles.Style.#ctor*:
    name:
      CSharp:
      - id: Febucci.UI.Styles.Style.#ctor*
        name: Style
        nameWithType: Style.Style
        qualifiedName: Febucci.UI.Styles.Style.Style
      VB:
      - id: Febucci.UI.Styles.Style.#ctor*
        name: Style
        nameWithType: Style.Style
        qualifiedName: Febucci.UI.Styles.Style.Style
    isDefinition: true
    commentId: Overload:Febucci.UI.Styles.Style.#ctor
  Febucci.UI.Styles.Style:
    name:
      CSharp:
      - id: Febucci.UI.Styles.Style
        name: Style
        nameWithType: Style
        qualifiedName: Febucci.UI.Styles.Style
      VB:
      - id: Febucci.UI.Styles.Style
        name: Style
        nameWithType: Style
        qualifiedName: Febucci.UI.Styles.Style
    isDefinition: true
    parent: Febucci.UI.Styles
    commentId: T:Febucci.UI.Styles.Style
  Febucci.UI.Styles.Style[]:
    name:
      CSharp:
      - id: Febucci.UI.Styles.Style
        name: Style
        nameWithType: Style
        qualifiedName: Febucci.UI.Styles.Style
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Febucci.UI.Styles.Style
        name: Style
        nameWithType: Style
        qualifiedName: Febucci.UI.Styles.Style
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Febucci.UI.Styles.StyleSheetScriptable.Styles*:
    name:
      CSharp:
      - id: Febucci.UI.Styles.StyleSheetScriptable.Styles*
        name: Styles
        nameWithType: StyleSheetScriptable.Styles
        qualifiedName: Febucci.UI.Styles.StyleSheetScriptable.Styles
      VB:
      - id: Febucci.UI.Styles.StyleSheetScriptable.Styles*
        name: Styles
        nameWithType: StyleSheetScriptable.Styles
        qualifiedName: Febucci.UI.Styles.StyleSheetScriptable.Styles
    isDefinition: true
    commentId: Overload:Febucci.UI.Styles.StyleSheetScriptable.Styles
  Febucci.UI.Styles.StyleSheetScriptable.BuildOnce*:
    name:
      CSharp:
      - id: Febucci.UI.Styles.StyleSheetScriptable.BuildOnce*
        name: BuildOnce
        nameWithType: StyleSheetScriptable.BuildOnce
        qualifiedName: Febucci.UI.Styles.StyleSheetScriptable.BuildOnce
      VB:
      - id: Febucci.UI.Styles.StyleSheetScriptable.BuildOnce*
        name: BuildOnce
        nameWithType: StyleSheetScriptable.BuildOnce
        qualifiedName: Febucci.UI.Styles.StyleSheetScriptable.BuildOnce
    isDefinition: true
    commentId: Overload:Febucci.UI.Styles.StyleSheetScriptable.BuildOnce
  Febucci.UI.Styles.StyleSheetScriptable.ForceBuildRefresh*:
    name:
      CSharp:
      - id: Febucci.UI.Styles.StyleSheetScriptable.ForceBuildRefresh*
        name: ForceBuildRefresh
        nameWithType: StyleSheetScriptable.ForceBuildRefresh
        qualifiedName: Febucci.UI.Styles.StyleSheetScriptable.ForceBuildRefresh
      VB:
      - id: Febucci.UI.Styles.StyleSheetScriptable.ForceBuildRefresh*
        name: ForceBuildRefresh
        nameWithType: StyleSheetScriptable.ForceBuildRefresh
        qualifiedName: Febucci.UI.Styles.StyleSheetScriptable.ForceBuildRefresh
    isDefinition: true
    commentId: Overload:Febucci.UI.Styles.StyleSheetScriptable.ForceBuildRefresh
  Febucci.UI.Styles:
    name:
      CSharp:
      - name: Febucci.UI.Styles
        nameWithType: Febucci.UI.Styles
        qualifiedName: Febucci.UI.Styles
      VB:
      - name: Febucci.UI.Styles
        nameWithType: Febucci.UI.Styles
        qualifiedName: Febucci.UI.Styles
    isDefinition: true
    commentId: N:Febucci.UI.Styles
  Febucci.UI.Styles.StyleSheetScriptable.TryGetStyle*:
    name:
      CSharp:
      - id: Febucci.UI.Styles.StyleSheetScriptable.TryGetStyle*
        name: TryGetStyle
        nameWithType: StyleSheetScriptable.TryGetStyle
        qualifiedName: Febucci.UI.Styles.StyleSheetScriptable.TryGetStyle
      VB:
      - id: Febucci.UI.Styles.StyleSheetScriptable.TryGetStyle*
        name: TryGetStyle
        nameWithType: StyleSheetScriptable.TryGetStyle
        qualifiedName: Febucci.UI.Styles.StyleSheetScriptable.TryGetStyle
    isDefinition: true
    commentId: Overload:Febucci.UI.Styles.StyleSheetScriptable.TryGetStyle
  Febucci.UI.Styles.StyleSheetScriptable:
    name:
      CSharp:
      - id: Febucci.UI.Styles.StyleSheetScriptable
        name: StyleSheetScriptable
        nameWithType: StyleSheetScriptable
        qualifiedName: Febucci.UI.Styles.StyleSheetScriptable
      VB:
      - id: Febucci.UI.Styles.StyleSheetScriptable
        name: StyleSheetScriptable
        nameWithType: StyleSheetScriptable
        qualifiedName: Febucci.UI.Styles.StyleSheetScriptable
    isDefinition: true
    commentId: T:Febucci.UI.Styles.StyleSheetScriptable
